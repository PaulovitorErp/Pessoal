#include "msobject.ch"
#include "totvs.framework.treports.integratedprovider.th"
 
namespace totvs.protheus.OrdemServicoSmartViewBusinessObject
 
Static _STJ_FILIAL     := 1
Static _STJ_ORDEM      := 2
Static _STJ_PLANO      := 3
Static _STJ_CODBEM     := 4
Static _STJ_DTMPFIM    := 5
Static _STJ_CCUSTO     := 6
Static _STJ_CENTRAB    := 7
Static _STJ_SERVICO    := 8
Static _STJ_SEQRELA    := 9
Static _STJ_PRIORID    := 10
Static _STJ_DTULTMA    := 11
Static _STJ_CODAREA    := 12
Static _STJ_TIPO       := 13
Static _STJ_SEQUENC    := 14
Static _STJ_DTPPFIM    := 15
Static _STJ_HOPPFIM    := 16
Static _STJ_DTMPINI    := 17
Static _STJ_HOMPINI    := 18
Static _STJ_HOMPFIM    := 19
Static _STJ_OBSERVA    := 20
Static _STJ_POSCONT    := 21
Static _STJ_POSCON2    := 22
Static _STJ_SOLICI     := 23
Static _STJ_TIPOOS     := 24
Static _ST9_NOME       := 25
Static _ST9_PLACA      := 26
Static _ST9_PRIORID    := 27
Static _ST9_LOCAL      := 28
Static _ST9_DESCRIC    := 29
Static _ST9_TEMCONT    := 30
Static _ST9_CODBEM_PAI := 31
Static _ST9_NOME_PAI   := 32
Static _CTT_DESC01     := 33
Static _SHB_NOME       := 34
Static _ST4_NOME       := 35
Static _ST4_CODAREA    := 36
Static _ST4_TIPOMAN    := 37
Static _STF_NOMEMAN    := 38
Static _STF_CONMANU    := 39
Static _STF_DOCTO      := 40
Static _STF_TEPAANT    := 41
Static _STF_UNPAANT    := 42
Static _STF_TEPADEP    := 43
Static _STF_UNPADEP    := 44
Static _STF_DESCRIC    := 45
Static _STD_NOME       := 46
Static _STE_NOME       := 47
Static _TAF_LOCBEM     := 48
Static _TAF_NOMNIV     := 49
Static _TQB_CDSOLI     := 50
Static _TQB_DTABER     := 51
Static _TQB_HOABER     := 52
Static _TQB_PRIORI     := 53
Static _STI_DESCRIC    := 54
Static _STF_TIPACOM    := 55
Static _STL_TAREFA     := 56
Static _STL_TIPOREG    := 57
Static _STL_CODIGO     := 58
Static _STL_DTINICI    := 59
Static _STL_HOINICI    := 60
Static _STL_QUANREC    := 61
Static _STL_QUANTID    := 62
Static _STL_UNIDADE    := 63
Static _STL_USACALE    := 64
Static _STL_DESTINO    := 65
Static _STL_TIPOHOR    := 66
Static _STB_CARACTE    := 67
Static _STB_CONDOP     := 68
Static _STB_DETALHE    := 69
Static _STB_INFO02     := 70
Static _STB_UNIDADE    := 71
Static _TPR_NOME       := 72
Static _STQ_TAREFA     := 73
Static _STQ_ETAPA      := 74
Static _ST5_SEQUENC    := 75
Static _STQ_SEQETA     := 76
Static _ST5_DESCRIC    := 77
Static _TTC_CDSINT     := 78
Static _TTB_BLOQPT     := 79
Static _TTB_DESSIN     := 80
Static _TPL_CODMOT     := 81
Static _TPL_DTINIC     := 82
Static _TPL_HOINIC     := 83
Static _TPL_DTFIM      := 84
Static _TPL_HOFIM      := 85
Static _TPJ_DESMOT     := 86
Static _TPY_CODPRO     := 87
Static _STL_DTIPEC     := 88
Static _STL_HOIPEC     := 89
Static _STL_POSCONT    := 90
Static _STL_POSCON2    := 91
Static _STL_CONTPROX   := 92
Static _STL_CON2PROX   := 93
Static _STL_DTPROX     := 94
Static _STL_HRPROX     := 95
Static _TPC_ETAPA      := 96
Static _TPC_OPCAO      := 97
Static _TPC_TIPRES     := 98
Static _TPC_FORMUL     := 99
Static _DEVSUB         := 100
// O campo DEVSUBREG é apenas para indicar qual o tipo de Subregistro, não é um valor da OS


//-------------------------------------------------------------------
/*/{Protheus.doc} OrdemServicoSmartViewBusinessObject
Objeto de negócio construido para atender Ordens de Serviço.
Tabelas: STJ, ST9, CTT, SHB, TPR, STB, ST4, STF, STD, STE, STQ, ST5, TTC, TTB, STL, TPL.
@type Classe
 
@author João Ricardo Santini Zandoná
@since 30/05/2023
@version P11

@return Nil
/*/
//-------------------------------------------------------------------

@totvsFrameworkTReportsIntegratedProvider(active=.T., team="SIGAMNT", tables="STJ, TPR, STB, STQ, ST5, TTB, STL, TPL", name="OrdemServicoSmartViewBusinessObject", country="ALL", initialRelease="12.1.2310")
class OrdemServicoSmartViewBusinessObject from totvs.framework.treports.integratedprovider.IntegratedProvider
    public method new() as object
    public method getAreas() as array
    public method getDescription() as character
    public method getData() as object
    public method getSchema() as object
    public method mntAppend() as object
    public method mntLGPD() as array
    public method mntTypePar() as array
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método Construtor do Objeto de Negócio
@type Método
 
@author João Ricardo Santini Zandoná
@since 04/07/2023
@version P11

@return objeto, Retorna o próprio objeto
/*/
//-------------------------------------------------------------------
method new() as object class OrdemServicoSmartViewBusinessObject
    _Super:new()
    self:setDisplayName('Ordem de Serviço')
    self:SetPergunte('MNT675')
return self

//-------------------------------------------------------------------
/*/{Protheus.doc} getDescription
Descrição do Objeto de Negócio
@type Método
 
@author João Ricardo Santini Zandoná
@since 04/07/2023
@version P11

@return caractere, Conteúdo da descrição do Objeto de Negócios
/*/
//-------------------------------------------------------------------
method getDescription() as character class OrdemServicoSmartViewBusinessObject
return 'Tabelas: STJ, ST9, CTT, SHB, TPR, STB, ST4, STF, STD, STE, STQ, ST5, TTC, TTB, STL, TPL'

//-------------------------------------------------------------------
/*/{Protheus.doc} getAreas
Áreas do menu que o Objeto de Negócio deve ficar
@type Método
 
@author João Ricardo Santini Zandoná
@since 04/07/2023
@version P11

@return array, Retorna um array contendo as sessões do Menu em que o Objeto de Negócio deve aparecer
/*/
//-------------------------------------------------------------------
method getAreas() as array class OrdemServicoSmartViewBusinessObject
return {'Ordem de Serviço', 'Ordem Serviço'}

//-------------------------------------------------------------------
/*/{Protheus.doc} GetData
Método responsável pelo processamento dos dados enviados pelo 
Objeto de Negócio
@type Método

@author João Ricardo Santini Zandoná
@since 04/07/2023
@version P11

@param nPage, numerico, Número da página atual
@param oFilter, objeto, Filtros aplicados pelo usuário

@return objeto, Retorna o próprio objeto
/*/
//-------------------------------------------------------------------
method getData(nPage as numeric, oFilter as object) as object class OrdemServicoSmartViewBusinessObject
    
    Local cQuery    as character
    Local cQueryAux as character
    Local cAlias    as character
    Local nI        as numeric
    Local lOrdem    := .F.
    Local lListEta  := .T.
    Local lListPec  := .T.
    Local lListOpEt := .T.
    Local lListLoc  := .T.
    Local aDados    := { {'TJ_FILIAL', ' '},{'TJ_ORDEM', ' '},{'TJ_PLANO', ' '},;
    {'TJ_CODBEM', ' '},{'TJ_DTMPFIM', ' '},{'TJ_CCUSTO', ' '},{'TJ_CENTRAB', ' '},{'TJ_SERVICO', ' '},{'TJ_SEQRELA', ' '},{'TJ_PRIORID', ' '},{'TJ_DTULTMA', ' '},;
    {'TJ_CODAREA', ' '},{'TJ_TIPO', ' '},{'TJ_SEQUENC', ' '},{'TJ_DTPPFIM', ' '},{'TJ_HOPPFIM', ' '},{'TJ_DTMPINI', ' '},{'TJ_HOMPINI', ' '},{'TJ_HOMPFIM', ' '}, {'TJ_OBSERVA', ' '}, {'TJ_POSCONT', ' '},{'TJ_POSCON2', ' '},{'TJ_SOLICI', ' '},{'TJ_TIPOOS', ' '},{'T9_NOME', ' '},{'T9_PLACA', ' '}, {'T9_PRIORID', ' '},{'T9_LOCAL', ' '},{'T9_DESCRIC', ' '},{'T9_TEMCONT', ' '},{'T9_CODBEM', ' '}/*Bem Pai*/, {'T9_NOME', ' '}/*Bem pai*/,{'CTT_DESC01', ' '},{'HB_NOME', ' '},{'T4_NOME', ' '},;
    {'T4_CODAREA', ' '},{'T4_TIPOMAN', ' '},{'TF_NOMEMAN', ' '},{'TF_CONMANU', ' '},{'TF_DOCTO', ' '},{'TF_TEPAANT', ' '},{'TF_UNPAANT', ' '},{'TF_TEPADEP', ' '},;
    {'TF_UNPADEP', ' '},{'TF_DESCRIC', ' '},{'TD_NOME', ' '},{'TE_NOME', ' '},{'TAF_NOMNIV', ' '},{'TAF_NOMNIV', ' '},{'TQB_CDSOLI', ' '},{'TQB_DTABER', ' '},{'TQB_HOABER', ' '},{'TQB_PRIORI', ' '},{'TI_DESCRIC', ' '}, {'TF_TIPACOM', ' '},{'TL_TAREFA', ' '},{'TL_TIPOREG', ' '},{'TL_CODIGO', ' '},{'TL_DTINICI', ' '},{'TL_HOINICI', ' '},{'TL_QUANREC', ' '},{'TL_QUANTID', ' '},{'TL_UNIDADE', ' '},{'TL_USACALE', ' '},{'TL_DESTINO', ' '},;
    {'TL_TIPOHOR', ' '},{'TB_CARACTE', ' '},{'TB_CONDOP', ' '},{'TB_DETALHE', ' '},{'TB_INFO02', ' '},{'TB_UNIDADE', ' '},{'TPR_NOME', ' '},{'TQ_TAREFA', ' '},;
    {'TQ_ETAPA', ' '},{'T5_SEQUENC', ' '},{'TQ_SEQETA', ' '},{'T5_DESCRIC', ' '},{'TTC_CDSINT', ' '},{'TTB_BLOQPT', ' '},{'TTB_DESSIN', ' '},{'TPL_CODMOT', ' '},{'TPL_DTINIC', ' '},{'TPL_HOINIC', ' '},;
    {'TPL_DTFIM', ' '},{'TPL_HOFIM', ' '},{'TPJ_DESMOT', ' '}, {'TPY_CODPRO', ' '}, {'TL_DTINICI', ' '}, {'TL_HOINICI', ' '}, {'TL_POSCONT', ' '}, {'TL_POSCON2', ' '}, {'TL_POSCONT', ' '}, {'TL_POSCON2', ' '}, {'TL_DTINICI', ' '}, {'TL_HOINICI', ' '}, {'TPC_ETAPA', ' '}, {'TPC_OPCAO', ' '}, {'TPC_TIPRES', ' '}, {'TPC_FORMUL', ' '}, {'DEV_SUBREG', ' '} }
    
    Local aOfusc     := FwProtectedDataUtil():UsrAccessPDField( __CUSERID,;
     {aDados[_STJ_FILIAL, 1], aDados[_STJ_ORDEM, 1], aDados[_STJ_PLANO, 1], aDados[_STJ_CODBEM, 1], aDados[_STJ_DTMPFIM, 1], aDados[_STJ_CCUSTO, 1], aDados[_STJ_CENTRAB, 1], aDados[_STJ_SERVICO, 1], aDados[_STJ_SEQRELA, 1], aDados[_STJ_PRIORID, 1],;
    aDados[_STJ_DTULTMA, 1], aDados[_STJ_CODAREA, 1], aDados[_STJ_TIPO, 1], aDados[_STJ_SEQUENC, 1], aDados[_STJ_DTPPFIM, 1], aDados[_STJ_HOPPFIM, 1], aDados[_STJ_DTMPINI, 1], aDados[_STJ_HOMPINI, 1], aDados[_STJ_HOMPFIM, 1], aDados[_STJ_OBSERVA, 1],;
    aDados[_STJ_POSCONT, 1], aDados[_STJ_POSCON2, 1], aDados[_STJ_SOLICI, 1], aDados[_STJ_TIPOOS, 1], aDados[_ST9_NOME, 1], aDados[_ST9_PLACA, 1], aDados[_ST9_PRIORID, 1], aDados[_ST9_LOCAL, 1], aDados[_ST9_DESCRIC, 1], aDados[_ST9_TEMCONT, 1],;
    aDados[_ST9_CODBEM_PAI, 1], aDados[_ST9_NOME_PAI, 1], aDados[_CTT_DESC01, 1], aDados[_SHB_NOME, 1], aDados[_ST4_NOME, 1], aDados[_ST4_CODAREA, 1], aDados[_ST4_TIPOMAN, 1], aDados[_STF_NOMEMAN, 1], aDados[_STF_CONMANU, 1], aDados[_STF_DOCTO, 1],;
    aDados[_STF_TEPAANT, 1], aDados[_STF_UNPAANT, 1], aDados[_STF_TEPADEP, 1], aDados[_STF_UNPADEP, 1], aDados[_STF_DESCRIC, 1], aDados[_STD_NOME, 1], aDados[_STE_NOME, 1], aDados[_TAF_LOCBEM, 1], aDados[_TAF_NOMNIV, 1],;
    aDados[_TQB_CDSOLI, 1], aDados[_TQB_DTABER, 1], aDados[_TQB_HOABER, 1], aDados[_TQB_PRIORI, 1], aDados[_STI_DESCRIC, 1], aDados[_STF_TIPACOM, 1], aDados[_STL_TAREFA, 1], aDados[_STL_TIPOREG, 1], aDados[_STL_CODIGO, 1],;
    aDados[_STL_DTINICI, 1], aDados[_STL_HOINICI, 1], aDados[_STL_QUANREC, 1], aDados[_STL_QUANTID, 1], aDados[_STL_UNIDADE, 1], aDados[_STL_USACALE, 1], aDados[_STL_DESTINO, 1], aDados[_STL_TIPOHOR, 1], aDados[_STB_CARACTE, 1], aDados[_STB_CONDOP, 1],;
    aDados[_STB_DETALHE, 1], aDados[_STB_INFO02, 1], aDados[_STB_UNIDADE, 1], aDados[_TPR_NOME, 1], aDados[_STQ_TAREFA, 1], aDados[_STQ_ETAPA, 1], aDados[_ST5_SEQUENC, 1], aDados[_STQ_SEQETA, 1], aDados[_ST5_DESCRIC, 1], aDados[_TTC_CDSINT, 1],;
    aDados[_TTB_BLOQPT, 1], aDados[_TTB_DESSIN, 1], aDados[_TPL_CODMOT, 1], aDados[_TPL_DTINIC, 1], aDados[_TPL_HOINIC, 1], aDados[_TPL_DTFIM, 1], aDados[_TPL_HOFIM, 1], aDados[_TPJ_DESMOT, 1], aDados[_TPY_CODPRO, 1], aDados[_STL_DTINICI, 1],;
    aDados[_STL_HOINICI, 1], aDados[_STL_POSCONT, 1], aDados[_STL_POSCON2, 1], aDados[_STL_CONTPROX, 1], aDados[_STL_CON2PROX, 1], aDados[_STL_DTPROX, 1], aDados[_STL_HRPROX, 1], aDados[_TPC_ETAPA, 1], aDados[_TPC_OPCAO, 1], aDados[_TPC_TIPRES, 1],;
    aDados[_TPC_FORMUL, 1]} ) // Array de campos permitidos para visão do usuário ( __CUSERID = parâmetro padrão )

    Local aPecasRep  as array
    Local aParComboB as array
    Local jParams    as json
    Local cBanco     := AllTrim( TCGetDB() )
    Local aEtapas    as array
    Local nCount     as numeric

    nCount := 0

    jParams := oFilter:getParameters() //metodo para retorno do json dos parâmetros

    // As posições do array aParComboB seguem as posições dos parâmetros
    aParComboB := self:mntTypePar({'03', '04', '05', '06', '17', '18', '19', '23', '24', '25'}, jParams)

    lListEta  := aParComboB[4] == 1
    lListPec  := aParComboB[7] == 2
    lListOpEt := aParComboB[8] == 1
    lListLoc  := aParComboB[9] == 1

    cQuery := 'SELECT STJ.TJ_FILIAL, ' 
    cQuery += 'STJ.TJ_ORDEM, ' 
    cQuery += 'STJ.TJ_PLANO, ' 
    cQuery += 'STJ.TJ_CODBEM, ' 
    cQuery += 'STJ.TJ_DTMPFIM, '
    cQuery += 'STJ.TJ_CCUSTO, '
    cQuery += 'STJ.TJ_CENTRAB, '
    cQuery += 'STJ.TJ_SERVICO, '
    cQuery += 'STJ.TJ_SEQRELA, '
    cQuery += 'STJ.TJ_PRIORID, ' 
    cQuery += 'STJ.TJ_DTULTMA, ' 
    cQuery += 'STJ.TJ_CODAREA, ' 
    cQuery += 'STJ.TJ_TIPO, '
    cQuery += 'STJ.TJ_TIPOOS, '
    cQuery += 'STJ.TJ_SEQUENC, '
    cQuery += 'STJ.TJ_DTPPFIM, '
    cQuery += 'STJ.TJ_HOPPFIM, '
    cQuery += 'STJ.TJ_DTMPINI, '
    cQuery += 'STJ.TJ_HOMPINI, '
    cQuery += 'STJ.TJ_HOMPFIM '
    If cBanco == 'ORACLE'
        
        If aParComboB[6] == 1
            cQuery += ", ' ' AS TJ_OBSERVA "
        Else
            cQuery += ", UTL_RAW.CAST_TO_VARCHAR2(DBMS_LOB.SUBSTR(STJ.TJ_OBSERVA, 4000, 1)) AS TJ_OBSERVA "
        EndIf

        If aParComboB[1] == 2
            cQuery += ", ' ' AS T9_DESCRIC "  
        Else
            cQuery += ", UTL_RAW.CAST_TO_VARCHAR2(DBMS_LOB.SUBSTR(ST9.T9_DESCRIC, 4000, 1)) AS T9_DESCRIC "
        EndIf
        
        If aParComboB[3] == 2
            cQuery += ", ' ' AS TF_DESCRIC "  
        Else
            cQuery += ", UTL_RAW.CAST_TO_VARCHAR2(DBMS_LOB.SUBSTR(STF.TF_DESCRIC, 4000, 1)) AS TF_DESCRIC "
        EndIf

        
    
    ElseIf cBanco == 'POSTGRES'
       
        If aParComboB[6]
            cQuery += ", ' ' AS TJ_OBSERVA "
        Else
            cQuery += ", coalesce(CAST(ENCODE(STJ.TJ_OBSERVA, 'ESCAPE') AS VARCHAR(8000)), '') AS TJ_OBSERVA "
        EndIf

        If aParComboB[1] == 2
            cQuery += ", ' ' AS T9_DESCRIC "
        Else
            cQuery += ", coalesce(CAST(ENCODE(ST9.T9_DESCRIC, 'ESCAPE') AS VARCHAR(8000)), '') AS T9_DESCRIC "
        EndIf
       
        If aParComboB[3] == 2
            cQuery += ", ' ' AS TF_DESCRIC "  
        Else
            cQuery += ", coalesce(CAST(ENCODE(STF.TF_DESCRIC, 'ESCAPE') AS VARCHAR(8000)), '') AS TF_DESCRIC "
        EndIf
    
    Else

        If aParComboB[6]
            cQuery += ", ' ' AS TJ_OBSERVA "
        Else
            cQuery += ", ISNULL(CAST(CAST(STJ.TJ_OBSERVA AS VARBINARY(8000)) AS VARCHAR(8000)),'') AS TJ_OBSERVA "
        EndIf

        If aParComboB[1] == 2
            cQuery += ", ' ' AS T9_DESCRIC "
        Else
            cQuery += ", ISNULL(CAST(CAST(ST9.T9_DESCRIC AS VARBINARY(8000)) AS VARCHAR(8000)),'') AS T9_DESCRIC "
        EndIf
     
        If aParComboB[3] == 2
            cQuery += ", ' ' AS TF_DESCRIC "  
        Else
            cQuery += ", ISNULL(CAST(CAST(STF.TF_DESCRIC AS VARBINARY(8000)) AS VARCHAR(8000)),'') AS TF_DESCRIC "
        EndIf
  
    EndIf
   
    cQuery += ', STJ.TJ_POSCONT, '
    cQuery += 'STJ.TJ_POSCON2, '
    cQuery += 'STJ.TJ_SOLICI, '
    cQuery += 'ST9.T9_NOME, '
    cQuery += 'ST9.T9_PLACA, '
    cQuery += 'ST9.T9_PRIORID, '
    cQuery += 'ST9.T9_LOCAL, '
    cQuery += 'ST9.T9_TEMCONT, '
    cQuery += 'CTT.CTT_DESC01, '
    cQuery += 'SHB.HB_NOME, '
    cQuery += 'ST4.T4_NOME, '
    cQuery += 'ST4.T4_CODAREA, '
    cQuery += 'ST4.T4_TIPOMAN, '
    cQuery += 'STF.TF_CONMANU, '
    cQuery += 'STF.TF_DOCTO, '
    cQuery += 'STF.TF_TEPAANT, '
    cQuery += 'STF.TF_UNPAANT, '
    cQuery += 'STF.TF_TEPADEP, '
    cQuery += 'STF.TF_UNPADEP, '
    cQuery += 'STF.TF_TIPACOM, '
    cQuery += 'STD.TD_NOME, '
    cQuery += 'STE.TE_NOME, '
    cQuery += 'TQB.TQB_CDSOLI,'
    cQuery += 'TQB.TQB_DTABER,'
    cQuery += 'TQB.TQB_HOABER,'
    cQuery += 'TQB.TQB_PRIORI,'
    cQuery += 'STI.TI_DESCRIC, '
    cQuery += "CASE WHEN STE.TE_CARACTE = 'P' THEN STF.TF_NOMEMAN "
    cQuery += "ELSE 'Corretiva' "
    cQuery += "END AS TF_NOMEMAN, "     
    cQuery += "CASE WHEN STJ.TJ_TIPOOS = 'B' THEN ' ' "
    cQuery += 'ELSE TAF.TAF_NOMNIV '
    cQuery += 'END AS TAF_NOMNIV '
    cQuery += 'FROM  ' + RetSqlName('STJ') + ' STJ '
    cQuery += 'LEFT JOIN ' + RetSqlName('ST9') + ' ST9 ON '
    cQuery +=   "ST9.T9_FILIAL = STJ.TJ_FILIAL AND "
    cQuery +=   "ST9.T9_CODBEM = STJ.TJ_CODBEM AND "
    cQuery +=   "ST9.D_E_L_E_T_ = ' ' "
    cQuery += 'LEFT JOIN ' + RetSqlName('CTT') + ' CTT ON '
    cQuery +=   "CTT.CTT_FILIAL = STJ.TJ_FILIAL AND "
    cQuery +=   "CTT.CTT_CUSTO = STJ.TJ_CCUSTO AND "
    cQuery +=   "CTT.D_E_L_E_T_ = ' ' "
    cQuery += 'LEFT JOIN ' + RetSqlName('SHB') + ' SHB ON '
    cQuery +=   "SHB.HB_FILIAL = STJ.TJ_FILIAL AND "
    cQuery +=   "SHB.HB_COD = STJ.TJ_CENTRAB AND "
    cQuery +=   "SHB.D_E_L_E_T_ = ' ' "
    cQuery += 'INNER JOIN ' + RetSqlName('ST4') + ' ST4 ON '
    cQuery +=   "ST4.T4_FILIAL = STJ.TJ_FILIAL AND "
    cQuery +=   "ST4.T4_SERVICO = STJ.TJ_SERVICO AND "
    cQuery +=   "ST4.D_E_L_E_T_ = ' ' "
    cQuery += 'LEFT JOIN ' + RetSqlName('STF') + ' STF ON '
    cQuery +=   "STF.TF_FILIAL = STJ.TJ_FILIAL AND "
    cQuery +=   "STF.TF_CODBEM = STJ.TJ_CODBEM AND "
    cQuery +=   "STF.TF_SERVICO = STJ.TJ_SERVICO AND "
    cQuery +=   "STF.TF_SEQRELA = STJ.TJ_SEQRELA AND "
    cQuery +=   "ST4.D_E_L_E_T_ = ' ' "
    cQuery += 'INNER JOIN ' + RetSqlName('STD') + ' STD ON '
    cQuery +=   "STD.TD_FILIAL = STJ.TJ_FILIAL AND "
    cQuery +=   "STD.TD_CODAREA = ST4.T4_CODAREA AND "
    cQuery +=   "STD.D_E_L_E_T_ = ' ' "
    cQuery += 'INNER JOIN ' + RetSqlName('STE') + ' STE ON '
    cQuery +=   "STE.TE_FILIAL = STJ.TJ_FILIAL AND "
    cQuery +=   "STE.TE_TIPOMAN = STJ.TJ_TIPO AND "
    cQuery +=   "STE.D_E_L_E_T_ = ' ' "
    cQuery += 'LEFT JOIN ' + RetSqlName('TQB') + ' TQB ON '
    cQuery +=   "TQB.TQB_FILIAL = STJ.TJ_FILIAL AND "
    cQuery +=   "TQB.TQB_SOLICI = STJ.TJ_SOLICI AND "
    cQuery +=   "TQB.D_E_L_E_T_ = ' ' "
    cQuery += 'LEFT JOIN ' + RetSqlName('STI') + ' STI ON '
    cQuery +=   "STI.TI_FILIAL = STJ.TJ_FILIAL AND "
    cQuery +=   "STI.TI_PLANO = STJ.TJ_PLANO AND "
    cQuery +=   "STI.D_E_L_E_T_ = ' ' "
    cQuery += 'LEFT JOIN ' + RetSqlName('TAF') + ' TAF ON '
    cQuery +=   'TAF.TAF_FILIAL = STJ.TJ_FILIAL AND '
    cQuery +=   'TAF.TAF_CODNIV = STJ.TJ_CODBEM AND '
    cQuery +=   "TAF.D_E_L_E_T_ = ' '"
    cQuery += 'WHERE '
    cQuery += "STJ.TJ_TERMINO = 'N' AND "
    cQuery += "STJ.D_E_L_E_T_ = ' ' "
     
    //Os filtros serão setados na interface do novo TReports
    If oFilter:hasFilter()

        cQuery += " AND " + oFilter:getSQLExpression()
    
    EndIf

    If !Empty(jParams['MV_PAR01', 1]) .Or. !Empty(jParams['MV_PAR02', 1])
        cQuery += " AND STJ.TJ_PLANO BETWEEN '" + ArrTokStr(jParams['MV_PAR01']) + "' AND '" + ArrTokStr(jParams['MV_PAR02'])+"'"
    EndIf
    If !Empty(jParams['MV_PAR07', 1]) .Or. !Empty(jParams['MV_PAR08', 1])
        cQuery += " AND STJ.TJ_CCUSTO BETWEEN '" + ArrTokStr(jParams['MV_PAR07']) + "' AND '" + ArrTokStr(jParams['MV_PAR08'])+"'"
    EndIf
    If !Empty(jParams['MV_PAR09', 1]) .Or. !Empty(jParams['MV_PAR10', 1])
        cQuery += " AND STJ.TJ_CENTRAB BETWEEN '" + ArrTokStr(jParams['MV_PAR09']) + "' AND '" + ArrTokStr(jParams['MV_PAR10'])+"'"
    EndIf
    If !Empty(jParams['MV_PAR11', 1]) .Or. !Empty(jParams['MV_PAR12', 1])
        cQuery += " AND STJ.TJ_CODAREA BETWEEN '" + ArrTokStr(jParams['MV_PAR11']) + "' AND '" + ArrTokStr(jParams['MV_PAR12'])+"'"
    EndIf
    If !Empty(jParams['MV_PAR13', 1]) .Or. !Empty(jParams['MV_PAR14', 1])
        cQuery += " AND STJ.TJ_ORDEM BETWEEN '" + ArrTokStr(jParams['MV_PAR13']) +  "' AND '" + ArrTokStr(jParams['MV_PAR14'])+"'"
    EndIf
    If !Empty(jParams['MV_PAR15', 1]) .Or. !Empty(jParams['MV_PAR16', 1])
        cQuery += " AND STJ.TJ_DTMPINI BETWEEN '" + substr(ArrTokStr(jParams['MV_PAR15']), 1, 4) + substr(ArrTokStr(jParams['MV_PAR15']), 6, 2) + substr(ArrTokStr(jParams['MV_PAR15']), 9, 2);
        + "' AND '" + substr(ArrTokStr(jParams['MV_PAR16']), 1, 4) + substr(ArrTokStr(jParams['MV_PAR16']), 6, 2) + substr(ArrTokStr(jParams['MV_PAR16']), 9, 2)+"'"
    EndIf
    
    If aParComboB[10] == 1
        cQuery += " AND TJ_SITUACA = 'L' "
    ElseIf aParComboB[10] == 2
        cQuery += " AND TJ_SITUACA = 'P' "
    Else
        cQuery += " AND TJ_SITUACA <> 'C' "
    EndIf
    

    If aParComboB[5] == 1
        cQuery += " ORDER BY STJ.TJ_FILIAL, STJ.TJ_ORDEM "
    Else
        If aParComboB[5] == 2
            cQuery += " ORDER BY STJ.TJ_FILIAL, STJ.TJ_SERVICO, STJ.TJ_CODBEM "
        Else
            If aParComboB[5] == 3
                cQuery += " ORDER BY STJ.TJ_FILIAL, STJ.TJ_CCUSTO "
            Else
                If aParComboB[5] == 4
                    cQuery += " ORDER BY STJ.TJ_FILIAL, STJ.TJ_DTMPINI "
                ElseIf aParComboB[5] == 5
                    cQuery += " ORDER BY STJ.TJ_FILIAL, STJ.TJ_SERVICO, STJ.TJ_BEMPAI "
                EndIf
            EndIf
        EndIf
    EndIf

    cQuery := ChangeQuery( cQuery )

    //Executa a query principal responsável pelas tabelas 1 por 1
    cAlias := MPSysOpenQuery(cQuery)
 
    // Paginação
    If nPage == 1

        (cAlias)->(dbGoTop())

    Else
        
        //Encontra a quantidade de itens que irá pular de acordo com a página atual
        nSkip := ((nPage - 1) * self:getPageSize())     
    
        (cAlias)->(dbSkip(nSkip))
    
    EndIf  

    While (cAlias)->(!Eof())

        aEtapas := {}
        aDados[_ST9_CODBEM_PAI, 2] := NGBEMPAI((cAlias)->TJ_CODBEM)

        If aDados[_ST9_CODBEM_PAI, 2] != ' '
                
                aDados[_ST9_NOME_PAI, 2] := NGSEEK('ST9',aDados[_ST9_CODBEM_PAI, 2],1,'T9_NOME')
        EndIf

        If lListLoc
           
            If (cAlias)->TJ_TIPOOS == 'B'
                aDados[_TAF_LOCBEM, 2] := NGLocComp((cAlias)->TJ_CODBEM,'1') //Bem
            Else
                aDados[_TAF_LOCBEM, 2]  := NGLocComp((cAlias)->TJ_CODBEM,'2') //Localização
            EndIf
        
        Else

            aDados[_TAF_LOCBEM, 2]  := ' '
        
        EndIf

        aDados[_STJ_FILIAL, 2]  := (cAlias)->TJ_FILIAL
        aDados[_STJ_ORDEM, 2]   := (cAlias)->TJ_ORDEM
        aDados[_STJ_PLANO, 2]   := (cAlias)->TJ_PLANO
        aDados[_STJ_CODBEM, 2]  := (cAlias)->TJ_CODBEM
        aDados[_STJ_DTMPFIM, 2] := (cAlias)->TJ_DTMPFIM
        aDados[_STJ_CCUSTO, 2]  := (cAlias)->TJ_CCUSTO
        aDados[_STJ_CENTRAB, 2] := (cAlias)->TJ_CENTRAB
        aDados[_STJ_SERVICO, 2] := (cAlias)->TJ_SERVICO
        aDados[_STJ_SEQRELA, 2] := (cAlias)->TJ_SEQRELA
        aDados[_STJ_PRIORID, 2] := (cAlias)->TJ_PRIORID
        aDados[_STJ_DTULTMA, 2] := (cAlias)->TJ_DTULTMA
        aDados[_STJ_CODAREA, 2] := (cAlias)->TJ_CODAREA
        aDados[_STJ_TIPO, 2]    := (cAlias)->TJ_TIPO
        aDados[_STJ_SEQUENC, 2] := (cAlias)->TJ_SEQUENC
        aDados[_STJ_DTPPFIM, 2] := (cAlias)->TJ_DTPPFIM
        aDados[_STJ_HOPPFIM, 2] := (cAlias)->TJ_HOPPFIM
        aDados[_STJ_DTMPINI, 2] := (cAlias)->TJ_DTMPINI
        aDados[_STJ_HOMPINI, 2] := (cAlias)->TJ_HOMPINI
        aDados[_STJ_HOMPFIM, 2] := (cAlias)->TJ_HOMPFIM
        aDados[_STJ_OBSERVA, 2] := (cAlias)->TJ_OBSERVA
        aDados[_STJ_POSCONT, 2] := (cAlias)->TJ_POSCONT
        aDados[_STJ_POSCON2, 2] := (cAlias)->TJ_POSCON2
        aDados[_STJ_SOLICI, 2]  := (cAlias)->TJ_SOLICI
        aDados[_STJ_TIPOOS, 2]  := (cAlias)->TJ_TIPOOS
        aDados[_ST9_NOME, 2]    := (cAlias)->T9_NOME
        aDados[_ST9_PLACA, 2]   := (cAlias)->T9_PLACA
        aDados[_ST9_PRIORID, 2] := (cAlias)->T9_PRIORID
        aDados[_ST9_LOCAL, 2]   := (cAlias)->T9_LOCAL
        aDados[_ST9_DESCRIC, 2] := (cAlias)->T9_DESCRIC
        aDados[_ST9_TEMCONT, 2] := (cAlias)->T9_TEMCONT
        aDados[_CTT_DESC01, 2]  := (cAlias)->CTT_DESC01
        aDados[_SHB_NOME, 2]    := (cAlias)->HB_NOME
        aDados[_ST4_NOME, 2]    := (cAlias)->T4_NOME
        aDados[_ST4_CODAREA, 2] := (cAlias)->T4_CODAREA
        aDados[_ST4_TIPOMAN, 2] := (cAlias)->T4_TIPOMAN
        aDados[_STF_NOMEMAN, 2] := (cAlias)->TF_NOMEMAN
        aDados[_STF_CONMANU, 2] := (cAlias)->TF_CONMANU
        aDados[_STF_DOCTO, 2]   := (cAlias)->TF_DOCTO
        aDados[_STF_TEPAANT, 2] := (cAlias)->TF_TEPAANT
        aDados[_STF_UNPAANT, 2] := (cAlias)->TF_UNPAANT
        aDados[_STF_TEPADEP, 2] := (cAlias)->TF_TEPADEP
        aDados[_STF_UNPADEP, 2] := (cAlias)->TF_UNPADEP
        aDados[_STF_DESCRIC, 2] := (cAlias)->TF_DESCRIC
        aDados[_STD_NOME, 2]    := (cAlias)->TD_NOME
        aDados[_STE_NOME, 2]    := (cAlias)->TE_NOME
        aDados[_TQB_CDSOLI, 2]  := (cAlias)->TQB_CDSOLI
        aDados[_TQB_DTABER, 2]  := (cAlias)->TQB_DTABER
        aDados[_TQB_HOABER, 2]  := (cAlias)->TQB_HOABER
        aDados[_STI_DESCRIC, 2] := (cAlias)->TI_DESCRIC
        aDados[_STF_TIPACOM, 2] := (cAlias)->TF_TIPACOM
        aDados[_TQB_PRIORI, 2]  := (cAlias)->TQB_PRIORI
        aDados[_TAF_NOMNIV, 2]  := (cAlias)->TAF_NOMNIV

        aDados := self:mntLGPD( aDados, aOfusc, 1, 57 )

        lOrdem := .F.

        // Busca os Insumos
        cQueryAux := 'SELECT STL.TL_CODIGO, '
        cQueryAux += 'STL.TL_TAREFA, '
        cQueryAux += 'STL.TL_TIPOREG, '
        cQueryAux += 'STL.TL_USACALE, '
        cQueryAux += 'STL.TL_DESTINO, '
        cQueryAux += 'STL.TL_DTINICI, '
        cQueryAux += 'STL.TL_HOINICI, '
        cQueryAux += 'STL.TL_QUANREC, '
        cQueryAux += 'STL.TL_QUANTID, '
        cQueryAux += 'STL.TL_UNIDADE, '
        cQueryAux += 'STL.TL_TIPOHOR, '
        If cBanco == 'ORACLE'
            cQueryAux += "UTL_RAW.CAST_TO_VARCHAR2(DBMS_LOB.SUBSTR(STL.TL_OBSERVA, 4000, 1)) AS TL_OBSERVA "
        ElseIf cBanco == 'POSTGRES'
            cQueryAux += "coalesce(CAST(ENCODE(STL.TL_OBSERVA, 'ESCAPE') AS VARCHAR(8000)), '') AS TL_OBSERVA "
        Else
            cQueryAux += "ISNULL(CAST(CAST(STL.TL_OBSERVA AS VARBINARY(8000)) AS VARCHAR(8000)),'') AS TL_OBSERVA "
        EndIf
        cQueryAux += "FROM " + RetSqlName( 'STL' ) + " STL "
        cQueryAux += "WHERE STL.TL_FILIAL = " + ValToSql((cAlias)->TJ_FILIAL) + " "
        cQueryAux += "AND STL.TL_ORDEM = " + ValToSql((cAlias)->TJ_ORDEM) + " "
        cQueryAux += "AND STL.TL_PLANO = " + ValToSql((cAlias)->TJ_PLANO) + " "
        cQueryAux += "AND STL.D_E_L_E_T_ = ' ' "

        cQueryAux := ChangeQuery( cQueryAux )

        cAliasAux := MPSysOpenQuery(cQueryAux)

        While (cAliasAux)->(!Eof())

            aDados[_STL_TAREFA, 2]   := (cAliasAux)->TL_TAREFA
            aDados[_STL_TIPOREG, 2]  := (cAliasAux)->TL_TIPOREG
            aDados[_STL_CODIGO, 2]   := (cAliasAux)->TL_CODIGO
            aDados[_STL_DTINICI, 2]  := (cAliasAux)->TL_DTINICI
            aDados[_STL_HOINICI, 2]  := (cAliasAux)->TL_HOINICI
            aDados[_STL_QUANREC, 2]  := (cAliasAux)->TL_QUANREC
            aDados[_STL_QUANTID, 2]  := (cAliasAux)->TL_QUANTID
            aDados[_STL_UNIDADE, 2]  := (cAliasAux)->TL_UNIDADE
            aDados[_STL_USACALE, 2]  := (cAliasAux)->TL_USACALE
            aDados[_STL_DESTINO, 2]  := (cAliasAux)->TL_DESTINO
            aDados[_STL_TIPOHOR, 2]  := (cAliasAux)->TL_TIPOHOR
            aDados[_STB_CARACTE, 2]  := ' '
            aDados[_STB_CONDOP, 2]   := ' '
            aDados[_STB_DETALHE, 2]  := ' '
            aDados[_STB_INFO02, 2]   := ' '
            aDados[_STB_UNIDADE, 2]  := ' '
            aDados[_TPR_NOME, 2]     := ' '
            aDados[_STQ_TAREFA, 2]   := ' '
            aDados[_STQ_ETAPA, 2]    := ' '
            aDados[_ST5_SEQUENC, 2]  := 0
            aDados[_STQ_SEQETA, 2]   := ' '
            aDados[_ST5_DESCRIC, 2]  := ' '
            aDados[_TTC_CDSINT, 2]   := ' '
            aDados[_TTB_BLOQPT, 2]   := ' '
            aDados[_TTB_DESSIN, 2]   := ' '
            aDados[_TPL_CODMOT, 2]   := ' '
            aDados[_TPL_DTINIC, 2]   := ' '
            aDados[_TPL_HOINIC, 2]   := ' '
            aDados[_TPL_DTFIM, 2]    := ' '
            aDados[_TPL_HOFIM, 2]    := ' '
            aDados[_TPJ_DESMOT, 2]   := ' '
            aDados[_TPY_CODPRO, 2]   := ' '
            aDados[_STL_DTIPEC, 2]   := ' '
            aDados[_STL_HOIPEC, 2]   := ' '
            aDados[_STL_POSCONT, 2]  := 0
            aDados[_STL_POSCON2, 2]  := 0
            aDados[_STL_CONTPROX, 2] := 0
            aDados[_STL_CON2PROX, 2] := 0
            aDados[_STL_DTPROX, 2]   := ' '
            aDados[_STL_HRPROX, 2]   := ' '
            aDados[_TPC_ETAPA, 2]    := ' '
            aDados[_TPC_OPCAO, 2]    := ' '
            aDados[_TPC_TIPRES, 2]   := ' '
            aDados[_TPC_FORMUL, 2]   := ' '
            aDados[_DEVSUB, 2] := 'Insumos'

            // Realiza o tratamento de LGPD
            aDados := self:mntLGPD( aDados, aOfusc, 56, 66 )
 
            self:mntAppend( aDados )
            lOrdem := .T.
            
            (cAliasAux)->( dbSkip() )

        End

        (cAliasAux)->( dbCloseArea() )

        If aParComboB[2] == 1

            //Busca os registros de características
            cQueryAux := 'SELECT STB.TB_CARACTE, '
            cQueryAux +='STB.TB_CONDOP, '
            cQueryAux +='STB.TB_DETALHE, '
            cQueryAux +='STB.TB_INFO02, '
            cQueryAux +='STB.TB_UNIDADE, '
            cQueryAux +='TPR.TPR_NOME '
            cQueryAux += "FROM " + RetSqlName( 'STB' ) + " STB "
            cQueryAux += "INNER JOIN " + RetSqlName( 'TPR' ) + " TPR "
            cQueryAux += "ON TPR.TPR_FILIAL = STB.TB_FILIAL "
            cQueryAux += "AND TPR.TPR_CODCAR = STB.TB_CARACTE "
            cQueryAux += "WHERE STB.TB_FILIAL = " + ValToSql((cAlias)->TJ_FILIAL)+" "
            cQueryAux += "AND STB.TB_CODBEM = " + ValToSql((cAlias)->TJ_CODBEM)+" "
            cQueryAux += "AND STB.D_E_L_E_T_ = ' ' "
            cQueryAux += "AND TPR.D_E_L_E_T_ = ' ' "

            cQueryAux := ChangeQuery( cQueryAux )

            cAliasAux := MPSysOpenQuery(cQueryAux)

            While (cAliasAux)->(!Eof()) 

                aDados[_STL_TAREFA, 2]   := ' '
                aDados[_STL_TIPOREG, 2]  := ' '
                aDados[_STL_CODIGO, 2]   := ' '
                aDados[_STL_DTINICI, 2]  := ' '
                aDados[_STL_HOINICI, 2]  := ' '
                aDados[_STL_QUANREC, 2]  := 0
                aDados[_STL_QUANTID, 2]  := 0
                aDados[_STL_UNIDADE, 2]  := ' '
                aDados[_STL_USACALE, 2]  := ' '
                aDados[_STL_DESTINO, 2]  := ' '
                aDados[_STL_TIPOHOR, 2]  := ' '
                aDados[_STB_CARACTE, 2]  := (cAliasAux)->TB_CARACTE
                aDados[_STB_CONDOP, 2]   := (cAliasAux)->TB_CONDOP
                aDados[_STB_DETALHE, 2]  := (cAliasAux)->TB_DETALHE
                aDados[_STB_INFO02, 2]   := (cAliasAux)->TB_INFO02
                aDados[_STB_UNIDADE, 2]  := (cAliasAux)->TB_UNIDADE
                aDados[_TPR_NOME, 2]     := (cAliasAux)->TPR_NOME
                aDados[_STQ_TAREFA, 2]   := ' '
                aDados[_STQ_ETAPA, 2]    := ' '
                aDados[_ST5_SEQUENC, 2]  := 0
                aDados[_STQ_SEQETA, 2]   := ' '
                aDados[_ST5_DESCRIC, 2]  := ' '
                aDados[_TTC_CDSINT, 2]   := ' '
                aDados[_TTB_BLOQPT, 2]   := ' '
                aDados[_TTB_DESSIN, 2]   := ' '
                aDados[_TPL_CODMOT, 2]   := ' '
                aDados[_TPL_DTINIC, 2]   := ' '
                aDados[_TPL_HOINIC, 2]   := ' '
                aDados[_TPL_DTFIM, 2]    :=  ' '
                aDados[_TPL_HOFIM, 2]    := ' '
                aDados[_TPJ_DESMOT, 2]   := ' '
                aDados[_TPY_CODPRO, 2]   := ' '
                aDados[_STL_DTIPEC, 2]   := ' '
                aDados[_STL_HOIPEC, 2]   := ' '
                aDados[_STL_POSCONT, 2]  := 0
                aDados[_STL_POSCON2, 2]  := 0
                aDados[_STL_CONTPROX, 2] := 0
                aDados[_STL_CON2PROX, 2] := 0
                aDados[_STL_DTPROX, 2]   := ' '
                aDados[_STL_HRPROX, 2]   := ' '
                aDados[_TPC_ETAPA, 2]    := ' '
                aDados[_TPC_OPCAO, 2]    := ' '
                aDados[_TPC_TIPRES, 2]   := ' '
                aDados[_TPC_FORMUL, 2]   := ' '
                aDados[_DEVSUB, 2]       := 'Detalhes'

                // Realiza o tratamento de LGPD
                aDados := self:mntLGPD( aDados, aOfusc, 67, 72 )

                self:mntAppend( aDados )

                lOrdem := .T.

                (cAliasAux)->( dbSkip() )

            End

            (cAliasAux)->( dbCloseArea() )

        EndIf

        //Busca os registros relacionados a tarefas
        cQueryAux := "SELECT STQ.TQ_TAREFA, STQ.TQ_ETAPA, STQ.TQ_SEQETA, "
        cQueryAux += "ISNULL(ST5.T5_SEQUENC , 0 ) AS T5_SEQUENC, "
        cQueryAux += "ISNULL(ST5.T5_DESCRIC ,' ') AS T5_DESCRIC "
        cQueryAux += "FROM " + RetSqlName( 'STQ' ) + " STQ "
        cQueryAux += "INNER JOIN " + RetSqlName( 'STJ' ) + " STJ ON "
        cQueryAux += "STJ.TJ_FILIAL = STQ.TQ_FILIAL AND "
        cQueryAux += "STJ.TJ_ORDEM = STQ.TQ_ORDEM "
        cQueryAux += "LEFT JOIN " + RetSqlName( 'ST5' ) + " ST5 ON "
        cQueryAux += "ST5.T5_FILIAL = STQ.TQ_FILIAL AND "
        cQueryAux += "ST5.T5_CODBEM = STJ.TJ_CODBEM AND "
        cQueryAux += "ST5.T5_SERVICO = STJ.TJ_SERVICO AND "
        cQueryAux += "ST5.T5_SEQRELA = STJ.TJ_SEQRELA AND "
        cQueryAux += "ST5.T5_TAREFA = STQ.TQ_TAREFA "
        cQueryAux += "AND ST5.D_E_L_E_T_ = ' ' "
        cQueryAux += "WHERE STQ.TQ_FILIAL = " + ValToSql((cAlias)->TJ_FILIAL) + " "
        cQueryAux += " AND STQ.TQ_ORDEM = " + ValToSql((cAlias)->TJ_ORDEM) + " "
        cQueryAux += " AND STQ.TQ_PLANO = " + ValToSql((cAlias)->TJ_PLANO) + " "
        cQueryAux += "AND STQ.D_E_L_E_T_ = ' ' "
        cQueryAux += "AND STJ.D_E_L_E_T_ = ' ' "
        

        cQueryAux := ChangeQuery( cQueryAux )

        cAliasAux := MPSysOpenQuery( cQueryAux )

        While (cAliasAux)->(!Eof())

            aAdd(aEtapas, AllTrim( (cAliasAux)->TQ_ETAPA ))

            aDados[_STL_TAREFA, 2]   := ' '
            aDados[_STL_TIPOREG, 2]  := ' '
            aDados[_STL_CODIGO, 2]   := ' '
            aDados[_STL_DTINICI, 2]  := ' '
            aDados[_STL_HOINICI, 2]  := ' '
            aDados[_STL_QUANREC, 2]  := 0
            aDados[_STL_QUANTID, 2]  := 0
            aDados[_STL_UNIDADE, 2]  := ' '
            aDados[_STL_USACALE, 2]  := ' '
            aDados[_STL_DESTINO, 2]  := ' '
            aDados[_STL_TIPOHOR, 2]  := ' '
            aDados[_STB_CARACTE, 2]  := ' '
            aDados[_STB_CONDOP, 2]   := ' '
            aDados[_STB_DETALHE, 2]  := ' '
            aDados[_STB_INFO02, 2]   := ' '
            aDados[_STB_UNIDADE, 2]  := ' '
            aDados[_TPR_NOME, 2]     := ' '
            aDados[_STQ_TAREFA, 2]   := (cAliasAux)->TQ_TAREFA
            aDados[_STQ_ETAPA, 2]    := (cAliasAux)->TQ_ETAPA
            aDados[_ST5_SEQUENC, 2]  := (cAliasAux)->T5_SEQUENC
            aDados[_STQ_SEQETA, 2]   := (cAliasAux)->TQ_SEQETA
            aDados[_ST5_DESCRIC, 2]  := (cAliasAux)->T5_DESCRIC
            aDados[_TTC_CDSINT, 2]   := ' '
            aDados[_TTB_BLOQPT, 2]   := ' '
            aDados[_TTB_DESSIN, 2]   := ' '
            aDados[_TPL_CODMOT, 2]   := ' '
            aDados[_TPL_DTINIC, 2]   := ' '
            aDados[_TPL_HOINIC, 2]   := ' '
            aDados[_TPL_DTFIM, 2]    := ' '
            aDados[_TPL_HOFIM, 2]    := ' '
            aDados[_TPJ_DESMOT, 2]   := ' '
            aDados[_TPY_CODPRO, 2]   := ' '
            aDados[_STL_DTIPEC, 2]   := ' '
            aDados[_STL_HOIPEC, 2]   := ' '
            aDados[_STL_POSCONT, 2]  := 0
            aDados[_STL_POSCON2, 2]  := 0
            aDados[_STL_CONTPROX, 2] := 0
            aDados[_STL_CON2PROX, 2] := 0
            aDados[_STL_DTPROX, 2]   := ' '
            aDados[_STL_HRPROX, 2]   := ' '
            aDados[_TPC_ETAPA, 2]    := ' '
            aDados[_TPC_OPCAO, 2]    := ' '
            aDados[_TPC_TIPRES, 2]   := ' '
            aDados[_TPC_FORMUL, 2]   := ' '
            aDados[_DEVSUB, 2]       := 'Tarefas'

            // Realiza o tratamento de LGPD
            aDados := self:mntLGPD( aDados, aOfusc, 73, 77 )

            self:mntAppend( aDados )

            lOrdem := .T.

            (cAliasAux)->( dbSkip() )

        End

        (cAliasAux)->( dbCloseArea() )

        //Busca registros de Sintomas
        cQueryAux := 'SELECT TTC.TTC_CDSINT, '
        cQueryAux += 'TTB.TTB_BLOQPT, '
        cQueryAux += 'TTB.TTB_DESSIN  '
        cQueryAux += "FROM " + RetSqlName( 'TTC' ) + " TTC "
        cQueryAux += "INNER JOIN " + RetSqlName( 'TTB' ) + " TTB "
        cQueryAux += "ON TTB.TTB_FILIAL = TTC.TTC_FILIAL "
        cQueryAux += "AND TTB.TTB_CDSINT = TTC.TTC_CDSINT "
        cQueryAux += "WHERE TTC.TTC_FILIAL = " + ValToSql((cAlias)->TJ_FILIAL) + " "
        cQueryAux += " AND TTC.TTC_ORDEM = " + ValToSql((cAlias)->TJ_ORDEM) + " "
        cQueryAux += " AND TTC.TTC_PLANO = " + ValToSql((cAlias)->TJ_PLANO) + " "
        cQueryAux += "AND TTC.D_E_L_E_T_ = ' ' "
        cQueryAux += "AND TTB.D_E_L_E_T_ = ' ' "

        cQueryAux := ChangeQuery( cQueryAux )

        cAliasAux := MPSysOpenQuery( cQueryAux )

        While (cAliasAux)->(!Eof())

            aDados[_STL_TAREFA, 2]   := ' '
            aDados[_STL_TIPOREG, 2]  := ' '
            aDados[_STL_CODIGO, 2]   := ' '
            aDados[_STL_DTINICI, 2]  := ' '
            aDados[_STL_HOINICI, 2]  := ' '
            aDados[_STL_QUANREC, 2]  := 0
            aDados[_STL_QUANTID, 2]  := 0
            aDados[_STL_UNIDADE, 2]  := ' '
            aDados[_STL_USACALE, 2]  := ' '
            aDados[_STL_DESTINO, 2]  := ' '
            aDados[_STL_TIPOHOR, 2]  := ' '
            aDados[_STB_CARACTE, 2]  := ' '
            aDados[_STB_CONDOP, 2]   := ' '
            aDados[_STB_DETALHE, 2]  := ' '
            aDados[_STB_INFO02, 2]   := ' '
            aDados[_STB_UNIDADE, 2]  := ' '
            aDados[_TPR_NOME, 2]     := ' '
            aDados[_STQ_TAREFA, 2]   := ' '
            aDados[_STQ_ETAPA, 2]    := ' '
            aDados[_ST5_SEQUENC, 2]  := 0
            aDados[_STQ_SEQETA, 2]   := ' '
            aDados[_ST5_DESCRIC, 2]  := ' '
            aDados[_TTC_CDSINT, 2]   := (cAliasAux)->TTC_CDSINT
            aDados[_TTB_BLOQPT, 2]   := (cAliasAux)->TTB_BLOQPT
            aDados[_TTB_DESSIN, 2]   := (cAliasAux)->TTB_DESSIN
            aDados[_TPL_CODMOT, 2]   := ' '
            aDados[_TPL_DTINIC, 2]   := ' '
            aDados[_TPL_HOINIC, 2]   := ' '
            aDados[_TPL_DTFIM, 2]    := ' '
            aDados[_TPL_HOFIM, 2]    := ' '
            aDados[_TPJ_DESMOT, 2]   := ' '
            aDados[_TPY_CODPRO, 2]   := ' '
            aDados[_STL_DTIPEC, 2]   := ' '
            aDados[_STL_HOIPEC, 2]   := ' '
            aDados[_STL_POSCONT, 2]  := 0
            aDados[_STL_POSCON2, 2]  := 0
            aDados[_STL_CONTPROX, 2] := 0
            aDados[_STL_CON2PROX, 2] := 0
            aDados[_STL_DTPROX, 2]   := ' '
            aDados[_STL_HRPROX, 2]   := ' '
            aDados[_TPC_ETAPA, 2]    := ' '
            aDados[_TPC_OPCAO, 2]    := ' '
            aDados[_TPC_TIPRES, 2]   := ' '
            aDados[_TPC_FORMUL, 2]   := ' '
            aDados[_DEVSUB, 2]       := 'Sintomas'

            // Realiza o tratamento de LGPD
            aDados := self:mntLGPD( aDados, aOfusc, 78, 80 )

            self:mntAppend( aDados )

            lOrdem := .T.

            (cAliasAux)->( dbSkip() )

        End

        (cAliasAux)->( dbCloseArea() )

        //Busca os registros referentes a Atrasos da O.S.
        cQueryAux := 'SELECT TPL.TPL_CODMOT, '
        cQueryAux +='TPL.TPL_DTINIC, '
        cQueryAux +='TPL.TPL_HOINIC, '
        cQueryAux +='TPL.TPL_DTFIM, '
        cQueryAux +='TPL.TPL_HOFIM, '
        cQueryAux +='TPJ.TPJ_DESMOT '
        cQueryAux += "FROM " + RetSqlName( 'TPL' ) + " TPL "
        cQueryAux += 'INNER JOIN ' + RetSqlName('TPJ') + ' TPJ ON '
        cQueryAux +=   "TPJ.TPJ_FILIAL = TPL.TPL_FILIAL AND "
        cQueryAux +=   "TPJ.TPJ_CODMOT = TPL.TPL_CODMOT "
        cQueryAux += "WHERE TPL.TPL_FILIAL = " + ValToSql((cAlias)->TJ_FILIAL) + " "
        cQueryAux += " AND TPL.TPL_ORDEM = " +  ValToSql((cAlias)->TJ_ORDEM) + " "
        cQueryAux += "AND TPL.D_E_L_E_T_ = ' ' "
        cQueryAux += "AND TPJ.D_E_L_E_T_ = ' ' "

        cQueryAux := ChangeQuery( cQueryAux )

        cAliasAux := MPSysOpenQuery(cQueryAux)

        While (cAliasAux)->(!Eof())

            aDados[_STL_TAREFA, 2]   := ' '
            aDados[_STL_TIPOREG, 2]  := ' '
            aDados[_STL_CODIGO, 2]   := ' '
            aDados[_STL_DTINICI, 2]  := ' '
            aDados[_STL_HOINICI, 2]  := ' '
            aDados[_STL_QUANREC, 2]  := 0
            aDados[_STL_QUANTID, 2]  := 0
            aDados[_STL_UNIDADE, 2]  := ' '
            aDados[_STL_USACALE, 2]  := ' '
            aDados[_STL_DESTINO, 2]  := ' '
            aDados[_STL_TIPOHOR, 2]  := ' '
            aDados[_STB_CARACTE, 2]  := ' '
            aDados[_STB_CONDOP, 2]   := ' '
            aDados[_STB_DETALHE, 2]  := ' '
            aDados[_STB_INFO02, 2]   := ' '
            aDados[_STB_UNIDADE, 2]  := ' '
            aDados[_TPR_NOME, 2]     := ' '
            aDados[_STQ_TAREFA, 2]   := ' '
            aDados[_STQ_ETAPA, 2]    := ' '
            aDados[_ST5_SEQUENC, 2]  := 0
            aDados[_STQ_SEQETA, 2]   := ' '
            aDados[_ST5_DESCRIC, 2]  := ' '
            aDados[_TTC_CDSINT, 2]   := ' '
            aDados[_TTB_BLOQPT, 2]   := ' '
            aDados[_TTB_DESSIN, 2]   := ' '
            aDados[_TPL_CODMOT, 2]   := (cAliasAux)->TPL_CODMOT
            aDados[_TPL_DTINIC, 2]   := (cAliasAux)->TPL_DTINIC
            aDados[_TPL_HOINIC, 2]   := (cAliasAux)->TPL_HOINIC
            aDados[_TPL_DTFIM, 2]    := (cAliasAux)->TPL_DTFIM
            aDados[_TPL_HOFIM, 2]    := (cAliasAux)->TPL_HOFIM
            aDados[_TPJ_DESMOT, 2]   := (cAliasAux)->TPJ_DESMOT
            aDados[_TPY_CODPRO, 2]   := ' '
            aDados[_STL_DTIPEC, 2]   := ' '
            aDados[_STL_HOIPEC, 2]   := ' '
            aDados[_STL_POSCONT, 2]  := 0
            aDados[_STL_POSCON2, 2]  := 0
            aDados[_STL_CONTPROX, 2] := 0
            aDados[_STL_CON2PROX, 2] := 0
            aDados[_STL_DTPROX, 2]   := ' '
            aDados[_STL_HRPROX, 2]   := ' '
            aDados[_TPC_ETAPA, 2]    := ' '
            aDados[_TPC_OPCAO, 2]    := ' '
            aDados[_TPC_TIPRES, 2]   := ' '
            aDados[_TPC_FORMUL, 2]   := ' '
            aDados[_DEVSUB, 2]       := 'Atrasos'

            // Realiza o tratamento de LGPD
            aDados := self:mntLGPD( aDados, aOfusc, 81, 86 )

            self:mntAppend( aDados )

            lOrdem := .T.

            (cAliasAux)->( dbSkip() )

        End

        (cAliasAux)->( dbCloseArea() )

        aPecasRep := NGPEUTIL( (cAlias)->TJ_CODBEM )

        If lListPec .And. !Empty( aPecasRep )
            nI := 1
            While nI <= Len( aPecasRep )

                aDados[_STL_TAREFA, 2]   := ' '
                aDados[_STL_TIPOREG, 2]  := ' '
                aDados[_STL_CODIGO, 2]   := ' '
                aDados[_STL_DTINICI, 2]  := ' '
                aDados[_STL_HOINICI, 2]  := ' '
                aDados[_STL_QUANREC, 2]  := 0
                aDados[_STL_QUANTID, 2]  := 0
                aDados[_STL_UNIDADE, 2]  := ' '
                aDados[_STL_USACALE, 2]  := ' '
                aDados[_STL_DESTINO, 2]  := ' '
                aDados[_STL_TIPOHOR, 2]  := ' '
                aDados[_STB_CARACTE, 2]  := ' '
                aDados[_STB_CONDOP, 2]   := ' '
                aDados[_STB_DETALHE, 2]  := ' '
                aDados[_STB_INFO02, 2]   := ' '
                aDados[_STB_UNIDADE, 2]  := ' '
                aDados[_TPR_NOME, 2]     := ' '
                aDados[_STQ_TAREFA, 2]   := ' '
                aDados[_STQ_ETAPA, 2]    := ' '
                aDados[_ST5_SEQUENC, 2]  := 0
                aDados[_STQ_SEQETA, 2]   := ' '
                aDados[_ST5_DESCRIC, 2]  := ' '
                aDados[_TTC_CDSINT, 2]   := ' '
                aDados[_TTB_BLOQPT, 2]   := ' '
                aDados[_TTB_DESSIN, 2]   := ' '
                aDados[_TPL_CODMOT, 2]   := ' '
                aDados[_TPL_DTINIC, 2]   := ' '
                aDados[_TPL_HOINIC, 2]   := ' '
                aDados[_TPL_DTFIM, 2]    := ' '
                aDados[_TPL_HOFIM, 2]    := ' '
                aDados[_TPJ_DESMOT, 2]   := ' '
                aDados[_TPY_CODPRO, 2]   := aPecasRep[nI, 1]
                aDados[_STL_DTIPEC, 2]   := aPecasRep[nI, 2]
                aDados[_STL_HOIPEC, 2]   := aPecasRep[nI, 3]
                aDados[_STL_POSCONT, 2]  := aPecasRep[nI, 4]
                aDados[_STL_POSCON2, 2]  := aPecasRep[nI, 5]
                aDados[_STL_CONTPROX, 2] := aPecasRep[nI, 6]
                aDados[_STL_CON2PROX, 2] := aPecasRep[nI, 7]
                aDados[_STL_DTPROX, 2]   := aPecasRep[nI, 8]
                aDados[_STL_HRPROX, 2]   := aPecasRep[nI, 9]
                aDados[_TPC_ETAPA, 2]    := ' '
                aDados[_TPC_OPCAO, 2]    := ' '
                aDados[_TPC_TIPRES, 2]   := ' '
                aDados[_TPC_FORMUL, 2]   := ' '
                aDados[_DEVSUB, 2]       := 'Pecas'
  
                // Realiza o tratamento de LGPD
                aDados := self:mntLGPD(aDados, aOfusc, 87, 95)

                self:mntAppend(aDados)
                
                nI := nI + 1

                lOrdem := .T.

            End
        EndIf

        If lListEta .And. !Empty( aEtapas )
            nI := 1
            While nI <= Len( aEtapas )

                aDados[_STL_TAREFA, 2]   := ' '
                aDados[_STL_TIPOREG, 2]  := ' '
                aDados[_STL_CODIGO, 2]   := ' '
                aDados[_STL_DTINICI, 2]  := ' '
                aDados[_STL_HOINICI, 2]  := ' '
                aDados[_STL_QUANREC, 2]  := 0
                aDados[_STL_QUANTID, 2]  := 0
                aDados[_STL_UNIDADE, 2]  := ' '
                aDados[_STL_USACALE, 2]  := ' '
                aDados[_STL_DESTINO, 2]  := ' '
                aDados[_STL_TIPOHOR, 2]  := ' '
                aDados[_STB_CARACTE, 2]  := ' '
                aDados[_STB_CONDOP, 2]   := ' '
                aDados[_STB_DETALHE, 2]  := ' '
                aDados[_STB_INFO02, 2]   := ' '
                aDados[_STB_UNIDADE, 2]  := ' '
                aDados[_TPR_NOME, 2]     := ' '
                aDados[_STQ_TAREFA, 2]   := ' '
                aDados[_STQ_ETAPA, 2]    := ' '
                aDados[_ST5_SEQUENC, 2]  := 0
                aDados[_STQ_SEQETA, 2]   := ' '
                aDados[_ST5_DESCRIC, 2]  := ' '
                aDados[_TTC_CDSINT, 2]   := ' '
                aDados[_TTB_BLOQPT, 2]   := ' '
                aDados[_TTB_DESSIN, 2]   := ' '
                aDados[_TPL_CODMOT, 2]   := ' '
                aDados[_TPL_DTINIC, 2]   := ' '
                aDados[_TPL_HOINIC, 2]   := ' '
                aDados[_TPL_DTFIM, 2]    := ' '
                aDados[_TPL_HOFIM, 2]    := ' '
                aDados[_TPJ_DESMOT, 2]   := ' '
                aDados[_TPY_CODPRO, 2]   := ' '
                aDados[_STL_DTIPEC, 2]   := ' '
                aDados[_STL_HOIPEC, 2]   := ' '
                aDados[_STL_POSCONT, 2]  := 0
                aDados[_STL_POSCON2, 2]  := 0
                aDados[_STL_CONTPROX, 2] := 0
                aDados[_STL_CON2PROX, 2] := 0
                aDados[_STL_DTPROX, 2]   := ' '
                aDados[_STL_HRPROX, 2]   := ' '
                aDados[_DEVSUB, 2]       := 'Etapas'
                aDados[_TPC_ETAPA, 2]    := aEtapas[nI]

                If lListOpEt

                    //Busca opções das etapas
                    cQueryAux := 'SELECT TPC.TPC_OPCAO, '
                    cQueryAux += 'TPC.TPC_TIPRES, '
                    cQueryAux += 'TPC.TPC_FORMUL '
                    cQueryAux += "FROM " + RetSqlName( 'TPC' ) + " TPC "
                    cQueryAux += "WHERE TPC.TPC_FILIAL = " + ValToSql(FWxFilial( 'TPC' )) + " "
                    cQueryAux += " AND TPC.TPC_ETAPA = " +  ValToSql(aEtapas[nI]) + " "
                    cQueryAux += " AND TPC.D_E_L_E_T_ = ' ' "

                    cQueryAux := ChangeQuery( cQueryAux )

                    cAliasAux := MPSysOpenQuery(cQueryAux)
                    If (cAliasAux)->(!Eof())
                        While (cAliasAux)->(!Eof())

                            
                            aDados[_TPC_OPCAO, 2]    := (cAliasAux)->TPC_OPCAO
                            aDados[_TPC_TIPRES, 2]   := (cAliasAux)->TPC_TIPRES
                            aDados[_TPC_FORMUL, 2]   := (cAliasAux)->TPC_FORMUL

                            // Realiza o tratamento de LGPD
                            aDados := self:mntLGPD( aDados, aOfusc, 96, 99 )

                            self:mntAppend( aDados )

                            (cAliasAux)->(dbSkip())

                        Enddo
                    
                    Else

                        // Realiza o tratamento de LGPD
                        aDados := self:mntLGPD( aDados, aOfusc, 96, 99 )

                        self:mntAppend( aDados )

                    EndIf

                    (cAliasAux)->( dbCloseArea() )

                Else

                    aDados[_TPC_OPCAO, 2]    := ' '
                    aDados[_TPC_TIPRES, 2]   := ' '
                    aDados[_TPC_FORMUL, 2]   := ' '
                
                    // Realiza o tratamento de LGPD
                    aDados := self:mntLGPD( aDados, aOfusc, 96, 99 )

                    self:mntAppend( aDados )
                
                EndIf

                lOrdem := .T.
                nI := nI + 1

            End
        EndIf

        // Caso a ordem de serviço não tenha sido incluida até esse ponto ela é incluida também
        If !lOrdem

            aDados[_STL_TAREFA, 2]   := ' '
            aDados[_STL_TIPOREG, 2]  := ' '
            aDados[_STL_CODIGO, 2]   := ' '
            aDados[_STL_DTINICI, 2]  := ' '
            aDados[_STL_HOINICI, 2]  := ' '
            aDados[_STL_QUANREC, 2]  := 0
            aDados[_STL_QUANTID, 2]  := 0
            aDados[_STL_UNIDADE, 2]  := ' '
            aDados[_STL_USACALE, 2]  := ' '
            aDados[_STL_DESTINO, 2]  := ' '
            aDados[_STL_TIPOHOR, 2]  := ' '
            aDados[_STB_CARACTE, 2]  := ' '
            aDados[_STB_CONDOP, 2]   := ' '
            aDados[_STB_DETALHE, 2]  := ' '
            aDados[_STB_INFO02, 2]   := ' '
            aDados[_STB_UNIDADE, 2]  := ' '
            aDados[_TPR_NOME, 2]     := ' '
            aDados[_STQ_TAREFA, 2]   := ' '
            aDados[_STQ_ETAPA, 2]    := ' '
            aDados[_ST5_SEQUENC, 2]  := 0
            aDados[_STQ_SEQETA, 2]   := ' '
            aDados[_ST5_DESCRIC, 2]  := ' '
            aDados[_TTC_CDSINT, 2]   := ' '
            aDados[_TTB_BLOQPT, 2]   := ' '
            aDados[_TTB_DESSIN, 2]   := ' '
            aDados[_TPL_CODMOT, 2]   := ' '
            aDados[_TPL_DTINIC, 2]   := ' '
            aDados[_TPL_HOINIC, 2]   := ' '
            aDados[_TPL_DTFIM, 2]    := ' '
            aDados[_TPL_HOFIM, 2]    := ' '
            aDados[_TPJ_DESMOT, 2]   := ' '
            aDados[_TPY_CODPRO, 2]   := ' '
            aDados[_STL_DTIPEC, 2]   := ' '
            aDados[_STL_HOIPEC, 2]   := ' '
            aDados[_STL_POSCONT, 2]  := 0
            aDados[_STL_POSCON2, 2]  := 0
            aDados[_STL_CONTPROX, 2] := 0
            aDados[_STL_CON2PROX, 2] := 0
            aDados[_STL_DTPROX, 2]   := ' '
            aDados[_STL_HRPROX, 2]   := ' '
            aDados[_TPC_ETAPA, 2]    := ' '
            aDados[_TPC_OPCAO, 2]    := ' '
            aDados[_TPC_TIPRES, 2]   := ' '
            aDados[_TPC_FORMUL, 2]   := ' '
            aDados[_DEVSUB, 2]       := 'None'

            self:mntAppend(aDados)

        EndIf

        (cAlias)->(DBSkip())
        nCount := nCount + 1
        If nCount == self:getPageSize()
          exit
        Endif
    
    end

    //Se não for o último registro indica que terá próxima página
    self:setHasNext((cAlias)->(!Eof())) 

    (cAlias)->(DBCloseArea())

return self:oData

//-------------------------------------------------------------------
/*/{Protheus.doc} mntAppend
Método responsável pelo envio dos dados para o TReports
@type Método
 
@author João Ricardo Santini Zandoná
@since 04/07/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor

@return
/*/
//-------------------------------------------------------------------
method mntAppend(aDados as array) as object class OrdemServicoSmartViewBusinessObject

    self:appendData({"STJ_Filial": aDados[_STJ_FILIAL, 2],;
        "STJ_Ordem": aDados[_STJ_ORDEM, 2],;
        "STJ_Plano": aDados[_STJ_PLANO, 2],;
        "STJ_Bem": aDados[_STJ_CODBEM, 2],;
        "STJ_Fim": aDados[_STJ_DTMPFIM, 2],;
        "STJ_CCusto": aDados[_STJ_CCUSTO, 2],;
        "STJ_CTrabalho": aDados[_STJ_CENTRAB, 2],;
        "STJ_Servico": aDados[_STJ_SERVICO, 2],;
        "STJ_SeqRela": aDados[_STJ_SEQRELA, 2],;
        "STJ_Prioridade": aDados[_STJ_PRIORID, 2],;
        "STJ_UltMant": aDados[_STJ_DTULTMA, 2],;
        "STJ_Area": aDados[_STJ_CODAREA, 2],;
        "STJ_Tipo": aDados[_STJ_TIPO, 2],;
        "STJ_Sequenc":aDados[_STJ_SEQUENC, 2],;
        "STJ_DtFimPP":aDados[_STJ_DTPPFIM, 2],;
        "STJ_HOPPFIM":aDados[_STJ_HOPPFIM, 2],;
        "STJ_DTMPINI":aDados[_STJ_DTMPINI, 2],;
        "STJ_HOMPINI":aDados[_STJ_HOMPINI, 2],;
        "STJ_HOMPFIM":aDados[_STJ_HOMPFIM, 2],;
        "STJ_OBSERVA":aDados[_STJ_OBSERVA, 2],;
        "STJ_POSCONT":aDados[_STJ_POSCONT, 2],;
        "STJ_POSCON2":aDados[_STJ_POSCON2, 2],;
        "STJ_SOLICI":aDados[_STJ_SOLICI, 2],;
        "STJ_TIPOOS":aDados[_STJ_TIPOOS, 2],;
        "ST9_NomeBem": aDados[_ST9_NOME, 2],;
        "ST9_Placa": aDados[_ST9_PLACA, 2],;
        "ST9_Prioridade": aDados[_ST9_PRIORID, 2],;
        "ST9_Local": aDados[_ST9_LOCAL, 2],;
        "ST9_Descric": aDados[_ST9_DESCRIC, 2],;
        "ST9_TEMCONT": aDados[_ST9_TEMCONT, 2],;
        "ST9_CodBPAI": aDados[_ST9_CODBEM_PAI, 2],;
        "ST9_NomBPAI": aDados[_ST9_NOME_PAI, 2],;
        "CCT_CCustoNome": aDados[_CTT_DESC01, 2],;
        "SHB_CTrabNome": aDados[_SHB_NOME, 2],;
        "ST4_ServNome": aDados[_ST4_NOME, 2],;
        "ST4_CodArea": aDados[_ST4_CODAREA, 2],;
        "ST4_TipoManutencao": aDados[_ST4_TIPOMAN, 2],;
        "STF_ContManut": aDados[_STF_CONMANU, 2],;
        "STF_Documento": aDados[_STF_DOCTO, 2],;
        "STF_ParadaAntes": aDados[_STF_TEPAANT, 2],;
        "STF_UnidPAntes": aDados[_STF_UNPAANT, 2],;
        "STF_ParadaDep": aDados[_STF_TEPADEP, 2],;
        "STF_UndPDepois": aDados[_STF_UNPADEP, 2],;
        "STF_Descric": aDados[_STF_DESCRIC, 2],;
        "STF_NomeManutencao": aDados[_STF_NOMEMAN, 2],;
        "STD_NomAreaManut": aDados[_STD_NOME, 2],;
        "STE_NomeTipManut": aDados[_STE_NOME, 2],;
        "TAF_LocaliBem": aDados[_TAF_LOCBEM, 2],;
        "TAF_NOMNIV": aDados[_TAF_NOMNIV, 2],;
        "TQB_CDSOLI": aDados[_TQB_CDSOLI, 2],;
        "TQB_DTABER": aDados[_TQB_DTABER, 2],;
        "TQB_HOABER": aDados[_TQB_HOABER, 2],;
        "TQB_PRIORI": aDados[_TQB_PRIORI, 2],;
        "STI_DESCRIC": aDados[_STI_DESCRIC, 2],;
        "STF_TIPACOM":aDados[_STF_TIPACOM, 2],;
        "STL_Tarefa": aDados[_STL_TAREFA, 2],;
        "STL_TipoReg": aDados[_STL_TIPOREG, 2],;
        "STL_DetalheCodigo": aDados[_STL_CODIGO, 2],;
        "STL_DtIni": aDados[_STL_DTINICI, 2],;
        "STL_HoIni": aDados[_STL_HOINICI, 2],;
        "STL_QuantidadeRecurso": aDados[_STL_QUANREC, 2],;
        "STL_Quantidade": aDados[_STL_QUANTID, 2],;
        "STL_Unidade": aDados[_STL_UNIDADE, 2],;
        "STL_UsaCalendario": aDados[_STL_USACALE, 2],;
        "STL_Destino": aDados[_STL_DESTINO, 2],;
        "STL_TIPOHOR": aDados[_STL_TIPOHOR, 2],;
        "STB_CodCaracte": aDados[_STB_CARACTE, 2],;
        "STB_Operador": aDados[_STB_CONDOP, 2],;
        "STB_Detalhe": aDados[_STB_DETALHE, 2],;
        "STB_DetalheDois": aDados[_STB_INFO02, 2],;
        "STB_Unidade": aDados[_STB_UNIDADE, 2],;
        "TPR_NomCaracte": aDados[_TPR_NOME, 2],;
        "STQ_Tarefa": aDados[_STQ_TAREFA, 2],;
        "STQ_Etapa": aDados[_STQ_ETAPA, 2],;
        "ST5_Sequencia": aDados[_ST5_SEQUENC, 2],;
        "STQ_SeqEta": aDados[_STQ_SEQETA, 2],;
        "ST5_Descric": aDados[_ST5_DESCRIC, 2],;
        "TTC_CodSint": aDados[_TTC_CDSINT, 2],;
        "TTB_BloqPorta": aDados[_TTB_BLOQPT, 2],;
        "TTB_DescSint": aDados[_TTB_DESSIN, 2],;
        "TPL_CodMotiv": aDados[_TPL_CODMOT, 2],;
        "TPL_DtInic": aDados[_TPL_DTINIC, 2],;
        "TPL_HoInic": aDados[_TPL_HOINIC, 2],;
        "TPL_DtFim": aDados[_TPL_DTFIM, 2],;
        "TPL_HoFim": aDados[_TPL_HOFIM, 2],;
        "TPJ_DescMot": aDados[_TPJ_DESMOT, 2],;
        "TPY_CodProPecasRepo": aDados[_TPY_CODPRO, 2],;
        "STL_DtUltUsoPecasRepo": aDados[_STL_DTIPEC, 2],;
        "STL_HoUltUsoPecasRepo": aDados[_STL_HOIPEC, 2],;
        "STL_Cnt1UltUsoPecasRepo": aDados[_STL_POSCONT, 2],;
        "STL_Cnt2UltUsoPecasRepo": aDados[_STL_POSCON2, 2],;
        "STL_Cnt1PrxUsoPecasRepo": aDados[_STL_CONTPROX, 2],;
        "STL_Cnt2PrxUsoPecasRepo": aDados[_STL_CON2PROX, 2],;
        "STL_DtPrxUsoPecasRepo": aDados[_STL_DTPROX, 2],;
        "STL_HoPrxUsoPecasRepo": aDados[_STL_HRPROX, 2],;
        "TPC_ETAPA":aDados[_TPC_ETAPA, 2],;
        "TPC_OPCAO":aDados[_TPC_OPCAO, 2],;
        "TPC_TIPRES":aDados[_TPC_TIPRES, 2],;
        "TPC_FORMUL":aDados[_TPC_FORMUL, 2],;
        "DEV_SUBREG": aDados[_DEVSUB, 2]})

return

//-------------------------------------------------------------------
/*/{Protheus.doc} mntLGPD
Método responsável por aplicar a regra de Proteção de dados dos campo
(LGPD)
@type Método

@author João Ricardo Santini Zandoná
@since 04/07/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor
@param aOfusc, array, Array contendo os campos que podem ser visualizados pelo usuário
@param nIni, numérico, Informa o Índice inicial da aplicadação da regra (Opcional)
@param nFinal, numérico, Informa o Índice final da aplicação da regra(Opcional)

@return array, Array contendo todos os dados recebidos já tratados
/*/
//-------------------------------------------------------------------
method mntLGPD(aDados as array, aOfusc as array, nIni as numeric, nFinal as numeric) as array class OrdemServicoSmartViewBusinessObject

    Local nX as numeric

    // Realiza o tratamento de LGPD
    For nX := nIni To nFinal
        
        If aDados[nX, 1] != 'DEV_SUBREG' .And. aScan(aOfusc, aDados[nX, 1]) == 0
        
            aDados[nX, 2] := FwProtectedDataUtil():ValueAsteriskToAnonymize(aDados[nX, 2])
        
        EndIf
    
    Next

Return aDados

//-------------------------------------------------------------------
/*/{Protheus.doc} mntTypePar
Método responsável por validar o tipo dos parâmetros de Combobox conforme a SX1
Devido a um BUG no SmartView os parâmetros Combobox acabam vindo com tipo caractere
quando deveriam ser numérico
@type Método

@author João Ricardo Santini Zandoná
@since 06/12/2023
@version P11

@param aPars, array, Array contendo todos o campo X1_ORDEM dos parâmetros combobox
utilizados no Objeto de Negócio 
@param jParams, json, Traz os parâmetros e seus respectivos valores

@return array, Array contendo o mesmo número de posições do aPars porém respectivamente
com os valores dos parâmetros com a tipagem correta
/*/
//-------------------------------------------------------------------
method mntTypePar(aPars as array, jParams as json) as array class OrdemServicoSmartViewBusinessObject

    Local aReturn := {}
    Local cTipo   := ''
    Local cPar    := ''
    Local nI      := 1

    While nI <= len(aPars)
        cTipo := Posicione("SX1",1,'MNT675    '+aPars[nI],"X1_TIPO")
        cPar := 'MV_PAR'+aPars[nI]
        If cTipo <> ValType(jParams[cPar, 1])
            If cTipo == 'N'
                aAdd(aReturn, Val(jParams[cPar, 1]))
            EndIf
        EndIf
        If nI <> len(aReturn)
            aAdd(aReturn, jParams[cPar, 1])
        EndIf
        nI := nI + 1
    Enddo

Return aReturn

//-------------------------------------------------------------------
/*/{Protheus.doc} getSchema
Método responsável por informar as características dos campo e 
também os parâmetros quando esses não são adicionados pela SX1
@type Método

@author João Ricardo Santini Zandoná
@since 04/07/2023
@version P11

@return objeto, Retorna a si mesmo
/*/
//-------------------------------------------------------------------
method getSchema() as object class OrdemServicoSmartViewBusinessObject

    self:addProperty('STJ_Filial',              FWSX3Util():GetDescription( 'TJ_FILIAL' ),  'string',  FWX3Titulo( 'TJ_FILIAL' ), 'TJ_FILIAL')
    self:addProperty('STJ_Ordem',               FWSX3Util():GetDescription( 'TJ_ORDEM' ),   'string',  FWX3Titulo( 'TJ_ORDEM' ), 'TJ_ORDEM')
    self:addProperty('STJ_Plano',               FWSX3Util():GetDescription( 'TJ_PLANO' ),   'string',  FWX3Titulo( 'TJ_PLANO' ), 'TJ_PLANO')
    self:addProperty('STJ_Bem',                 FWSX3Util():GetDescription( 'TJ_CODBEM' ),  'string',  FWX3Titulo( 'TJ_CODBEM' ), 'TJ_CODBEM')
    self:addProperty('STJ_Fim',                 FWSX3Util():GetDescription( 'TJ_DTMPFIM' ), 'string',  FWX3Titulo( 'TJ_DTMPFIM' ), 'TJ_DTMPFIM')
    self:addProperty('STJ_CCusto',              FWSX3Util():GetDescription( 'TJ_CCUSTO' ),  'string',  FWX3Titulo( 'TJ_CCUSTO' ), 'TJ_CCUSTO')
    self:addProperty('STJ_CTrabalho',           FWSX3Util():GetDescription( 'TJ_CENTRAB' ), 'string',  FWX3Titulo( 'TJ_CENTRAB' ), 'TJ_CENTRAB')
    self:addProperty('STJ_Servico',             FWSX3Util():GetDescription( 'TJ_SERVICO' ), 'string',  FWX3Titulo( 'TJ_SERVICO' ), 'TJ_SERVICO')
    self:addProperty('STJ_SeqRela',             FWSX3Util():GetDescription( 'TJ_SEQRELA' ), 'string',  FWX3Titulo( 'TJ_SEQRELA' ), 'TJ_SEQRELA')
    self:addProperty('STJ_Prioridade',          FWSX3Util():GetDescription( 'TJ_PRIORID' ), 'string',  FWX3Titulo( 'TJ_PRIORID'), 'TJ_PRIORID')
    self:addProperty('STJ_UltMant',             FWSX3Util():GetDescription( 'TJ_DTULTMA' ), 'string',  FWX3Titulo( 'TJ_DTULTMA'), 'TJ_DTULTMA')
    self:addProperty('STJ_Area',                FWSX3Util():GetDescription( 'TJ_CODAREA' ), 'string',  FWX3Titulo( 'TJ_CODAREA'), 'TJ_CODAREA')
    self:addProperty('STJ_Tipo',                FWSX3Util():GetDescription( 'TJ_TIPO' ),    'string',  FWX3Titulo( 'TJ_TIPO'), 'TJ_TIPO')
    self:addProperty('STJ_Sequenc',             FWSX3Util():GetDescription( 'TJ_SEQUENC' ), 'number',  FWX3Titulo( 'TJ_SEQUENC'), 'TJ_SEQUENC')
    self:addProperty('STJ_DtFimPP',             FWSX3Util():GetDescription( 'TJ_DTPPFIM' ), 'string',  FWX3Titulo( 'TJ_DTPPFIM'), 'TJ_DTPPFIM')
    self:addProperty('STJ_HOPPFIM',             FWSX3Util():GetDescription( 'TJ_HOPPFIM' ), 'string',  FWX3Titulo( 'TJ_HOPPFIM'), 'TJ_HOPPFIM')
    self:addProperty('STJ_DTMPINI',             FWSX3Util():GetDescription( 'TJ_DTMPINI' ), 'string',  FWX3Titulo( 'TJ_DTMPINI'), 'TJ_DTMPINI')
    self:addProperty('STJ_HOMPINI',             FWSX3Util():GetDescription( 'TJ_HOMPINI' ), 'string',  FWX3Titulo( 'TJ_HOMPINI'), 'TJ_HOMPINI')
    self:addProperty('STJ_HOMPFIM',             FWSX3Util():GetDescription( 'TJ_HOMPFIM' ), 'string',  FWX3Titulo( 'TJ_HOMPFIM'), 'TJ_HOMPFIM')
    self:addProperty('STJ_OBSERVA',             FWSX3Util():GetDescription( 'TJ_OBSERVA' ), 'memo',    FWX3Titulo( 'TJ_OBSERVA'), 'TJ_OBSERVA')
    self:addProperty('STJ_POSCONT',             FWSX3Util():GetDescription( 'TJ_POSCONT' ), 'number',  FWX3Titulo( 'TJ_POSCONT'), 'TJ_POSCONT')
    self:addProperty('STJ_POSCON2',             FWSX3Util():GetDescription( 'TJ_POSCON2' ), 'number',  FWX3Titulo( 'TJ_POSCON2'), 'TJ_POSCON2')
    self:addProperty('STJ_SOLICI',              FWSX3Util():GetDescription( 'TJ_SOLICI' ),  'string',  FWX3Titulo( 'TJ_SOLICI'),  'TJ_SOLICI')
    self:addProperty('STJ_TIPOOS',              FWSX3Util():GetDescription( 'TJ_TIPOOS' ),  'string',  FWX3Titulo( 'TJ_TIPOOS'),  'TJ_TIPOOS')
    self:addProperty('ST9_NomeBem',             FWSX3Util():GetDescription( 'T9_NOME' ),    'string',  FWX3Titulo( 'T9_NOME'), 'T9_NOME')
    self:addProperty('ST9_Placa',               FWSX3Util():GetDescription( 'T9_PLACA' ),   'string',  FWX3Titulo( 'T9_PLACA'), 'T9_PLACA')
    self:addProperty('ST9_Prioridade',          FWSX3Util():GetDescription( 'T9_PRIORID' ), 'string',  FWX3Titulo( 'T9_PRIORID'), 'T9_PRIORID')
    self:addProperty('ST9_Local',               FWSX3Util():GetDescription( 'T9_LOCAL' ),   'string',  FWX3Titulo( 'T9_LOCAL'), 'T9_LOCAL')
    self:addProperty('ST9_Descric',             FWSX3Util():GetDescription( 'T9_DESCRIC' ), 'memo',    FWX3Titulo( 'T9_DESCRIC')+'- ST9', 'T9_DESCRIC')
    self:addProperty('ST9_CodBPAI',             FWSX3Util():GetDescription( 'T9_CODBEM' ),  'string',  FWX3Titulo( 'T9_CODBEM')+'- PAI', 'T9_CODBEM')
    self:addProperty('ST9_NomBPAI',             FWSX3Util():GetDescription( 'T9_NOME' ),    'string',  FWX3Titulo( 'T9_NOME' )+'- PAI', 'T9_NOME')
    self:addProperty('ST9_TEMCONT',             FWSX3Util():GetDescription( 'T9_TEMCONT' ), 'string',  FWX3Titulo( 'T9_TEMCONT' ), 'T9_TEMCONT')
    self:addProperty('CCT_CCustoNome',          FWSX3Util():GetDescription( 'CTT_DESC01' ), 'string',  FWX3Titulo( 'CTT_DESC01' ), 'CTT_DESC01')
    self:addProperty('SHB_CTrabNome',           FWSX3Util():GetDescription( 'HB_NOME' ),    'string',  FWX3Titulo( 'HB_NOME' )+'- SHB', 'HB_NOME')
    self:addProperty('ST4_ServNome',            FWSX3Util():GetDescription( 'T4_NOME' ),    'string',  FWX3Titulo( 'T4_NOME' )+'- ST4', 'T4_NOME')
    self:addProperty('ST4_CodArea',             FWSX3Util():GetDescription( 'T4_CODAREA' ), 'string',  FWX3Titulo( 'T4_CODAREA'), 'T4_CODAREA')
    self:addProperty('ST4_TipoManutencao',      FWSX3Util():GetDescription( 'T4_TIPOMAN' ), 'string',  FWX3Titulo( 'T4_TIPOMAN'), 'T4_TIPOMAN')
    self:addProperty('STF_NomeManutencao',      FWSX3Util():GetDescription( 'TF_NOMEMAN' ), 'string',  FWX3Titulo( 'TF_NOMEMAN'), 'TF_NOMEMAN')
    self:addProperty('STF_ContManut',           FWSX3Util():GetDescription( 'TF_CONMANU' ), 'number',  FWX3Titulo( 'TF_CONMANU'), 'TF_CONMANU')
    self:addProperty('STF_Documento',           FWSX3Util():GetDescription( 'TF_DOCTO' ),   'string',  FWX3Titulo( 'TF_DOCTO'), 'TF_DOCTO')
    self:addProperty('STF_ParadaAntes',         FWSX3Util():GetDescription( 'TF_TEPAANT' ), 'number',  FWX3Titulo( 'TF_TEPAANT'), 'TF_TEPAANT')
    self:addProperty('STF_UnidPAntes',          FWSX3Util():GetDescription( 'TF_UNPAANT' ), 'string',  FWX3Titulo( 'TF_UNPAANT'), 'TF_UNPAANT')
    self:addProperty('STF_ParadaDep',           FWSX3Util():GetDescription( 'TF_TEPADEP' ), 'number',  FWX3Titulo( 'TF_TEPADEP'), 'TF_TEPADEP')
    self:addProperty('STF_UndPDepois',          FWSX3Util():GetDescription( 'TF_UNPADEP' ), 'string',  FWX3Titulo( 'TF_UNPADEP'), 'TF_UNPADEP')
    self:addProperty('STF_Descric',             FWSX3Util():GetDescription( 'TF_DESCRIC' ), 'memo',    FWX3Titulo( 'TF_DESCRIC')+'- STF', 'TF_DESCRIC')
    self:addProperty('STD_NomAreaManut',        FWSX3Util():GetDescription( 'TD_NOME' ),    'string',  FWX3Titulo( 'TD_NOME')+' -STD', 'TD_NOME')
    self:addProperty('STE_NomeTipManut',        FWSX3Util():GetDescription( 'TE_NOME' ),    'string',  FWX3Titulo( 'TE_NOME')+' -STE', 'TE_NOME')
    self:addProperty('STL_Tarefa',              FWSX3Util():GetDescription( 'TL_TAREFA' ),  'string',  FWX3Titulo( 'TL_TAREFA'), 'TL_TAREFA')
    self:addProperty('STL_TipoReg',             FWSX3Util():GetDescription( 'TL_TIPOREG' ), 'string',  FWX3Titulo( 'TL_TIPOREG'), 'TL_TIPOREG')
    self:addProperty('STL_UsaCalendario',       FWSX3Util():GetDescription( 'TL_USACALE' ), 'string',  FWX3Titulo( 'TL_USACALE'), 'TL_USACALE')
    self:addProperty('STL_Destino',             FWSX3Util():GetDescription( 'TL_DESTINO' ), 'string',  FWX3Titulo( 'TL_DESTINO'), 'TL_DESTINO')
    self:addProperty('STL_DetalheCodigo',       FWSX3Util():GetDescription( 'TL_CODIGO' ),  'string',  FWX3Titulo( 'TL_CODIGO'), 'TL_CODIGO')
    self:addProperty('STL_DtIni',               FWSX3Util():GetDescription( 'TL_DTINICI' ), 'string',  FWX3Titulo( 'TL_DTINICI'), 'TL_DTINICI')
    self:addProperty('STL_HoIni',               FWSX3Util():GetDescription( 'TL_HOINICI' ), 'string',  FWX3Titulo( 'TL_HOINICI'), 'TL_HOINICI')
    self:addProperty('STL_QuantidadeRecurso',   FWSX3Util():GetDescription( 'TL_QUANREC' ), 'number',  FWX3Titulo( 'TL_QUANREC'), 'TL_QUANREC')
    self:addProperty('STL_Quantidade',          FWSX3Util():GetDescription( 'TL_QUANTID' ), 'number',  FWX3Titulo( 'TL_QUANTID'), 'TL_QUANTID')
    self:addProperty('STL_TIPOHOR',             FWSX3Util():GetDescription( 'TL_TIPOHOR' ), 'string',  FWX3Titulo( 'TL_TIPOHOR'), 'TL_TIPOHOR')
    self:addProperty('STL_Unidade',             FWSX3Util():GetDescription( 'TL_UNIDADE' ), 'string',  FWX3Titulo( 'TL_UNIDADE'), 'TL_UNIDADE')
    self:addProperty('STB_CodCaracte',          FWSX3Util():GetDescription( 'TB_CARACTE' ), 'string',  FWX3Titulo( 'TB_CARACTE'), 'TB_CARACTE')
    self:addProperty('STB_Operador',            FWSX3Util():GetDescription( 'TB_CONDOP' ),  'string',  FWX3Titulo( 'TB_CONDOP'), 'TB_CONDOP')
    self:addProperty('STB_Detalhe',             FWSX3Util():GetDescription( 'TB_DETALHE' ), 'string',  FWX3Titulo( 'TB_DETALHE'), 'TB_DETALHE')
    self:addProperty('STB_DetalheDois',         FWSX3Util():GetDescription( 'TB_INFO02' ),  'string',  FWX3Titulo( 'TB_INFO02'), 'TB_INFO02')
    self:addProperty('STB_Unidade',             FWSX3Util():GetDescription( 'TB_UNIDADE' ), 'string',  FWX3Titulo( 'TB_UNIDADE'), 'TB_UNIDADE')
    self:addProperty('TPR_NomCaracte',          FWSX3Util():GetDescription( 'TPR_NOME' ),   'string',  FWX3Titulo( 'TPR_NOME')+'- TPR', 'TPR_NOME')
    self:addProperty('STQ_Tarefa',              FWSX3Util():GetDescription( 'TQ_TAREFA' ),  'string',  FWX3Titulo( 'TQ_TAREFA'), 'TQ_TAREFA')
    self:addProperty('STQ_Etapa',               FWSX3Util():GetDescription( 'TQ_ETAPA' ),   'string',  FWX3Titulo( 'TQ_ETAPA'), 'TQ_ETAPA')
    self:addProperty('ST5_Sequencia',           FWSX3Util():GetDescription( 'T5_SEQUENC' ), 'number',  FWX3Titulo( 'T5_SEQUENC'), 'T5_SEQUENC')
    self:addProperty('STQ_SeqEta',              FWSX3Util():GetDescription( 'TQ_SEQETA' ),  'string',  FWX3Titulo( 'TQ_SEQETA'), 'TQ_SEQETA')
    self:addProperty('ST5_Descric',             FWSX3Util():GetDescription( 'T5_DESCRIC' ), 'string',  FWX3Titulo( 'T5_DESCRIC')+'- ST5', 'T5_DESCRIC')
    self:addProperty('TTC_CodSint',             FWSX3Util():GetDescription( 'TTC_CDSINT' ), 'string',  FWX3Titulo( 'TTC_CDSINT'), 'TTC_CDSINT')
    self:addProperty('TTB_BloqPorta',           FWSX3Util():GetDescription( 'TTB_BLOQPT' ), 'string',  FWX3Titulo( 'TTB_BLOQPT'), 'TTB_BLOQPT')
    self:addProperty('TTB_DescSint',            FWSX3Util():GetDescription( 'TTB_DESSIN' ), 'string',  FWX3Titulo( 'TTB_DESSIN')+'- TTB', 'TTB_DESSIN')
    self:addProperty('TPL_CodMotiv',            FWSX3Util():GetDescription( 'TPL_CODMOT' ), 'string',  FWX3Titulo( 'TPL_CODMOT'), 'TPL_CODMOT')
    self:addProperty('TPL_DtInic',              FWSX3Util():GetDescription( 'TPL_DTINIC' ), 'string',  FWX3Titulo( 'TPL_DTINIC'), 'TPL_DTINIC')
    self:addProperty('TPL_HoInic',              FWSX3Util():GetDescription( 'TPL_HOINIC' ), 'string',  FWX3Titulo( 'TPL_HOINIC'), 'TPL_HOINIC')
    self:addProperty('TPL_DtFim',               FWSX3Util():GetDescription( 'TPL_DTFIM' ),  'string',   FWX3Titulo( 'TPL_DTFIM'), 'TPL_DTFIM')
    self:addProperty('TPL_HoFim',               FWSX3Util():GetDescription( 'TPL_HOFIM' ),  'string',   FWX3Titulo( 'TPL_HOFIM'), 'TPL_HOFIM')
    self:addProperty('TPJ_DescMot',             FWSX3Util():GetDescription( 'TPJ_DESMOT' ), 'string',  FWX3Titulo( 'TPJ_DESMOT')+'- TPJ', 'TPJ_DESMOT')
    self:addProperty('TAF_LocaliBem',           'TAF_LocaliBem',                            'string',  'TAF_LocaliBem',           'TAF_NOMNIV')
    self:addProperty('TAF_NOMNIV',              FWSX3Util():GetDescription( 'TAF_NOMNIV' ), 'string',  FWX3Titulo( 'TAF_NOMNIV'), 'TAF_NOMNIV')
    self:addProperty('TPY_CodProPecasRepo',     FWSX3Util():GetDescription( 'TPY_CODPRO' ), 'string',  FWX3Titulo( 'TPY_CODPRO'), 'TPY_CODPRO')
    self:addProperty('STL_DtUltUsoPecasRepo',   FWSX3Util():GetDescription( 'TL_DTINICI' ), 'string',  FWX3Titulo( 'TL_DTINICI' )+'- PECAS', 'TL_DTINICI')
    self:addProperty('STL_HoUltUsoPecasRepo',   FWSX3Util():GetDescription( 'TL_HOINICI' ), 'string',  FWX3Titulo( 'TL_HOINICI' )+'- PECAS', 'TL_HOINICI')
    self:addProperty('STL_Cnt1UltUsoPecasRepo', FWSX3Util():GetDescription( 'TL_POSCONT' ), 'number',  FWX3Titulo( 'TL_POSCONT' )+'- PECAS', 'TL_POSCONT')
    self:addProperty('STL_Cnt2UltUsoPecasRepo', FWSX3Util():GetDescription( 'TL_POSCON2' ), 'number',  FWX3Titulo( 'TL_POSCON2' )+'- PECAS', 'TL_POSCON2')
    self:addProperty('STL_Cnt1PrxUsoPecasRepo', FWSX3Util():GetDescription( 'TL_POSCONT' ), 'number',  FWX3Titulo( 'TL_POSCONT' )+'- PECAS', 'TL_POSCONT')
    self:addProperty('STL_Cnt2PrxUsoPecasRepo', FWSX3Util():GetDescription( 'TL_POSCON2' ), 'number',  FWX3Titulo( 'TL_POSCON2' )+'- PECAS', 'TL_POSCON2')
    self:addProperty('STL_DtPrxUsoPecasRepo',   FWSX3Util():GetDescription( 'TL_DTINICI' ), 'string',  FWX3Titulo( 'TL_DTINICI' )+'- PECAS', 'TL_DTINICI')
    self:addProperty('STL_HoPrxUsoPecasRepo',   FWSX3Util():GetDescription( 'TL_HOINICI' ), 'string',  FWX3Titulo( 'TL_HOINICI' )+'- PECAS', 'TL_HOINICI')
    self:addProperty('TQB_CDSOLI',              FWSX3Util():GetDescription( 'TQB_CDSOLI' ), 'string',  FWX3Titulo( 'TQB_CDSOLI'), 'TQB_CDSOLI')
    self:addProperty('TQB_DTABER',              FWSX3Util():GetDescription( 'TQB_DTABER' ), 'string',  FWX3Titulo( 'TQB_DTABER'), 'TQB_DTABER')
    self:addProperty('TQB_HOABER',              FWSX3Util():GetDescription( 'TQB_HOABER' ), 'string',  FWX3Titulo( 'TQB_HOABER'), 'TQB_HOABER')
    self:addProperty('STI_DESCRIC',             FWSX3Util():GetDescription( 'STI_DESCRIC' ), 'string', FWX3Titulo( 'TI_DESCRIC')+'- STI', 'TI_DESCRIC')
    self:addProperty('TQB_PRIORI',              FWSX3Util():GetDescription( 'TQB_PRIORI' ), 'string',  FWX3Titulo( 'TQB_PRIORI'), 'TQB_PRIORI')
    self:addProperty('DEV_SUBREG',              'DEV_SUBREG',                               'string',  'DEV_SUBREG', 'T9_NOME')
    self:addProperty('STF_NOMBEM',              FWSX3Util():GetDescription( 'TF_NOMBEM' ),  'string',  FWX3Titulo( 'TF_NOMBEM'), 'TF_NOMBEM')
    self:addProperty('STF_TIPACOM',             FWSX3Util():GetDescription( 'TF_TIPACOM' ), 'string',  FWX3Titulo( 'TF_TIPACOM'), 'TF_TIPACOM')
    self:addProperty('TPC_ETAPA',               FWSX3Util():GetDescription( 'TPC_ETAPA' ),  'string',  FWX3Titulo( 'TPC_ETAPA'), 'TPC_ETAPA')
    self:addProperty('TPC_OPCAO',               FWSX3Util():GetDescription( 'TPC_OPCAO' ),  'string',  FWX3Titulo( 'TPC_OPCAO'), 'TPC_OPCAO')
    self:addProperty('TPC_TIPRES',              FWSX3Util():GetDescription( 'TPC_TIPRES' ), 'string',  FWX3Titulo( 'TPC_TIPRES'), 'TPC_TIPRES')
    self:addProperty('TPC_FORMUL',              FWSX3Util():GetDescription( 'TPC_FORMUL' ), 'string',  FWX3Titulo( 'TPC_FORMUL'), 'TPC_FORMUL')

return self:oSchema
