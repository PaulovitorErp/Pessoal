#include "msobject.ch"
#include "totvs.framework.treports.integratedprovider.th"
 
namespace totvs.protheus.AbastecimentosSmartViewBusinessObject

Static _TQN_FILIAL    := 1
Static _TQN_FROTA     := 2
Static _TQN_DTABAS    := 3
Static _TQN_HRABAS    := 4
Static _TQN_HODOM     := 5
Static _TQN_QUANT     := 6
Static _TQN_VALUNI    := 7
Static _TQN_VALTOT    := 8
Static _TQN_CODMOT    := 9
Static _TQN_USUARI    := 10
Static _TQN_CCUSTO    := 11
Static _TQN_CODCOM    := 12
Static _TQN_POSTO     := 13
Static _TQN_LOJA      := 14
Static _T9_CODBEM     := 15
Static _T9_PLACA      := 16
Static _T9_TPCONTA    := 17
Static _T9_CCUSTO     := 18
Static _T9_CODFAMI    := 19
Static _TQF_NREDUZ    := 20
Static _TQF_CIDADE    := 21
Static _TQF_CNPJ      := 22
Static _TQF_CONVEN    := 23
Static _TQM_UM        := 24
Static _TQM_CONVEN    := 25
Static _TQM_NOMCOM    := 26
Static _TT8_MEDIA     := 27
Static _DA4_NOME      := 28
Static _T6_MEDIA1     := 29
Static _T6_TIPO1      := 30
Static _T6_UNIDAD1    := 31
Static _CTT_OPERAC    := 32
Static _TSZ_DESSER    := 33
Static _MEDIA         := 34
Static _PRIMEIROABAST := 35
Static _KMPERC        := 36
Static _VALTPCONTA    := 37
// Indices dos campos dentro do aDados

//-------------------------------------------------------------------
/*/{Protheus.doc} AbastecimentosSmartViewBusinessObject
Objeto de negócio de abastecimentos por filial
Tabelas: TQN, ST9, TQF, TQM, TT8, DA4, ST6, CTT, TSZ, STP.
@type Classe
 
@author João Ricardo Santini Zandoná
@since 06/07/2023
@version P11
@return Nil
/*/
//-------------------------------------------------------------------
@totvsFrameworkTReportsIntegratedProvider(active=.T., team="SIGAGFR", tables="TQN", name="AbastecimentosSmartViewBusinessObject", country="ALL", initialRelease="12.1.2310")
class AbastecimentosSmartViewBusinessObject from totvs.framework.treports.integratedprovider.IntegratedProvider
    public method new() as object
    public method getAreas() as array
    public method getDescription() as character
    public method getData() as object
    public method getSchema() as object
    public method mntOfsc() as array
    public method mntLGPD() as array
    public method mntAppend() as object
    public method mntTypePar() as array
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método Construtor do Objeto de Negócio
@type Método
 
@author João Ricardo Santini Zandoná
@since 06/07/2023
@version P11
@return objeto, Retorna o próprio objeto
/*/
//-------------------------------------------------------------------
method new() as object class AbastecimentosSmartViewBusinessObject
    _Super:new()
    self:setDisplayName("Abastecimentos")
    self:SetPergunte("MNR930")
return self
 
//-------------------------------------------------------------------
/*/{Protheus.doc} getDescription
Descrição do Objeto de Negócio
@type Método
 
@author João Ricardo Santini Zandoná
@since 06/07/2023
@version P11
@return caractere, Conteúdo da descrição do Objeto de Negócios
/*/
//-------------------------------------------------------------------
method getDescription() as character class AbastecimentosSmartViewBusinessObject
return "Tabelas: TQN, ST9, TQF, TQM, TT8, DA4, ST6, CTT, TSZ, STP"

//-------------------------------------------------------------------
/*/{Protheus.doc} getAreas
Áreas do menu que o Objeto de Negócio deve ficar
@type Método
 
@author João Ricardo Santini Zandoná
@since 06/07/2023
@version P11
@return array, Retorna um array contendo as sessões do Menu em que o Objeto de Negócio deve aparecer
/*/
//-------------------------------------------------------------------
method getAreas() as array class AbastecimentosSmartViewBusinessObject
return {"Abastecimento", "Abastecimentos"}

//-------------------------------------------------------------------
/*/{Protheus.doc} GetData
Método responsável pelo processamento dos dados enviados pelo 
Objeto de Negócio
@type Método

@author João Ricardo Santini Zandoná
@since 06/07/2023
@version P11

@param nPage, numerico, Número da página atual
@param oFilter, objeto, Filtros aplicados pelo usuário

@return objeto, Retorna o próprio objeto
/*/
//-------------------------------------------------------------------
method getData(nPage as numeric, oFilter as object) as object class AbastecimentosSmartViewBusinessObject
    
    Local cQuery     as character
    Local cAlias     as character
    Local jParams    as json
    Local nSkip      as numeric
    Local nCount     as numeric
    Local cBanco     := Upper(TCGetDB())
    Local aParComboB := {}
    Local aOfsc      := {}
    Local aSql       := {}
    // ESTRUTURA DO ARRAY aDados [Primeira posição nome do campo, segunda posição valor do campo]
    // Caso o valor do campo seja montado a partir de mais campos na primeira posição é o apelido 
    // do campo montado, e na última posição o valor, nas posições intermediárias os campos que são usados para montar o valor
    Local aDados  := { {'TQN_FILIAL', ' '},{'TQN_FROTA', ' '},{'TQN_DTABAS', ' '},;
    {'TQN_HRABAS', ' '},{'TQN_HODOM', ' '},{'TQN_QUANT', ' '},{'TQN_VALUNI', ' '},{'TQN_VALTOT', ' '},{'TQN_CODMOT', ' '},{'TQN_USUARI', ' '},{'TQN_CCUSTO', ' '},;
    {'TQN_CODCOM', ' '},{'TQN_POSTO', ' '},{'TQN_LOJA', ' '},{'T9_CODBEM', ' '},{'T9_PLACA', ' '},{'T9_TPCONTA', ' '},{'T9_CCUSTO', ' '},{'T9_CODFAMI', ' '},;
    {'TQF_NREDUZ', ' '}, {'TQF_CIDADE', ' '},{'TQF_CNPJ', ' '},{'TQF_CONVEN', ' '},{'TQM_UM', ' '},{'TQM_CONVEN', ' '},{'TQM_NOMCOM', ' '},{'TT8_MEDIA', ' '}, {'DA4_NOME', ' '},;
    {'T6_MEDIA1', ' '},{'T6_TIPO1', ' '},{'T6_UNIDAD1', ' '},{'CTT_OPERAC', ' '}, {'TSZ_DESSER', ' '},{'MEDIA','TQN_KMROD', 'TQN_QUANT', ' '},{'PRIMEIROABAST', ' '},;
    {'KMPERC','TP_ACUMCON', ' '},{'VALTPCONTA','T6_UNIDAD1', 'T6_TIPO1',' '}}
    
    If cBanco == 'ORACLE'
        aAdd(aSql, ' OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY) ')
        aAdd(aSql, ' TO_CHAR(')
        aAdd(aSql, ' )')
    ElseIf cBanco == 'POSTGRES'
        aAdd(aSql, ' LIMIT 1) ')
        aAdd(aSql, ' ')
        aAdd(aSql, '::text')
    Else
        aAdd(aSql, ' ) ') 
        aAdd(aSql, ' ')
        aAdd(aSql, ' ')
    EndIf

    nCount  := 0
    jParams := oFilter:getParameters() // metodo para retorno do json dos parâmetros
    
    // As posições do array aParComboB seguem as posições dos parâmetros
    aParComboB := self:mntTypePar({'07', '08'}, jParams)
    aOfsc      := self:mntOfsc(aDados)

    cQuery := "SELECT InfosAba.*, "
    cQuery += "CASE "
    cQuery += "WHEN (InfosAba.T6_MEDIA1 = '1' OR InfosAba.T6_MEDIA1 = ' ') THEN  "
    cQuery +=    "(CASE WHEN InfosAba.PRIMEIROABAST != '0' THEN 0 ELSE (InfosAba.KMPERC1 / InfosAba.TQN_QUANT) END) "
    cQuery += "WHEN (InfosAba.T6_MEDIA1 = '2') THEN "
    cQuery +=    "(CASE WHEN InfosAba.PRIMEIROABAST != '0' THEN 0 ELSE (InfosAba.TQN_QUANT / InfosAba.KMPERC1) END) "
    cQuery += "END AS MEDIA, "

    If aParComboB[2] == 2
    
        cQuery += "CASE "
        cQuery += "WHEN (InfosAba.PRIMEIROABAST = '0') THEN InfosAba.KMPERC1 "
        cQuery += "ELSE 0 "
        cQuery += "END AS KMPERC "
    
    Else
        
        cQuery += "InfosAba.KMPERC1 AS KMPERC "
    
    EndIf
	cQuery += "FROM (SELECT TQN.TQN_FILIAL, "
    cQuery += "TQN.TQN_FROTA, TQN.TQN_DTABAS, TQN.TQN_HRABAS, TQN.TQN_HODOM, TQN.TQN_QUANT, "
    cQuery += "TQN.TQN_VALUNI, TQN.TQN_VALTOT, TQN.TQN_CODMOT, TQN.TQN_USUARI, TQN.TQN_CCUSTO, "
    cQuery += "TQN.TQN_CODCOM, TQN.TQN_POSTO, TQN.TQN_LOJA, ST9.T9_CODBEM, ST9.T9_PLACA, "
    cQuery += "ST9.T9_TPCONTA, ST9.T9_CCUSTO, ST9.T9_CODFAMI, TQF.TQF_NREDUZ, TQF.TQF_CIDADE, "
    cQuery += "TQF.TQF_CNPJ, TQF.TQF_CONVEN, TQM.TQM_UM, TQM.TQM_CONVEN, TQM.TQM_NOMCOM, TT8.TT8_MEDIA, "
    cQuery += "DA4.DA4_NOME, ST6.T6_MEDIA1, "
    cQuery += "ST6.T6_TIPO1, ST6.T6_UNIDAD1, CTT.CTT_OPERAC,"
    If SuperGetMv("MV_NGOPER") == 'S'
        cQuery += "ISNULL(TSZ.TSZ_DESSER, '-') AS TSZ_DESSER, "
    Else
        cQuery += "' ' AS TSZ_DESSER, "
    EndIf 
    cQuery += "((SELECT "
    If cBanco $ 'MSSQL7'
        cQuery += " TOP (1) "
    EndIf
    cQuery += "STP.TP_ACUMCON FROM "+RetSqlName('STP')+" STP "
    cQuery +=        "WHERE STP.TP_CODBEM = ST9.T9_CODBEM "
    cQuery +=        "AND STP.TP_TIPOLAN IN ('A', 'I') "
    cQuery +=        "AND STP.TP_DTLEITU || STP.TP_HORA = TQN.TQN_DTABAS || TQN.TQN_HRABAS "
    cQuery += aSql[1]
    cQuery += " - "
    cQuery +=          "(SELECT "
    If cBanco $ 'MSSQL7'
        cQuery += "TOP (1) "
    EndIf
    cQuery += "STP.TP_ACUMCON FROM "+RetSqlName('STP')+" STP "
    cQuery +=          "WHERE STP.TP_CODBEM = ST9.T9_CODBEM "
    cQuery +=          "AND STP.TP_TIPOLAN IN ('A', 'I') "
    cQuery +=          "AND STP.TP_DTLEITU || STP.TP_HORA < TQN.TQN_DTABAS||TQN.TQN_HRABAS "
    cQuery +=          'ORDER BY STP.TP_DTLEITU || STP.TP_HORA DESC '
    cQuery += aSql[1]
    cQuery += ") AS KMPERC1, "
    cQuery += "CASE "
    cQuery +=   "WHEN ST6.T6_MEDIA1 = '1' THEN "
    cQuery +=    "(TRIM(ST6.T6_TIPO1)||'/'||TRIM(ST6.T6_UNIDAD1)) "
    cQuery +=   "WHEN ST6.T6_MEDIA1 = '0' OR ST6.T6_MEDIA1 = ' ' THEN ST9.T9_TPCONTA "
    cQuery +=   "WHEN ST6.T6_MEDIA1 = '2' THEN "
    cQuery +=    "(TRIM(ST6.T6_UNIDAD1||'/'||TRIM(ST6.T6_TIPO1))) "
    cQuery += "END AS VALTPCONTA, "
    cQuery += "CASE "
    cQuery +=    "WHEN (SELECT MIN(TQN1.TQN_DTABAS||TQN1.TQN_HRABAS) "
    cQuery +=           "FROM  "+RetSqlName('TQN')+" TQN1 "
    cQuery +=           "WHERE "+NGMODCOMP("TQN","TQN","=") + " "
    cQuery +=           "AND TQN1.TQN_FROTA = TQN.TQN_FROTA AND TQN1.D_E_L_E_T_ = ' ') "
    cQuery +=           "= TQN.TQN_DTABAS||TQN.TQN_HRABAS "
    cQuery +=           "THEN "+aSql[2]+" TQN.TQN_QUANT"+aSql[3]
    cQuery +=    " ELSE '0' "
    cQuery += "END AS PRIMEIROABAST  "
    cQuery += "FROM "+RetSqlName('TQN')+" TQN "
    cQuery += "INNER JOIN "+RetSqlName('ST9')+" ST9 ON "
    cQuery += NGMODCOMP("ST9","TQN","=") + " "
    cQuery += "AND ST9.T9_CODBEM = TQN.TQN_FROTA "
    cQuery+=  "AND ST9.D_E_L_E_T_ = ' ' "
    cQuery += "INNER JOIN "+RetSqlName('TQF')+" TQF ON "
    cQuery += NGMODCOMP("TQF","TQN","=") + " "
    cQuery +=  "AND TQF.TQF_CODIGO = TQN.TQN_POSTO "
    cQuery +=  "AND TQF.TQF_LOJA = TQN.TQN_LOJA "
    cQuery +=  "AND TQF.D_E_L_E_T_ = ' ' "
    cQuery += "INNER JOIN "+RetSqlName('TT8')+" TT8 ON "
    cQuery += NGMODCOMP("TT8","ST9","=") + " "
    cQuery +=  "AND TT8.TT8_CODBEM = ST9.T9_CODBEM "
    cQuery +=  "AND TT8.TT8_CODCOM = TQN.TQN_CODCOM "    
    cQuery += "INNER JOIN "+RetSqlName('ST6')+" ST6 ON "
    cQuery += NGMODCOMP("ST6","ST9","=") + " "
    cQuery +=  "AND ST6.T6_CODFAMI = ST9.T9_CODFAMI "
    cQuery +=  "AND ST6.D_E_L_E_T_ = ' ' "
    cQuery += "INNER JOIN "+RetSqlName('CTT')+" CTT ON "
    cQuery += NGMODCOMP("CTT","TQN","=") + " "
    cQuery += "AND CTT.CTT_CUSTO = TQN.TQN_CCUSTO "
    cQuery += "AND CTT.D_E_L_E_T_ = ' ' "
    cQuery += "LEFT JOIN "+RetSqlName('TSZ')+" TSZ ON "
    cQuery += NGMODCOMP("TSZ","CTT","=") + " "
    cQuery += "AND TSZ.TSZ_CODSER = CTT.CTT_OPERAC "
    cQuery += "AND TSZ.D_E_L_E_T_ = ' ' "
    cQuery += "LEFT JOIN "+RetSqlName('TQM')+" TQM ON "
    cQuery += NGMODCOMP("TQM","TQN","=") + " "
    cQuery +=  "AND TQM.TQM_CODCOM = TQN.TQN_CODCOM "
    cQuery +=  "AND TQM.TQM_CONVEN = TQF.TQF_CONVEN "
    cQuery +=  "AND TQM.D_E_L_E_T_ = ' ' "
    cQuery += "LEFT JOIN "+RetSqlName('DA4')+" DA4 ON "
    cQuery += NGMODCOMP("DA4","TQN","=") + " "
    cQuery +=  "AND DA4.DA4_COD = TQN.TQN_CODMOT "
    cQuery += "WHERE TQN.D_E_L_E_T_ = ' ' "

    //Os filtros serão setados na interface do novo TReports
    If oFilter:hasFilter()

        cQuery += " AND " + oFilter:getSQLExpression()
    
    EndIf

    If !Empty(jParams['MV_PAR01', 1]) .Or. !Empty(jParams['MV_PAR02', 1])
        cQuery += " AND TQN.TQN_DTABAS BETWEEN '" + substr(ArrTokStr(jParams['MV_PAR01']), 1, 4) + substr(ArrTokStr(jParams['MV_PAR01']), 6, 2) + substr(ArrTokStr(jParams['MV_PAR01']), 9, 2);
        + "' AND '" + substr(ArrTokStr(jParams['MV_PAR02']), 1, 4) + substr(ArrTokStr(jParams['MV_PAR02']), 6, 2) + substr(ArrTokStr(jParams['MV_PAR02']), 9, 2)+"' "
    EndIf

    If !Empty(jParams['MV_PAR03', 1]) .Or. !Empty(jParams['MV_PAR04', 1])
        cQuery += "AND TQN.TQN_FILIAL BETWEEN '"+ArrTokStr(jParams['MV_PAR03'])+"' AND '"+ArrTokStr(jParams['MV_PAR04'])+"' "
    EndIf

     If !Empty(jParams['MV_PAR05', 1]) .Or. !Empty(jParams['MV_PAR06', 1])
        cQuery += "AND TQN.TQN_FROTA BETWEEN '"+ArrTokStr(jParams['MV_PAR05'])+"' AND '"+ArrTokStr(jParams['MV_PAR06'])+"' "
    EndIf

    cQuery += ") InfosAba "
    cQuery += "ORDER BY InfosAba.TQN_DTABAS"
    If aParComboB[1] == 2
        cQuery += " DESC"
    EndIf
    cQuery += ", InfosAba.TQN_FILIAL, InfosAba.T9_PLACA "
    
    cQuery := ChangeQuery(cQuery)

    cAlias := MPSysOpenQuery(cQuery)

    If nPage == 1
        (cAlias)->(dbGoTop())
    Else
        //Encontra a quantidade de itens que irá pular de acordo com a página atual
        nSkip := ((nPage - 1) * self:getPageSize())      
    
        (cAlias)->(dbSkip(nSkip))
    EndIf

    While !(cAlias)->(Eof())

        aDados[_TQN_FILIAL,    len(aDados[_TQN_FILIAL])]    := (cAlias)->TQN_FILIAL
        aDados[_TQN_FROTA,     len(aDados[_TQN_FROTA])]     := (cAlias)->TQN_FROTA
        aDados[_TQN_DTABAS,    len(aDados[_TQN_DTABAS])]    := (cAlias)->TQN_DTABAS
        aDados[_TQN_HRABAS,    len(aDados[_TQN_HRABAS])]    := (cAlias)->TQN_HRABAS
        aDados[_TQN_HODOM,     len(aDados[_TQN_HODOM])]     := (cAlias)->TQN_HODOM
        aDados[_TQN_QUANT,     len(aDados[_TQN_QUANT])]     := (cAlias)->TQN_QUANT
        aDados[_TQN_VALUNI,    len(aDados[_TQN_VALUNI])]    := (cAlias)->TQN_VALUNI
        aDados[_TQN_VALTOT,    len(aDados[_TQN_VALTOT])]    := (cAlias)->TQN_VALTOT
        aDados[_TQN_CODMOT,    len(aDados[_TQN_CODMOT])]    := (cAlias)->TQN_CODMOT
        aDados[_TQN_USUARI,    len(aDados[_TQN_USUARI])]    := (cAlias)->TQN_USUARI
        aDados[_TQN_CCUSTO,    len(aDados[_TQN_CCUSTO])]    := (cAlias)->TQN_CCUSTO
        aDados[_TQN_CODCOM,    len(aDados[_TQN_CODCOM])]    := (cAlias)->TQN_CODCOM
        aDados[_TQN_POSTO,     len(aDados[_TQN_POSTO])]     := (cAlias)->TQN_POSTO
        aDados[_TQN_LOJA,      len(aDados[_TQN_LOJA])]      := (cAlias)->TQN_LOJA
        aDados[_T9_CODBEM,     len(aDados[_T9_CODBEM])]     := (cAlias)->T9_CODBEM
        aDados[_T9_PLACA,      len(aDados[_T9_PLACA])]      := (cAlias)->T9_PLACA
        aDados[_T9_TPCONTA,    len(aDados[_T9_TPCONTA])]    := (cAlias)->T9_TPCONTA
        aDados[_T9_CCUSTO,     len(aDados[_T9_CCUSTO])]     := (cAlias)->T9_CCUSTO
        aDados[_T9_CODFAMI,    len(aDados[_T9_CODFAMI])]    := (cAlias)->T9_CODFAMI
        aDados[_TQF_NREDUZ,    len(aDados[_TQF_NREDUZ])]    := (cAlias)->TQF_NREDUZ
        aDados[_TQF_CIDADE,    len(aDados[_TQF_CIDADE])]    := (cAlias)->TQF_CIDADE
        aDados[_TQF_CNPJ,      len(aDados[_TQF_CNPJ])]      := (cAlias)->TQF_CNPJ
        aDados[_TQF_CONVEN,    len(aDados[_TQF_CONVEN])]    := (cAlias)->TQF_CONVEN
        aDados[_TQM_UM,        len(aDados[_TQM_UM])]        := (cAlias)->TQM_UM
        aDados[_TQM_CONVEN,    len(aDados[_TQM_CONVEN])]    := (cAlias)->TQM_CONVEN
        aDados[_TQM_NOMCOM,    len(aDados[_TQM_NOMCOM])]    := (cAlias)->TQM_NOMCOM
        aDados[_TT8_MEDIA,     len(aDados[_TT8_MEDIA])]     := (cAlias)->TT8_MEDIA
        aDados[_DA4_NOME,      len(aDados[_DA4_NOME])]      := (cAlias)->DA4_NOME
        aDados[_T6_MEDIA1,     len(aDados[_T6_MEDIA1])]     := (cAlias)->T6_MEDIA1
        aDados[_T6_TIPO1,      len(aDados[_T6_TIPO1])]      := (cAlias)->T6_TIPO1
        aDados[_T6_UNIDAD1,    len(aDados[_T6_UNIDAD1])]    := (cAlias)->T6_UNIDAD1
        aDados[_CTT_OPERAC,    len(aDados[_CTT_OPERAC])]    := (cAlias)->CTT_OPERAC
        aDados[_TSZ_DESSER,    len(aDados[_TSZ_DESSER])]    := (cAlias)->TSZ_DESSER
        aDados[_MEDIA,         len(aDados[_MEDIA])]         := (cAlias)->MEDIA
        aDados[_PRIMEIROABAST, len(aDados[_PRIMEIROABAST])] := (cAlias)->PRIMEIROABAST
        aDados[_KMPERC,        len(aDados[_KMPERC])]        := (cAlias)->KMPERC
        aDados[_VALTPCONTA,    len(aDados[_VALTPCONTA])]    := (cAlias)->VALTPCONTA

        aDados := self:mntLGPD(aDados, aOfsc)
        self:mntAppend(aDados)

        nCount := nCount + 1
        
        (cAlias)->(DBSkip())

        If nCount == self:getPageSize()
            Exit
        EndIf
        
    Enddo

    self:setHasNext((cAlias)->(!Eof()))
    (cAlias)->(DBCloseArea())

return self:oData

//-------------------------------------------------------------------
/*/{Protheus.doc} mntOfsc
Método responsável por receber o array aDados e retornar quais campos
o usuário tem acesso.
O método é necessário pois existem campos que são montados a partir de cálculos
com mais de um campo, então nesses casos caso o usuário não possa visualizar um
dos campos o campo final montado não pode ser exibido.

@type Método
 
@author João Ricardo Santini Zandoná
@since 04/07/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor
A estrutuda do array a dados pode ser {'NomeDoCampo', valorDoCampo} ou
{'NomeDoCampo', 'CampoMontagem1', 'CampoMontagem2', ..., 'valorDoCampo'}
o array pode possur inúmeras posições intermediárias desde que o primeiro
valor seja o nome ou apelido do campo e a última posição seja o valor.

@return array, Array contendo todos os campos que devem ser validados pelo LGPD
/*/
//-------------------------------------------------------------------
method mntOfsc(aDados) as array class AbastecimentosSmartViewBusinessObject

    Local nX as numeric 
    Local nI as numeric
    Local aCampos := {}
    
    for nX := 1 to len(aDados)
        If len(aDados[nX]) == 2
            aAdd(aCampos, aDados[nX, 1])
        Else
            for nI := 1 to len(aDados[nX])
                If nI != 1 .And. nI != len(aDados[nX])
                    aAdd(aCampos, aDados[nX, nI])
                EndIf
            Next nI
        EndIf
    next nX

    aCampos := FwProtectedDataUtil():UsrAccessPDField( __CUSERID, aCampos)

return aCampos

//-------------------------------------------------------------------
/*/{Protheus.doc} mntLGPD
Método responsável por aplicar a regra de Proteção de dados dos campo
(LGPD)
@type Método
 

@author João Ricardo Santini Zandoná
@since 06/07/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor
@param aOfusc, array, Array contendo os campos que podem ser visualizados pelo usuário

@return array, Array contendo todos os dados recebidos já tratados
/*/
//-------------------------------------------------------------------
method mntLGPD(aDados as array, aOfusc as array) as array class AbastecimentosSmartViewBusinessObject

    Local nX, nI as numeric

    // Realiza o tratamento de LGPD
    For nX := 1 To len(aDados)
        
        If len(aDados[nX]) == 2

            If aScan(aOfusc, aDados[nX, 1]) == 0
        
                aDados[nX, 2] := FwProtectedDataUtil():ValueAsteriskToAnonymize(aDados[nX, 2])
            
            EndIf

        Else

            // Loop de validação para os campos que possuem valores de montagem intermediários
            for nI := 1 to len(aDados[nX])
                If nI != 1 .And. nI != len(aDados[nX])
                    If aScan(aOfusc, aDados[nX, nI]) == 0
        
                        aDados[nX, 2] := FwProtectedDataUtil():ValueAsteriskToAnonymize(aDados[nX, 2])
                    
                    EndIf
                EndIf
            Next nI

        EndIf
    
    Next nX

Return aDados

//-------------------------------------------------------------------
/*/{Protheus.doc} mntTypePar
Método responsável por validar o tipo dos parâmetros de Combobox conforme a SX1
Devido a um BUG no SmartView os parâmetros Combobox acabam vindo com tipo caractere
quando deveriam ser numérico
@type Método

@author João Ricardo Santini Zandoná
@since 06/12/2023
@version P11

@param aPars, array, Array contendo todos o campo X1_ORDEM dos parâmetros combobox
utilizados no Objeto de Negócio 
@param jParams, json, Traz os parâmetros e seus respectivos valores

@return array, Array contendo o mesmo número de posições do aPars porém respectivamente
com os valores dos parâmetros com a tipagem correta
/*/
//-------------------------------------------------------------------
method mntTypePar(aPars as array, jParams as json) as array class AbastecimentosSmartViewBusinessObject

    Local aReturn := {}
    Local cTipo   := ''
    Local cPar    := ''
    Local nI      := 1

    While nI <= len(aPars)
        cTipo := Posicione("SX1",1,'MNR930    '+aPars[nI],"X1_TIPO")
        cPar := 'MV_PAR'+aPars[nI]
        If cTipo <> ValType(jParams[cPar, 1])
            If cTipo == 'N'
                aAdd(aReturn, Val(jParams[cPar, 1]))
            EndIf
        EndIf
        If nI <> len(aReturn)
            aAdd(aReturn, jParams[cPar, 1])
        EndIf
        nI := nI + 1
    Enddo

Return aReturn

//-------------------------------------------------------------------
/*/{Protheus.doc} mntAppend
Método responsável pelo envio dos dados para o TReports
@type Método
 
@author João Ricardo Santini Zandoná
@since 06/07/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor

@return
/*/
//-------------------------------------------------------------------
method mntAppend(aDados as array) as object class AbastecimentosSmartViewBusinessObject

    self:appendData({'TQN_FILIAL':   aDados[_TQN_FILIAL,    len(aDados[_TQN_FILIAL])],;
                    'TQN_FROTA':     aDados[_TQN_FROTA,     len(aDados[_TQN_FROTA])],;
                    'TQN_DTABAS':    aDados[_TQN_DTABAS,    len(aDados[_TQN_DTABAS])],;
                    'TQN_HRABAS':    aDados[_TQN_HRABAS,    len(aDados[_TQN_HRABAS])],;
                    'TQN_HODOM':     aDados[_TQN_HODOM,     len(aDados[_TQN_HODOM])],;
                    'TQN_QUANT':     aDados[_TQN_QUANT,     len(aDados[_TQN_QUANT])],;
                    'TQN_VALUNI':    aDados[_TQN_VALUNI,    len(aDados[_TQN_VALUNI])],;
                    'TQN_VALTOT':    aDados[_TQN_VALTOT,    len(aDados[_TQN_VALTOT])],;
                    'TQN_CODMOT':    aDados[_TQN_CODMOT,    len(aDados[_TQN_CODMOT])],;
                    'TQN_USUARI':    aDados[_TQN_USUARI,    len(aDados[_TQN_USUARI])],;
                    'TQN_CCUSTO':    aDados[_TQN_CCUSTO,    len(aDados[_TQN_CCUSTO])],;
                    'TQN_CODCOM':    aDados[_TQN_CODCOM,    len(aDados[_TQN_CODCOM])],;
                    'TQN_POSTO':     aDados[_TQN_POSTO,     len(aDados[_TQN_POSTO])],;
                    'TQN_LOJA':      aDados[_TQN_LOJA,      len(aDados[_TQN_LOJA])],;
                    'T9_CODBEM':     aDados[_T9_CODBEM,     len(aDados[_T9_CODBEM])],;
                    'T9_PLACA':      aDados[_T9_PLACA,      len(aDados[_T9_PLACA])],;
                    'T9_TPCONTA':    aDados[_T9_TPCONTA,    len(aDados[_T9_TPCONTA])],;
                    'T9_CCUSTO':     aDados[_T9_CCUSTO,     len(aDados[_T9_CCUSTO])],;
                    'T9_CODFAMI':    aDados[_T9_CODFAMI,    len(aDados[_T9_CODFAMI])],;
                    'TQF_NREDUZ':    aDados[_TQF_NREDUZ,    len(aDados[_TQF_NREDUZ])],;
                    'TQF_CIDADE':    aDados[_TQF_CIDADE,    len(aDados[_TQF_CIDADE])],;
                    'TQF_CNPJ':      aDados[_TQF_CNPJ,      len(aDados[_TQF_CNPJ])],;
                    'TQF_CONVEN':    aDados[_TQF_CONVEN,    len(aDados[_TQF_CONVEN])],;
                    'TQM_UM':        aDados[_TQM_UM,        len(aDados[_TQM_UM])],;
                    'TQM_CONVEN':    aDados[_TQM_CONVEN,    len(aDados[_TQM_CONVEN])],;
                    'TQM_NOMCOM':    aDados[_TQM_NOMCOM,    len(aDados[_TQM_NOMCOM])],;
                    'TT8_MEDIA':     aDados[_TT8_MEDIA,     len(aDados[_TT8_MEDIA])],;
                    'DA4_NOME':      aDados[_DA4_NOME,      len(aDados[_DA4_NOME])],;
                    'T6_MEDIA1':     aDados[_T6_MEDIA1,     len(aDados[_T6_MEDIA1])],;
                    'T6_TIPO1':      aDados[_T6_TIPO1,      len(aDados[_T6_TIPO1])],;
                    'T6_UNIDAD1':    aDados[_T6_UNIDAD1,    len(aDados[_T6_UNIDAD1])],;
                    'CTT_OPERAC':    aDados[_CTT_OPERAC,    len(aDados[_CTT_OPERAC])],;
                    'TSZ_DESSER':    aDados[_TSZ_DESSER,    len(aDados[_TSZ_DESSER])],;
                    'MEDIA':         aDados[_MEDIA,         len(aDados[_MEDIA])],;
                    'PRIMEIROABAST': aDados[_PRIMEIROABAST, len(aDados[_PRIMEIROABAST])],;
                    'KMPERC':        aDados[_KMPERC,        len(aDados[_KMPERC])],;
                    'VALTPCONTA':    aDados[_VALTPCONTA,    len(aDados[_VALTPCONTA])]})

return

//-------------------------------------------------------------------
/*/{Protheus.doc} getSchema
Método responsável por informar as características dos campos e 
também os parâmetros quando esses não são adicionados pela SX1
@type Método

@author João Ricardo Santini Zandoná
@since 06/07/2023
@version P11

@return objeto, Retorna a si mesmo
/*/
//-------------------------------------------------------------------
method getSchema() as object class AbastecimentosSmartViewBusinessObject

    self:addProperty('TQN_FILIAL',    FWSX3Util():GetDescription( 'TQN_FILIAL' ),    'string', FWX3Titulo( 'TQN_FILIAL' ),    'TQN_FILIAL')
    self:addProperty('TQN_FROTA',     FWSX3Util():GetDescription( 'TQN_FROTA' ),     'string', FWX3Titulo( 'TQN_FROTA' ),     'TQN_FROTA' )
    self:addProperty('TQN_DTABAS',    FWSX3Util():GetDescription( 'TQN_DTABAS' ),    'string', FWX3Titulo( 'TQN_DTABAS' ),    'TQN_DTABAS')
    self:addProperty('TQN_HRABAS',    FWSX3Util():GetDescription( 'TQN_HRABAS' ),    'string', FWX3Titulo( 'TQN_HRABAS' ),    'TQN_HRABAS')
    self:addProperty('TQN_HODOM',     FWSX3Util():GetDescription( 'TQN_HODOM' ),     'number', FWX3Titulo( 'TQN_HODOM' ),     'TQN_HODOM' )
    self:addProperty('TQN_QUANT',     FWSX3Util():GetDescription( 'TQN_QUANT' ),     'number', FWX3Titulo( 'TQN_QUANT' ),     'TQN_QUANT' )
    self:addProperty('TQN_VALUNI',    FWSX3Util():GetDescription( 'TQN_VALUNI' ),    'number', FWX3Titulo( 'TQN_VALUNI' ),    'TQN_VALUNI')
    self:addProperty('TQN_VALTOT',    FWSX3Util():GetDescription( 'TQN_VALTOT' ),    'number', FWX3Titulo( 'TQN_VALTOT' ),    'TQN_VALTOT')
    self:addProperty('TQN_CODMOT',    FWSX3Util():GetDescription( 'TQN_CODMOT' ),    'string', FWX3Titulo( 'TQN_CODMOT' ),    'TQN_CODMOT')
    self:addProperty('TQN_USUARI',    FWSX3Util():GetDescription( 'TQN_USUARI' ),    'string', FWX3Titulo( 'TQN_USUARI' ),    'TQN_USUARI')
    self:addProperty('TQN_CCUSTO',    FWSX3Util():GetDescription( 'TQN_CCUSTO' ),    'string', FWX3Titulo( 'TQN_CCUSTO' ),    'TQN_CCUSTO')
    self:addProperty('TQN_CODCOM',    FWSX3Util():GetDescription( 'TQN_CODCOM' ),    'string', FWX3Titulo( 'TQN_CODCOM' ),    'TQN_CODCOM')
    self:addProperty('TQN_POSTO',     FWSX3Util():GetDescription( 'TQN_POSTO' ),     'string', FWX3Titulo( 'TQN_POSTO' ),     'TQN_POSTO' )
    self:addProperty('TQN_LOJA',      FWSX3Util():GetDescription( 'TQN_LOJA' ),      'string', FWX3Titulo( 'TQN_LOJA' ),      'TQN_LOJA'  )
    self:addProperty('T9_CODBEM',     FWSX3Util():GetDescription( 'T9_CODBEM' ),     'string', FWX3Titulo( 'T9_CODBEM' ),     'T9_CODBEM' )
    self:addProperty('T9_PLACA',      FWSX3Util():GetDescription( 'T9_PLACA' ),      'string', FWX3Titulo( 'T9_PLACA' ),      'T9_PLACA'  )
    self:addProperty('T9_TPCONTA',    FWSX3Util():GetDescription( 'T9_TPCONTA' ),    'string', FWX3Titulo( 'T9_TPCONTA' ),    'T9_TPCONTA')
    self:addProperty('T9_CCUSTO',     FWSX3Util():GetDescription( 'T9_CCUSTO' ),     'string', FWX3Titulo( 'T9_CCUSTO' ),     'T9_CCUSTO' )
    self:addProperty('T9_CODFAMI',    FWSX3Util():GetDescription( 'T9_CODFAMI' ),    'string', FWX3Titulo( 'T9_CODFAMI' ),    'T9_CODFAMI')
    self:addProperty('TQF_NREDUZ',    FWSX3Util():GetDescription( 'TQF_NREDUZ' ),    'string', FWX3Titulo( 'TQF_NREDUZ' ),    'TQF_NREDUZ')
    self:addProperty('TQF_CIDADE',    FWSX3Util():GetDescription( 'TQF_CIDADE' ),    'string', FWX3Titulo( 'TQF_CIDADE' ),    'TQF_CIDADE')
    self:addProperty('TQF_CNPJ',      FWSX3Util():GetDescription( 'TQF_CNPJ' ),      'string', FWX3Titulo( 'TQF_CNPJ' ),      'TQF_CNPJ'  )
    self:addProperty('TQF_CONVEN',    FWSX3Util():GetDescription( 'TQF_CONVEN' ),    'string', FWX3Titulo( 'TQF_CONVEN' ),    'TQF_CONVEN')
    self:addProperty('TQM_UM',        FWSX3Util():GetDescription( 'TQM_UM' ),        'string', FWX3Titulo( 'TQM_UM' ),        'TQM_UM'    )
    self:addProperty('TQM_CONVEN',    FWSX3Util():GetDescription( 'TQM_CONVEN' ),    'string', FWX3Titulo( 'TQM_CONVEN' ),    'TQM_CONVEN')
    self:addProperty('TQM_NOMCOM',    FWSX3Util():GetDescription( 'TQM_NOMCOM' ),    'string', FWX3Titulo( 'TQM_NOMCOM' ),    'TQM_NOMCOM')
    self:addProperty('TT8_MEDIA',     FWSX3Util():GetDescription( 'TT8_MEDIA' ),     'number', FWX3Titulo( 'TT8_MEDIA' ),     'TT8_MEDIA' )
    self:addProperty('DA4_NOME',      FWSX3Util():GetDescription( 'DA4_NOME' ),      'string', FWX3Titulo( 'DA4_NOME' ),      'DA4_NOME'  )
    self:addProperty('T6_MEDIA1',     FWSX3Util():GetDescription( 'T6_MEDIA1' ),     'string', FWX3Titulo( 'T6_MEDIA1' ),     'T6_MEDIA1' )
    self:addProperty('T6_TIPO1',      FWSX3Util():GetDescription( 'T6_TIPO1' ),      'string', FWX3Titulo( 'T6_TIPO1' ),      'T6_TIPO1'  )
    self:addProperty('T6_UNIDAD1',    FWSX3Util():GetDescription( 'T6_UNIDAD1' ),    'string', FWX3Titulo( 'T6_UNIDAD1' ),    'T6_UNIDAD1')
    self:addProperty('CTT_OPERAC',    FWSX3Util():GetDescription( 'CTT_OPERAC' ),    'string', FWX3Titulo( 'CTT_OPERAC' ),    'CTT_OPERAC')
    self:addProperty('TSZ_DESSER',    FWSX3Util():GetDescription( 'TSZ_DESSER' ),    'string', FWX3Titulo( 'TSZ_DESSER' ),    'TSZ_DESSER')
    self:addProperty('MEDIA',         'MEDIA',                                       'number', 'MEDIA',                       'TQN_KMROD' )
    self:addProperty('PRIMEIROABAST', 'PRIMEIROABAST',                               'number', 'PRIMEIROABAST',               'TQN_LOJA'  )
    self:addProperty('KMPERC',        'KMPERC',                                      'number', 'KMPERC',                      'TQN_KMROD' )
    self:addProperty('VALTPCONTA',    'VALTPCONTA',                                  'string', 'VALTPCONTA',                  'T6_NOME'   )

return self:oSchema
