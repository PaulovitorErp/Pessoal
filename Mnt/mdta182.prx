#INCLUDE "MDTA182.ch"
#Include "Protheus.ch"


//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA182
Cadastro de Agentes e Limites de Tolerancia

@type function

@source MDTA182.prx

@author Denis Hyroshi de Souza
@since 20/11/07

@sample MDTA182()

@return Sempre verdadeiro.
/*/
//---------------------------------------------------------------------
Function MDTA182()

	// Armazena variaveis p/ devolucao (NGRIGHTCLICK)
	Local aNGBEGINPRM := NGBEGINPRM( Nil, Nil, { 'TMA', { 'TLK' , 'TJC' } } )

	//----------------------------------------------------------------
	//| Define Array contendo as Rotinas a executar do programa      |
	//| ----------- Elementos contidos por dimensao ------------     |
	//| 1. Nome a aparecer no cabecalho                              |
	//| 2. Nome da Rotina associada                                  |
	//| 3. Usado pela rotina                                         |
	//| 4. Tipo de Transa‡„o a ser efetuada                          |
	//|    1 - Pesquisa e Posiciona em um Banco de Dados             |
	//|    2 - Simplesmente Mostra os Campos                         |
	//|    3 - Inclui registros no Bancos de Dados                   |
	//|    4 - Altera o registro corrente                            |
	//|    5 - Remove o registro corrente do Banco de Dados          |
	//----------------------------------------------------------------
	Private aRotina   := MenuDef()
	Private cCadastro := OemtoAnsi( STR0001 ) // "Agentes"

	Private aChkDel  := {}

	// Endereca a funcao de BROWSE
	dbSelectArea( "TMA" )
	dbSetOrder( 1 )
	mBrowse( 6, 1, 22, 75, "TMA" )

	// Devolve variaveis armazenadas (NGRIGHTCLICK)
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional

@author Denis Hyroshi de Souza
@since 20/11/07

@sample MDTA182()

@return	aRotina:
	    	1. Nome a aparecer no cabecalho
	    	2. Nome da Rotina associada
	    	3. Reservado
	    	4. Tipo de Transação a ser efetuada:
	    		1 - Pesquisa e Posiciona em um Banco de Dados
	    		2 - Simplesmente Mostra os Campos
	    		3 - Inclui registros no Bancos de Dados
	    		4 - Altera o registro corrente
	    		5 - Remove o registro corrente do Banco de Dados
	    	5. Nivel de acesso
	    	6. Habilita Menu Funcional

/*/
//---------------------------------------------------------------------
Static Function MenuDef()

	//Variável de busca das informações
	Local aRotina := { { STR0002, "AxPesqui", 0, 1 }, ;	 //"Pesquisar"
					{ STR0003, "MDT182CAD", 0, 2 }, ;    //"Visualizar"
					{ STR0004, "MDT182CAD", 0, 3 }, ;    //"Incluir"
					{ STR0005, "MDT182CAD", 0, 4 }, ;    //"Alterar"
					{ STR0006, "MDT182CAD", 0, 5, 3 }, ; //"Excluir"
					{ STR0007, "MDT182TOL", 0, 4 } }	 //"Lim. Tolerância"

Return aRotina

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT182CAD
Cadastro de Agentes.

@author Hugo R. Pereira
@since 07/01/2013
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT182CAD( cAlias, nRecno, nOpcx )

	Local lProdQmc   := NGCADICBASE("TJC_CODPRO","A","TJC",.F.)
	Local cCodAgente := TMA->TMA_AGENTE
	Local nRet       := 0

	Private bNGGrava := {|| CHKMTD182();
			.And. IIf( nOpcx != 5 , MDTObriEsoc( "TMA" , !( Inclui .Or. Altera ) ), .T. ) }

	Private aChoice  := {}, aVarNao := {}
	Private aTelaOld := If( Type( "aTela" ) == "A", aClone( aTela ), Nil )
	Private aGetsOld := If( Type( "aGets" ) == "A", aClone( aGets ), Nil )
	Private aOldRot	 :=	If( Type( "aRotina" ) == "A", aClone( aRotina ), Nil )

	Private cTudoOk, cLinOk
	Private aGetNao, cGetWhile
	Private cGetMake, cGetKey, cGetAlias

	//Definição dos Memos
	Private aMemos		:= {}

	If NGCADICBASE("TMA_PATSYP","A","TMA",.F.)
		aAdd( aMemos , { "TMA_PATSYP" , "TMA_MPATOG" } )
		aAdd( aMemos , { "TMA_SINSYP" , "TMA_MSINTO" } )
	EndIf

	aTela	:= {}
	aGets	:= {}
	aRotina	:= MenuDef()

	If lProdQmc
		cTudoOk   := "MDT182LOK()"
		cLinOk    := "MDT182LOK()"
		aGetNao   := { {"TJC_AGENTE", "M->TMA_AGENTE"}, {"TJC_DESAGE", " "} }
		cGetAlias := "TJC"
		cGetWhile := "TJC->TJC_FILIAL == xFilial('TJC') .And. TJC->TJC_AGENTE == M->TMA_AGENTE"
		cGetMake  := "TMA->TMA_AGENTE"
		cGetKey   := "M->TMA_AGENTE + M->TJC_CODPRO"

		dbSelectArea("TJC")
		dbSetOrder(1)

		nRet := NGCAD02(cAlias, nRecno, nOpcx)
	Else
		nRet := NGCAD01(cAlias, nRecno, nOpcx)
	EndIf

	If nRet == 1 .And. nOpcx == 5
		
		dbSelectArea( "TLK" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TLK" ) + cCodAgente )
		
		While !Eof() .And. xFilial( "TLK" ) == TLK->TLK_FILIAL .And. cCodAgente == TLK->TLK_AGENTE
		
			RecLock("TLK",.F.,.T.)
			dbDelete()
			TLK->(MsunLock())
			Dbskip()

		End

	EndIf

	If Type("aTelaOld") == "A"
		aTela := aClone( aTelaOld )
	EndIf
	If Type("aGetsOld") == "A"
		aGets := aClone( aGetsOld )
	EndIf

 	If Type("aOldRot") == "A"
		aRotina := aClone( aOldRot )
	EndIf

	dbSelectArea("TMA")

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT182TOL
	Cadastro dos Limites de Tolerancia
	@type  Function
	@author Denis Hyroshi Souza
	@since 20/11/2007
	@param cAlias, Caracter, Alias posicionado
	@param nReg, Numeric, recno do registro posicionado
	@param nOpcx, Numeric, transação selcionada de acordo com o aRotina
	@return Sempre verdadeiro
/*/
//---------------------------------------------------------------------
Function MDT182TOL( cAlias, nReg, nOpcx )

	Local bCampo
	Local oPnlScr
	Local oPnlFields
	Local oPnlGDados
	Local oDlg, oGet
	Local i
	Local aNao  := { "TLK_AGENTE", "TLK_NOMAGE" }
	Local nInd
	Local cSeek := ''
	Local cCond := ''

	Private aCOLS
	Private oMenu
	Private aSize := MsAdvSize( , .F., 430 ), aObjects := {}
	Private aTELA[0][0], aGETS[0], aHeader[0], nUsado:=0

	aAdd( aObjects, { 050, 050, .T., .T. } )
	aAdd( aObjects, { 020, 020, .T., .T. } )
	aAdd( aObjects, { 100, 100, .T., .T. } )
	
	aInfo   := { aSize[1], aSize[2], aSize[3], aSize[4], 0, 0 }
	aPosObj := MsObjSize( aInfo, aObjects, .T. )

	//Verifica se existe algum dado no arquivo
	dbSelectArea( cAlias )
	dbSetOrder( 1 )
	For i := 1 To FCount()
		x   := "M->" + FieldName( i )
		&x. := FieldGet( i )
	Next i

	//Monta a entrada de dados do arquivo
	bCampo := { |nCpo| Field( nCpo ) }

	nInd  := 1
	cSeek := TMA->TMA_AGENTE
	cCond := 'TLK_FILIAL+TLK_AGENTE == "' + xFilial("TLK") + TMA->TMA_AGENTE + '"'

	//Monta o aHeader e o aCols
	FillGetDados( nOpcx, "TLK", nInd, cSeek, {||}, {||.T.}, aNao,,,, { | | NGMontaaCols( "TLK", cSeek, cCond,, nInd ) } )

	If Empty( aCols )
	   aCols := BlankGetd( aHeader )
	EndIf

	PutFileInEof("TLK")

	nOpca := 0
	DEFINE MSDIALOG oDlg TITLE cCadastro STYLE nOr( WS_POPUP, WS_VISIBLE ) From aSize[7],0 To aSize[6],aSize[5] Of oMainWnd Pixel

		oPnlScr := tPanel():New(,,, oDlg,,,,CLR_BLACK, CLR_WHITE, 100, 100 )
			oPnlScr:Align := CONTROL_ALIGN_ALLCLIENT

		oPnlFields := tPanel():New(,,, oPnlScr,,,,CLR_BLACK, CLR_WHITE, 10, 25 )
			oPnlFields:Align := CONTROL_ALIGN_TOP

		oPnlGDados := tPanel():New(,,, oPnlScr,,,,CLR_BLACK, CLR_WHITE, 100, 100 )
			oPnlGDados:Align := CONTROL_ALIGN_ALLCLIENT

			@ 0.7, 1 SAY OemtoAnsi( STR0008 ) Of oPnlFields//"Agente"
			@ 0.5, 4 MSGET TMA->TMA_AGENTE SIZE 20, 10 WHEN .F. Of oPnlFields
			@ 0.7, 10 SAY OemToAnsi( STR0009 ) Of oPnlFields//"Nome Agente"
			@ 0.5, 15 MSGET TMA->TMA_NOMAGE SIZE 150, 10 WHEN .F. Of oPnlFields

			dbSelectArea( "TLK" )
			oGet := MSGetDados():New( 0, 0, aPosObj[3, 3], aPosObj[3, 4], nOpcx,;
				"NG182LinOk", "NG182TudOk", "", .T.,,,, 3000,,,,, oPnlGDados )
				oGet:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

			NGPOPUP( asMenu, @oMenu )
			oDlg:bRClicked:= { |o,x,y| oMenu:Activate( x, y, oDlg ) }

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar( oDlg, { || nOpca := 1,;
			IIf( oGet:TudoOk(), oDlg:End(), nOpca := 0 ) },;
			{ || oDlg:End(), nOpca := 0 } )

	If nOpcA == 1
		Begin Transaction
			If NG182GRAV( "TLK", nOpca )
				//Processa Gatilhos
				EvalTrigger()
			EndIf
		End Transaction
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} NG182GRAV
	Grava os dados na TLK
	@type  Function
	@author Denis
	@since 11/08/2000
	@param cAlias, Caracter, Alias posicionado
	@param nOpcao, Numeric, transação selcionada de acordo com o aRotina
	@return Sempre verdadeiro
/*/
//---------------------------------------------------------------------
Function NG182GRAV( cAlias, nOpcao )
	
	Local nx, i, nMaxArray
	Local aBack := aClone( aCols )
	Local nPosQtd := aScan( aHeader, { |x| AllTrim( Upper( X[2] ) ) == "TLK_DEQTDE" } )
	Local nNormat := aScan( aHeader, { |x| AllTrim( Upper( X[2] ) ) == "TLK_NORMAT" } )

	Local cNormat := ""
	
	dbSelectArea( cAlias )

	// verifica se o ultimo elemento do array esta em branco
	aCols := {}
	aEval( aBack, { |x| If( !Empty( x[1] ),  AAdd( aCols, x ), NIL ) } )
	nMaxArray := Len( aCols )

	If nMaxArray <= 0
		Return .F.
	EndIf

	For nX := 1 To nMaxArray
		
		If nNormat > 0
			cNormat := aCols[nx, nNormat]
		EndIf

		If aCols[nx, Len( aCols[nx] )]
			
			dbSelectArea( "TLK" )
			dbSetOrder( 1 )

			If dbSeek( xFilial( "TLK" ) + TMA->TMA_AGENTE + cNormat + Str( aCols[nx, nPosQtd], 9, 3 ) )
				
				RecLock( cAlias, .F., .T. )
				dbDelete()
				MsunLock( cAlias )

			EndIf

			dbSelectArea( cAlias )
			Loop

		EndIf

		If !Empty( aCols[nx, nPosQtd] )

			dbSelectArea( "TLK" )
			dbSetOrder( 1 )
		
			If dbSeek( xFilial( "TLK" ) + TMA->TMA_AGENTE + cNormat + Str(aCols[nx, nPosQtd], 9, 3 ) )
				RecLock( cAlias, .F. )
			Else
				RecLock( cAlias, .T. )
			EndIf

			dbSelectArea( "TLK" )
			dbSetOrder( 1 )
		
			For i := 1 To FCount()
		
				If FieldName(i) == "TLK_FILIAL" .Or. FieldName(i) == "TLK_AGENTE" .Or. ;
					FieldName(i) == "TLK_NOMAGE" .Or. FieldName(i) == "TLK_DEQTCH" .Or. ;
					FieldName(i) == "TLK_ATQTDE" .Or.;
					aScan( aHeader, { |x| AllTrim( Upper( X[2] ) ) == FieldName( i ) } ) < 1

					Loop
				EndIf

				x   := "M->" + FieldName(i)
				&x. := aCols[nx, aScan( aHeader, {|x| AllTrim( Upper( X[2] ) ) == FieldName( i ) } )]
				y   := "TLK->" + FieldName(i)
				&y := &x

			Next i

			TLK->TLK_FILIAL := xFilial( "TLK" )
			TLK->TLK_AGENTE := TMA->TMA_AGENTE
			TLK->TLK_DEQTCH := Str( TLK->TLK_DEQTDE, 9, 3 )
			TLK->( MsunLock() )

		EndIf
	Next nX

	/*dbSelectArea( "TLK" )
	dbSetOrder( 1 )
	dbSeek( xFilial( "TLK" ) + TMA->TMA_AGENTE )
	While !Eof() .And. xFilial( "TLK" ) == TLK->TLK_FILIAL .And. TMA->TMA_AGENTE == TLK->TLK_AGENTE

		If aScan( aCols, {|x| x[nPosQtd] == TLK->TLK_DEQTDE } ) == 0

			RecLock( "TLK", .F., .T. )
			dbDelete()
			TLK->( MsunLock() )

		EndIf
		Dbskip()
	End*/

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} NG182LinOk
	Critica se a linha está Ok
	@type  Function
	@author Denis
	@since 20/11/2007
	@param o, object?, ?
	@return Sempre verdadeiro
/*/
//---------------------------------------------------------------------
Function NG182LinOk(o)
	
	Local nX
	Local lEqNormat
	Local lRet := .T.

	Local nDeQtde := aScan( aHeader, { |x| Trim( Upper(x[2]) ) == "TLK_DEQTDE" } )
	Local nHrLimi := aScan( aHeader, { |x| Trim( Upper(x[2]) ) == "TLK_HRLIMI" } )
	Local nGrau   := aScan( aHeader, { |x| Trim( Upper(x[2]) ) == "TLK_GRAU"   } )
	Local nNormat := aScan( aHeader, { |x| Trim( Upper(x[2]) ) == "TLK_NORMAT" } )

	If !aCols[n][len( aCols[n] )]

		If nDeQtde > 0
			
			For nX := 1 To Len( aCols )
			
				If nX <> n .And. !aCols[nX][len( aCols[nX] )]
					
					lEqNormat := IIf( nNormat > 0, aCols[nX, nNormat] == aCols[n, nNormat], .T. )
					
					If ( lEqNormat; 
						.And. ( ;
						( aCols[nX, nDeQtde] == aCols[n, nDeQtde];
							.And. aCols[nX, nHrLimi] == aCols[n, nHrLimi] );
						.Or.;
						( aCols[nX, nDeQtde] == aCols[n, nDeQtde];
							.And. aCols[nX, nGrau] == aCols[n, nGrau] );
						) )
							Help(" ",1,"JAEXISTINF")
							lRet := .F.
							Exit
					EndIf

				EndIf

			Next nX

		EndIf

		If lRet
		
			dbSelectArea( "TLK" )
			dbSetOrder( 1 )
			dbSeek( xFilial( "TLK" ) + TMA->TMA_AGENTE )
			
			For nX := 1 To Len( aCols )
				
				Do Case

					Case Empty( aCols[n, nDeQtde] )
						
						ShowHelpDlg( STR0015, { STR0016 }, 1, { STR0019 }, 2 )
						lRet := .F.
						Exit

					Case Empty( aCols[n, nHrLimi] );
						.Or. Empty( SubSTr( aCols[n, nHrLimi], 4, 5 ) );
						.And. Empty( SubSTr( aCols[n, nHrLimi], 1, 2 ) )

						ShowHelpDlg( STR0015, { STR0017 }, 1, { STR0019 }, 2 )
						lRet := .F.
						Exit

					Case Empty( aCols[n, nGrau] )

						ShowHelpDlg( STR0015, { STR0018 }, 1, { STR0019 }, 2 )
						lRet := .F.
						Exit
					
					Case nNormat > 0 .And. Empty( aCols[n, nNormat] )
						
						ShowHelpDlg( STR0015, { STR0023 }, 1, { STR0019 }, 2 )
						lRet := .F.
						Exit

				EndCase

			Next nX

		EndIf

	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} NG182TudOk
	Critica se a nota toda esta' Ok
	@type  Function
	@author Denis
	@since 20/11/2007
	@param o, object?, ?
	@return Sempre verdadeiro
/*/
//---------------------------------------------------------------------
Function NG182TudOk(o)
	Private nColuna := Len(aCols[n])

	ASORT(aCols,,, { |x, y| x[nColuna] .and. !y[nColuna] } )
Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} CHKMTD182
Funcao para verificar validacoes p/ o campo substancia ati.

@author Rodrigo Soledade
@since 11/07/11

@sample CHKMTD182()

@return lRet - Determina se o registro é valido
/*/
//---------------------------------------------------------------------
Function CHKMTD182()

	Local lRet := .T.
	Local aAreaTN0 := {}

	If ALTERA .And. M->TMA_GRISCO <> TMA->TMA_GRISCO
		
		aAreaTN0 := GetArea()
		
		dbSelectArea( "TN0" )
		dbSetOrder( 2 )//TN0_FILIAL+TN0_AGENTE+TN0_NUMRIS
		
		If dbSeek( xFilial( "TN0" ) + TMA->TMA_AGENTE )
		
			MsgStop( STR0022, STR0010 )  //"O Agente esta vinculado ao um Risco Ambiental. Não é permitido alterações do 'Grupo'."//"ATENÇÃO"
			lRet := .F.

		EndIf

		RestArea( aAreaTN0 )

	EndIf

	If M->TMA_GRISCO == "2" .and. Empty(M->TMA_SUBATI)

		MsgStop( STR0011, STR0010 )  //"Para os agentes de tipo químico, é necessário informar sua substância ativa."//"ATENÇÃO"
		lRet := .F.

	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT182VAL
Funcao que faz a validacao do campo TMA_GRISCO, se for diferente de Biologico
os campos criados ter retorno falso.

@author  Elynton Fellipe Bazzo
@since  20/12/2012
@version 01
/*/
//---------------------------------------------------------------------
Function MDT182VAL()

	If M->TMA_GRISCO <> "3"
		M->TMA_VIASTR  := Space( TAMSX3("TMA_VIASTR")[1] )
		M->TMA_ESTUDO  := Space( TAMSX3("TMA_ESTUDO")[1] )
		M->TMA_PERSIS  := Space( TAMSX3("TMA_PERSIS")[1] )
		M->TMA_VIRULE  := Space( TAMSX3("TMA_VIRULE")[1] )
		M->TMA_PATOGE  := Space( TAMSX3("TMA_PATOGE")[1] )
		M->TMA_ENTRAD  := Space( TAMSX3("TMA_ENTRAD")[1] )
		M->TMA_TRANSM  := Space( TAMSX3("TMA_TRANSM")[1] )
		M->TMA_FONTES  := Space( TAMSX3("TMA_FONTES")[1] )
		M->TMA_CLASSI  := Space( TAMSX3("TMA_CLASSI")[1] )
	EndIf

	If ( IsInCallStack( "MDTA182" ) .Or. IsInCallStack( "MDTA180" ) ) .And. Type( "oGet" ) == "O"
		If M->TMA_GRISCO != "2"
			n     := 1
			aCols := BlankGetD( aHeader )
		EndIf
		oGet:oBrowse:Refresh()
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT182LOK
Validcao para getdados de Agente x Produto Quimico. [TMA x TJC]

@author Hugo R. Pereira
@since 07/01/2013
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT182LOK()

	Local nCodPro := aScan( aHeader, {|x| AllTrim(x[2]) == "TJC_CODPRO" } ) // Codigo do Produto Quimico
	Local lLinOk  := .T., nLin

	// Verificacoes de controle, e exclusao de linha
	If M->TMA_GRISCO != "2" .Or. aCols[n][Len(aCols[n])]
		Return .T.
	EndIf

	If Len( aCols ) == 1 .And. Empty( aCols[1][nCodPro] )
		Return .T.
	EndIf

	// Avalia campos obrigatorios
	If Empty( aCols[n][nCodPro] ) // Codigo do Produto Quimico
		Help(1," ","OBRIGAT2",,aHeader[nCodPro][1],3,0)
		Return .F.
	EndIf

	// Verifica registro duplicado
	For nLin := 1 To Len( aCols )
		If !aCols[nLin][Len(aCols[nLin])] .And. ( n != nLin )

			If aCols[nLin][nCodPro] == aCols[n][nCodPro]
				Help( " ", 1, "JAEXISTINF" )
				lLinOk := .F.
				Exit
			EndIf
		EndIf
	Next nLin

	PutFileInEof( "TJC" )

Return lLinOk

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT182EXPQ
Valida existencia de referencia do campo Produto Quimico. [TJC e TJD]

@param cField Conteudo do campo a ser avaliado.

@author Hugo R. Pereira
@since 07/01/2013
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT182EXPQ(cField, lExChav)

	Local lRet := .F.

	Default lExChav := .F.

	lRet := IIf( !lExChav, ExistCpo( "TJB", cField, 1 ), ExistChav( "TJB", cField, 1 ) )

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT182WHPR
Consistencia no termo When do campo Produto Quimico.
- Agente Quimico [TMA_GRISCO == '2'].

@author Hugo R. Pereira
@since 07/01/2013
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT182WHPR

	Local lEnable := .T.

	If IsInCallStack("MDTA182") .OR. IsInCallStack("MDTA180")// Rotina de Agentes //Rotina de Riscos
		lEnable := M->TMA_GRISCO == "2"
	EndIf

Return lEnable

//---------------------------------------------------------------------
/*{Protheus.doc} MDT182VLGRI
Funcao que faz a validação do campo TMA_GRISCO.
- Se for diferente de Biologico o campo Tipo Entrada será apagado.
- Se for diferente de Químimo o campo Subs. Ativa será apagado.

@author  	Elynton Fellipe Bazzo
@since  	24/04/2013
@uso   		MDTA182
@version 	MP11
*/
//---------------------------------------------------------------------
Function MDT182VLGRI()

	If M->TMA_GRISCO <> "3" // Se o campo for diferente de Biológico.
		M->TMA_TIPENT  := Space( TAMSX3("TMA_TIPENT")[1] )
	EndIf

	If M->TMA_GRISCO <> "2" // Se o campo for diferente de Químico.
   		M->TMA_SUBATI  := Space( TAMSX3("TMA_SUBATI")[1] )
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT182VLD
	Funçao responsável por manter e executar as regras do X3_VALID
	desta rotina
	@type  Function
	@author bruno.souza
	@since 13/09/2022
	@param cField, caracter, Campo validado
	@return lOk, boolean, resultado da aplicação da regra no campo validado
	@example
	MDT182VLD('TLK_NORMAT')
/*/
//---------------------------------------------------------------------
Function MDT182VLD( cField )
Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTGetTLim
	Retorna o limite de tolerância de acordo com o agente passado
	@type Function
	@author bruno.souza
	@since 03/11/2022
	@param cBranch, caracter, filial posicionada
	@param cAgent, caracter, Código do agente de risco
	@param nAgentQt, Numeric, Quantidade do agente de risco
	@param cNormat, caracter, Opção da normativa: 1=NR-15; 2=ACGIH
	@param lNrmSingle, boolean, Indica se considera apenas a norma do cNormat
	@return cTolLim, caracter, Limite de tolerância
	
/*/
//---------------------------------------------------------------------
Function MDTGetTLim( cBranch, cAgent, nAgentQt, cNormat, lNrmSingle )
	
	Local nTolLim := 0
	Local lFirst  := .T.
	Local cWhile := '.F.'

	Default cBranch := xFilial( 'TLK' )
	Default cNormat := ''
	Default lNrmSingle := .F.

	dbSelectArea( 'TLK' )
	dbSetOrder( 1 )
	
	If dbSeek( xFilial( 'TLK' ) + cAgent + cNormat )
		cWhile := "!Eof() .And. xFilial( 'TLK' ) == TLK->TLK_FILIAL .And. cAgent == TLK->TLK_AGENTE .And. cNormat == TLK->TLK_NORMAT
	ElseIf dbSeek( xFilial( 'TLK' ) + cAgent ) .And. !lNrmSingle
		cWhile := "!Eof() .And. xFilial( 'TLK' ) == TLK->TLK_FILIAL .And. cAgent == TLK->TLK_AGENTE"
	EndIf

	While &(cWhile)

		If ( TLK->TLK_DEQTDE > nTolLim );
			.Or. ( TLK->TLK_DEQTDE > nAgentQt .And. TLK->TLK_DEQTDE < nTolLim );
			.Or. lFirst
			
			nTolLim := TLK->TLK_DEQTDE

		EndIf

		lFirst := .F.
		dbSkip()
	
	End
		
			
Return cValToChar( nTolLim )

//------------------------------------------------------------------------------------------------------------------------------------//
/*/{Protheus.doc} MDT182ALL
	Consiste alteraçao do campo passado TMA_TIPADI
	@type  Function
	@author mdt developer
	@since a long time ago
	@param cP_PARA, caracter, Campo validado
	@return lRet, boolean, resultado da aplicação da regra no campo validado
	@example
	MDT182ALL('TMA_TIPADI')
/*/
//---------------------------------------------------------------------
Function MDT182ALL( cP_PARA )

	Local cOAlias := Alias()
	Local lRet := .T.
	Local aFord 
	Local cMsg := ""

	Default cP_PARA := ""

	If cP_PARA == "TMA_TIPADI" .And. ALTERA;
		.And. TMA->TMA_TIPADI != M->TMA_TIPADI
		
		aFord := { TN0->( IndexOrd() ), TN0->( Recno() ) }
		TN0->( DbSetOrder( 2 ) )
		TN0-> ( DbSeek( xFilial( "TN0" ) + M->TMA_AGENTE, .T. ) )
	
		Do While TN0->( !Eof() );
			.And. TN0->TN0_FILIAL == xFilial( "TN0" );
			.And. TN0->TN0_AGENTE == M->TMA_AGENTE
			
			If Empty( TMA->TMA_TIPADI ) .And. Empty( TN0->TN0_PERINT )
				cMsg := cMsg + IIf( Empty( cMsg ), "", ", " ) + AllTrim( TN0->TN0_NUMRIS )
			
			Else
				If (; 
					( TN0->TN0_PERINT != "5" .Or. Empty( M->TMA_TIPADI ) );
						.And.!Empty( TN0->TN0_PERINT );
						);
					.Or. !Empty( M->TMA_TIPADI ) .And. Empty( TN0->TN0_PERINT )

					//" nao pode ser alterado devido a " ## " informada no Risco !" ## "Atencao"
					MsgInfo( AVSX3( "TMA_TIPADI", 5 ) + STR0012 +;
						AVSX3( "TN0_PERINT", 5 ) + STR0013, STR0010 ) 
					lRet := .F.
					Exit
				EndIf

			EndIf

			TN0->(DbSkip())
		EndDo

		If lRet .And. !Empty(cMsg)
			//"Após confirmação do Agente, rever o(s) seguinte(s) Risco(s):" ## "Atenção"
			MsgInfo( STR0014 + CHR(13) + CHR(10 ) +;
					"(" + cMsg + ")", STR0010 ) 
		EndIf

		TN0->(DbSetOrder(aFord[1])) 
		TN0->(DBGOTO(aFord[2]))

	EndIf

	If !Empty(cOAlias)
		DbSelectArea(cOAlias)
	EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} mdta182X3V
Função utilizada no X3_VALID dos campos da rotina

@author Gabriel Sokacheski
@since 02/11/2023

@param cCampo, nome do campo a ser validado

@return lRet, retorno da validação do campo
/*/
//-------------------------------------------------------------------
Function mdta182X3V( cCampo )
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} mdta182X3W
Função utilizada no X3_WHEN dos campos da rotina

@author Gabriel Sokacheski
@since 03/04/2022

@param cCampo, nome do campo a ser verificado

@return lRet, retorno da permissão para edição
/*/
//-------------------------------------------------------------------
Function mdta182X3W( cCampo )

    Local lRet      := .T.

    Do Case
        Case cCampo == 'TMA_PROCES'
            lRet := M->TMA_ESOC == '05.01.001'
    End Case

Return lRet
