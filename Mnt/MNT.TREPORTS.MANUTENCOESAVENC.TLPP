#include "msobject.ch"
#include "totvs.framework.treports.integratedprovider.th"
 
namespace totvs.protheus.ManutAVencSmartViewBusinessObject

Static _TF_FILIAL  := 1
Static _TF_CODBEM  := 2
Static _TF_TIPACOM := 3
Static _TF_TOLERA  := 4
Static _TF_TOLECON := 5
Static _TF_CONMANU := 6
Static _TF_INENMAN := 7 
Static _TF_SERVICO := 8
Static _TF_SEQRELA := 9 
Static _T9_NOME    := 10
Static _T9_CONTACU := 11
Static _T9_CCUSTO  := 12
Static _T9_CENTRAB := 13
Static _T9_CODFAMI := 14
Static _T6_NOME    := 15
Static _TPE_CONTAC := 16
Static _CTT_DESC01 := 17
Static _HB_NOME    := 18
Static _DTPROXMAN  := 19
// Indices dos campos dentro do aDados

//-------------------------------------------------------------------
/*/{Protheus.doc} ManutAVencSmartViewBusinessObject
Objeto de negócio de abastecimentos por filial
Tabelas: STF, ST9, CTT, SHB, ST6, TPE.
@type Classe
 
@author João Ricardo Santini Zandoná
@since 29/12/2023
@version P11
@return Nil
/*/
//-------------------------------------------------------------------
@totvsFrameworkTReportsIntegratedProvider(active=.T., team="SIGAGFR", tables="STF", name="ManutAVencSmartViewBusinessObject", country="ALL", initialRelease="12.1.2310")
class ManutAVencSmartViewBusinessObject from totvs.framework.treports.integratedprovider.IntegratedProvider
    public method new() as object
    public method getAreas() as array
    public method getDescription() as character
    public method getData() as object
    public method getSchema() as object
    public method mntOfsc() as array
    public method mntLGPD() as array
    public method mntAppend() as object
endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método Construtor do Objeto de Negócio
@type Método
 
@author João Ricardo Santini Zandoná
@since 29/12/2023
@version P11
@return objeto, Retorna o próprio objeto
/*/
//-------------------------------------------------------------------
method new() as object class ManutAVencSmartViewBusinessObject
    _Super:new()
    self:setDisplayName("Manutenções a Vencer")
    self:SetPergunte("MNT011")
return self
 
//-------------------------------------------------------------------
/*/{Protheus.doc} getDescription
Descrição do Objeto de Negócio
@type Método
 
@author João Ricardo Santini Zandoná
@since 29/12/2023
@version P11
@return caractere, Conteúdo da descrição do Objeto de Negócios
/*/
//-------------------------------------------------------------------
method getDescription() as character class ManutAVencSmartViewBusinessObject
return "Tabelas: STF, ST9, CTT, SHB, ST6, TPE."

//-------------------------------------------------------------------
/*/{Protheus.doc} getAreas
Áreas do menu que o Objeto de Negócio deve ficar
@type Método
 
@author João Ricardo Santini Zandoná
@since 29/12/2023
@version P11
@return array, Retorna um array contendo as sessões do Menu em que o Objeto de Negócio deve aparecer
/*/
//-------------------------------------------------------------------
method getAreas() as array class ManutAVencSmartViewBusinessObject
return {"Manutenção", "Manutenções a Vencer"}

//-------------------------------------------------------------------
/*/{Protheus.doc} GetData
Método responsável pelo processamento dos dados enviados pelo 
Objeto de Negócio
@type Método

@author João Ricardo Santini Zandoná
@since 29/12/2023
@version P11

@param nPage, numerico, Número da página atual
@param oFilter, objeto, Filtros aplicados pelo usuário

@return objeto, Retorna o próprio objeto
/*/
//-------------------------------------------------------------------
method getData(nPage as numeric, oFilter as object) as object class ManutAVencSmartViewBusinessObject
    
    Local cQuery     as character
    Local cAlias     as character
    Local cDtProx    as character
    Local cIsNull    as character
    Local cBanco     := Upper(TCGetDB())
    Local nSkip      as numeric
    Local nCount     as numeric
    Local jParams    as json
    Local aOfsc      := {}

    // ESTRUTURA DO ARRAY aDados [Primeira posição nome do campo, segunda posição valor do campo]
    Local aDados  := { {'TF_FILIAL', ' '},{'TF_CODBEM', ' '},{'TF_TIPACOM', ' '},;
    {'TF_TOLERA', ' '},{'TF_TOLECON', ' '},{'TF_CONMANU', ' '},{'TF_INENMAN', ' '},{'TF_SERVICO', ' '},{'TF_SEQRELA', ' '},{'T9_NOME', ' '},{'T9_CONTACU', ' '},;
    {'T9_CCUSTO', ' '},{'T9_CENTRAB', ' '},{'T9_CODFAMI', ' '},{'T6_NOME', ' '},{'TPE_CONTAC', ' '},{'CTT_DESC01', ' '},{'HB_NOME', ' '},{'DTPROXMAN', ' '}}
    
    If cBanco == "ORACLE"
		cIsNull := "NVL"
	ElseIf cBanco == "POSTGRES"
		cIsNull := "COALESCE"
	Else
		cIsNull := "ISNULL"
	EndIf

    nCount  := 0
    jParams := oFilter:getParameters() // metodo para retorno do json dos parâmetros
    
    // As posições do array aParComboB seguem as posições dos parâmetros
    aOfsc  := self:mntOfsc(aDados)
    cQuery += "SELECT MANUT.* FROM ("
    cQuery += "SELECT "
    cQuery += "STF.TF_FILIAL, "
    cQuery += "STF.TF_CODBEM, "
    cQuery += "STF.TF_TIPACOM, "
    cQuery += "STF.TF_TOLERA, "
    cQuery += "STF.TF_TOLECON, "
    cQuery += "STF.TF_CONMANU, "
    cQuery += "STF.TF_INENMAN, "
    cQuery += "STF.TF_SERVICO, "
    cQuery += "STF.TF_SEQRELA, "
    cQuery += "ST9.T9_NOME, "
    cQuery += "ST9.T9_CONTACU, "
    cQuery += "ST9.T9_CCUSTO, "
    cQuery += "ST9.T9_CENTRAB, "
    cQuery += "ST9.T9_CODFAMI, "
    cQuery += "CTT.CTT_DESC01, "
    cQuery += cIsNull+"(SHB.HB_NOME, ' ') AS HB_NOME, "
    cQuery += "ST6.T6_NOME, "
    cQuery += "CASE WHEN STF.TF_TIPACOM = 'S' "
    cQuery += 	"THEN (SELECT TPE.TPE_CONTAC FROM "+RetSqlName('TPE')+" TPE "
    cQuery += 		  "WHERE TPE.TPE_CODBEM = STF.TF_CODBEM "
    cQuery += 		  "AND TPE.D_E_L_E_T_ = ' ' ) "
    cQuery += 	"ELSE 0 "
    cQuery += "END AS TPE_CONTAC, "
    cQuery += "CASE "
    cQuery += "WHEN STF.TF_TIPACOM = 'T' AND STF.TF_TOLERA BETWEEN "
    cQuery += cValToChar(jParams['MV_PAR01', 1]) + " AND " + cValToChar(jParams['MV_PAR02', 1])+" "
    cQuery += " THEN 1 "
    cQuery += "WHEN STF.TF_TIPACOM = 'A' AND STF.TF_TOLERA BETWEEN "
    cQuery += cValToChar(jParams['MV_PAR01', 1]) + " AND " + cValToChar(jParams['MV_PAR02', 1])+" "
    cQuery += "AND STF.TF_TOLECON BETWEEN "
    cQuery += cValToChar(jParams['MV_PAR01', 1]) + " AND " + cValToChar(jParams['MV_PAR02', 1])+" "
    cQuery += "THEN 1 "
    cQuery += "WHEN STF.TF_TIPACOM <> 'T' AND STF.TF_TIPACOM <> 'A' AND STF.TF_TOLECON BETWEEN "
    cQuery += cValToChar(jParams['MV_PAR01', 1]) + " AND " + cValToChar(jParams['MV_PAR02', 1])+" "
    cQuery += "THEN 1 "
    cQuery += "ELSE 0 "
    cQuery += "END AS PAR01 "
    cQuery += "FROM "+RetSqlName('STF')+" STF "
    cQuery += "INNER JOIN "+RetSqlName('ST9')+" ST9 ON  "
    cQuery += NGMODCOMP("ST9","STF","=") + " "
    cQuery += "AND ST9.T9_CODBEM = STF.TF_CODBEM "
    cQuery += "AND ST9.D_E_L_E_T_ = ' ' "
    cQuery += "INNER JOIN "+RetSqlName('ST6')+" ST6 ON "
    cQuery += NGMODCOMP("ST6","ST9","=") + " "
    cQuery += "AND ST6.T6_CODFAMI = ST9.T9_CODFAMI "
    cQuery += "INNER JOIN "+RetSqlName('CTT')+" CTT ON "
    cQuery += NGMODCOMP("CTT","ST9","=") + " "
    cQuery += "AND CTT.CTT_CUSTO = ST9.T9_CCUSTO "
    cQuery += "AND CTT.D_E_L_E_T_ = ' ' "
    cQuery += "LEFT JOIN "+RetSqlName('SHB')+" SHB ON "
    cQuery += NGMODCOMP("SHB","ST9","=") + " "
    cQuery += "AND SHB.HB_COD = ST9.T9_CENTRAB "
    cQuery += "WHERE STF.TF_PERIODO <> 'E' " 
    cQuery += "AND STF.D_E_L_E_T_ = ' ' "

    If !Empty(jParams['MV_PAR10', 1]) .And. !Empty(jParams['MV_PAR11', 1])
		cQuery += " AND STF.TF_CODBEM  BETWEEN " + ValToSQL(jParams['MV_PAR10', 1]) + " AND " + ValToSQL(jParams['MV_PAR11', 1])	
    EndIf

    If !Empty(jParams['MV_PAR12', 1]) .And. !Empty(jParams['MV_PAR13', 1])
		cQuery += " AND STF.TF_SERVICO  BETWEEN " + ValToSQL(jParams['MV_PAR12', 1]) + " AND " + ValToSQL(jParams['MV_PAR13', 1])	
    EndIf

    If !Empty(jParams['MV_PAR03', 1]) .And. jParams['MV_PAR03', 1] != 'Z'
		cQuery += " AND STF.TF_TIPACOM = '" + jParams['MV_PAR03', 1] + "'"	
    EndIf

    If !Empty(jParams['MV_PAR04', 1]) .And. !Empty(jParams['MV_PAR05', 1])
		cQuery += " AND ST9.T9_CCUSTO BETWEEN " + ValToSQL(jParams['MV_PAR04', 1]) + " AND " + ValToSQL(jParams['MV_PAR05', 1])	
    EndIf
    
    If !Empty(jParams['MV_PAR06', 1]) .And. !Empty(jParams['MV_PAR07', 1])
		cQuery += " AND ST9.T9_CENTRAB BETWEEN " + ValToSQL(jParams['MV_PAR06', 1]) + " AND " + ValToSQL(jParams['MV_PAR07', 1])	
    EndIf

    If !Empty(jParams['MV_PAR08', 1]) .And. !Empty(jParams['MV_PAR09', 1])
		cQuery += " AND ST9.T9_CODFAMI BETWEEN " + ValToSQL(jParams['MV_PAR08', 1]) + " AND " + ValToSQL(jParams['MV_PAR09', 1])	
    EndIf

    //Os filtros serão setados na interface do novo TReports
    If oFilter:hasFilter()

        cQuery += " AND " + oFilter:getSQLExpression()
    
    EndIf

    cQuery += ") MANUT "
    cQuery += "WHERE MANUT.PAR01 = 1 "
    
    cQuery := ChangeQuery(cQuery)

    cAlias := MPSysOpenQuery(cQuery)

    If nPage == 1
        (cAlias)->(dbGoTop())
    Else
        //Encontra a quantidade de itens que irá pular de acordo com a página atual
        nSkip := ((nPage - 1) * self:getPageSize())      
    
        (cAlias)->(dbSkip(nSkip))
    EndIf

    While !(cAlias)->(Eof())

        dbSelectArea('STF')
        dbSetOrder(01)
        If dbSeek((cAlias)->TF_FILIAL+(cAlias)->TF_CODBEM+(cAlias)->TF_SERVICO+(cAlias)->TF_SEQRELA) .And.;
        NG120CHK( 'V' )

            cDtProx := DTOS(NGXPROXMAN((cAlias)->TF_CODBEM))
            cDtProx := SUBSTR(cDtProx, 7, 2) + '/' + SUBSTR(cDtProx, 5, 2) + '/' + SUBSTR(cDtProx, 1, 4)

            aDados[_TF_FILIAL,  len(aDados[_TF_FILIAL])]  := (cAlias)->TF_FILIAL
            aDados[_TF_CODBEM,  len(aDados[_TF_CODBEM])]  := (cAlias)->TF_CODBEM
            aDados[_TF_TIPACOM, len(aDados[_TF_TIPACOM])] := (cAlias)->TF_TIPACOM
            aDados[_TF_TOLERA,  len(aDados[_TF_TOLERA])]  := (cAlias)->TF_TOLERA
            aDados[_TF_TOLECON, len(aDados[_TF_TOLECON])] := (cAlias)->TF_TOLECON
            aDados[_TF_CONMANU, len(aDados[_TF_CONMANU])] := (cAlias)->TF_CONMANU
            aDados[_TF_INENMAN, len(aDados[_TF_INENMAN])] := (cAlias)->TF_INENMAN 
            aDados[_TF_SERVICO, len(aDados[_TF_SERVICO])] := (cAlias)->TF_SERVICO
            aDados[_TF_SEQRELA, len(aDados[_TF_SEQRELA])] := (cAlias)->TF_SEQRELA 
            aDados[_T9_NOME,    len(aDados[_T9_NOME])]    := (cAlias)->T9_NOME
            aDados[_T9_CONTACU, len(aDados[_T9_CONTACU])] := (cAlias)->T9_CONTACU
            aDados[_T9_CCUSTO,  len(aDados[_T9_CCUSTO])]  := (cAlias)->T9_CCUSTO
            aDados[_T9_CENTRAB, len(aDados[_T9_CENTRAB])] := (cAlias)->T9_CENTRAB
            aDados[_T9_CODFAMI, len(aDados[_T9_CODFAMI])] := (cAlias)->T9_CODFAMI
            aDados[_T6_NOME,    len(aDados[_T6_NOME])]    := (cAlias)->T6_NOME
            aDados[_TPE_CONTAC, len(aDados[_TPE_CONTAC])] := (cAlias)->TPE_CONTAC
            aDados[_CTT_DESC01, len(aDados[_CTT_DESC01])] := (cAlias)->CTT_DESC01
            aDados[_HB_NOME,    len(aDados[_HB_NOME])]    := (cAlias)->HB_NOME
            aDados[_DTPROXMAN,  len(aDados[_DTPROXMAN])]  := cDtProx

            aDados := self:mntLGPD(aDados, aOfsc)
            self:mntAppend(aDados)

            nCount := nCount + 1

        EndIf
        
        (cAlias)->(DBSkip())

        If nCount == self:getPageSize()
            Exit
        EndIf
        
    Enddo

    self:setHasNext((cAlias)->(!Eof()))
    (cAlias)->(DBCloseArea())

return self:oData

//-------------------------------------------------------------------
/*/{Protheus.doc} mntOfsc
Método responsável por receber o array aDados e retornar quais campos
o usuário tem acesso.
O método é necessário pois existem campos que são montados a partir de cálculos
com mais de um campo, então nesses casos caso o usuário não possa visualizar um
dos campos o campo final montado não pode ser exibido.

@type Método
 
@author João Ricardo Santini Zandoná
@since 29/12/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor

@return array, Array contendo todos os campos que devem ser validados pelo LGPD
/*/
//-------------------------------------------------------------------
method mntOfsc(aDados) as array class ManutAVencSmartViewBusinessObject

    Local nX as numeric 
    Local aCampos := {}
    
    for nX := 1 to len(aDados)
        
        aAdd(aCampos, aDados[nX, 1])
        
    next nX

    aCampos := FwProtectedDataUtil():UsrAccessPDField( __CUSERID, aCampos)

return aCampos

//-------------------------------------------------------------------
/*/{Protheus.doc} mntLGPD
Método responsável por aplicar a regra de Proteção de dados dos campo
(LGPD)
@type Método
@author João Ricardo Santini Zandoná
@since 29/12/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor
@param aOfusc, array, Array contendo os campos que podem ser visualizados pelo usuário

@return array, Array contendo todos os dados recebidos já tratados
/*/
//-------------------------------------------------------------------
method mntLGPD(aDados as array, aOfusc as array) as array class ManutAVencSmartViewBusinessObject

    Local nX, nI as numeric

    // Realiza o tratamento de LGPD
    For nX := 1 To len(aDados)

        If aScan(aOfusc, aDados[nX, 1]) == 0
    
            aDados[nX, 2] := FwProtectedDataUtil():ValueAsteriskToAnonymize(aDados[nX, 2])
        
        EndIf
    
    Next nX

Return aDados

//-------------------------------------------------------------------
/*/{Protheus.doc} mntAppend
Método responsável pelo envio dos dados para o TReports
@type Método
 
@author João Ricardo Santini Zandoná
@since 29/12/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor

@return
/*/
//-------------------------------------------------------------------
method mntAppend(aDados as array) as object class ManutAVencSmartViewBusinessObject

    self:appendData({'TF_FILIAL':  aDados[_TF_FILIAL,  len(aDados[_TF_FILIAL])],; 
                     'TF_CODBEM':  aDados[_TF_CODBEM,  len(aDados[_TF_CODBEM])],; 
                     'TF_TIPACOM': aDados[_TF_TIPACOM, len(aDados[_TF_TIPACOM])],; 
                     'TF_TOLERA':  aDados[_TF_TOLERA,  len(aDados[_TF_TOLERA])],; 
                     'TF_TOLECON': aDados[_TF_TOLECON, len(aDados[_TF_TOLECON])],; 
                     'TF_CONMANU': aDados[_TF_CONMANU, len(aDados[_TF_CONMANU])],; 
                     'TF_INENMAN': aDados[_TF_INENMAN, len(aDados[_TF_INENMAN])],;  
                     'TF_SERVICO': aDados[_TF_SERVICO, len(aDados[_TF_SERVICO])],; 
                     'TF_SEQRELA': aDados[_TF_SEQRELA, len(aDados[_TF_SEQRELA])],;  
                     'T9_NOME':    aDados[_T9_NOME,    len(aDados[_T9_NOME])],; 
                     'T9_CONTACU': aDados[_T9_CONTACU, len(aDados[_T9_CONTACU])],; 
                     'T9_CCUSTO':  aDados[_T9_CCUSTO,  len(aDados[_T9_CCUSTO])],; 
                     'T9_CENTRAB': aDados[_T9_CENTRAB, len(aDados[_T9_CENTRAB])],; 
                     'T9_CODFAMI': aDados[_T9_CODFAMI, len(aDados[_T9_CODFAMI])],; 
                     'T6_NOME':    aDados[_T6_NOME,    len(aDados[_T6_NOME])],; 
                     'TPE_CONTAC': aDados[_TPE_CONTAC, len(aDados[_TPE_CONTAC])],; 
                     'CTT_DESC01': aDados[_CTT_DESC01, len(aDados[_CTT_DESC01])],; 
                     'HB_NOME':    aDados[_HB_NOME,    len(aDados[_HB_NOME])],; 
                     'DTPROXMAN':  aDados[_DTPROXMAN,  len(aDados[_DTPROXMAN])]})

return

//-------------------------------------------------------------------
/*/{Protheus.doc} getSchema
Método responsável por informar as características dos campos e 
também os parâmetros quando esses não são adicionados pela SX1
@type Método

@author João Ricardo Santini Zandoná
@since 29/12/2023
@version P11

@return objeto, Retorna a si mesmo
/*/
//-------------------------------------------------------------------
method getSchema() as object class ManutAVencSmartViewBusinessObject

    self:addProperty('TF_FILIAL',  FWSX3Util():GetDescription( 'TF_FILIAL' ),  'string', FWX3Titulo('TF_FILIAL'),  'TF_FILIAL')
    self:addProperty('TF_CODBEM',  FWSX3Util():GetDescription( 'TF_CODBEM' ),  'string', FWX3Titulo('TF_CODBEM'),  'TF_CODBEM')
    self:addProperty('TF_TIPACOM', FWSX3Util():GetDescription( 'TF_TIPACOM' ), 'string', FWX3Titulo('TF_TIPACOM'), 'TF_TIPACOM')
    self:addProperty('TF_TOLERA',  FWSX3Util():GetDescription( 'TF_TOLERA' ),  'number', FWX3Titulo('TF_TOLERA'),  'TF_TOLERA')
    self:addProperty('TF_TOLECON', FWSX3Util():GetDescription( 'TF_TOLECON' ), 'number', FWX3Titulo('TF_TOLECON'), 'TF_TOLECON')
    self:addProperty('TF_CONMANU', FWSX3Util():GetDescription( 'TF_CONMANU' ), 'number', FWX3Titulo('TF_CONMANU'), 'TF_CONMANU')
    self:addProperty('TF_INENMAN', FWSX3Util():GetDescription( 'TF_INENMAN' ), 'number', FWX3Titulo('TF_INENMAN'), 'TF_INENMAN')
    self:addProperty('TF_SERVICO', FWSX3Util():GetDescription( 'TF_SERVICO' ), 'string', FWX3Titulo('TF_SERVICO'), 'TF_SERVICO')
    self:addProperty('TF_SEQRELA', FWSX3Util():GetDescription( 'TF_SEQRELA' ), 'string', FWX3Titulo('TF_SEQRELA'), 'TF_SEQRELA')
    self:addProperty('T9_NOME',    FWSX3Util():GetDescription( 'T9_NOME' ),    'string', FWX3Titulo('T9_NOME'),    'T9_NOME')
    self:addProperty('T9_CONTACU', FWSX3Util():GetDescription( 'T9_CONTACU' ), 'number', FWX3Titulo('T9_CONTACU')+'-ST9', 'T9_CONTACU')
    self:addProperty('T9_CCUSTO',  FWSX3Util():GetDescription( 'T9_CCUSTO' ),  'string', FWX3Titulo('T9_CCUSTO'),  'T9_CCUSTO')
    self:addProperty('T9_CENTRAB', FWSX3Util():GetDescription( 'T9_CENTRAB' ), 'string', FWX3Titulo('T9_CENTRAB'), 'T9_CENTRAB')
    self:addProperty('T9_CODFAMI', FWSX3Util():GetDescription( 'T9_CODFAMI' ), 'string', FWX3Titulo('T9_CODFAMI'), 'T9_CODFAMI')
    self:addProperty('T6_NOME',    FWSX3Util():GetDescription( 'T6_NOME' ),    'string', FWX3Titulo('T6_NOME')+'-ST6',    'T6_NOME')
    self:addProperty('TPE_CONTAC', FWSX3Util():GetDescription( 'TPE_CONTAC' ), 'number', FWX3Titulo('TPE_CONTAC')+'-TPE', 'TPE_CONTAC')
    self:addProperty('CTT_DESC01', FWSX3Util():GetDescription( 'CTT_DESC01' ), 'string', FWX3Titulo('CTT_DESC01'), 'CTT_DESC01')
    self:addProperty('HB_NOME',    FWSX3Util():GetDescription( 'HB_NOME' ),    'string', FWX3Titulo('HB_NOME')+'-SHB',    'HB_NOME')
    self:addProperty('DTPROXMAN',    'DTPROXMAN',    'string', 'DTPROXMAN',    'DTPROXMAN')

return self:oSchema
