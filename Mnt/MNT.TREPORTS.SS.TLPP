#include 'msobject.ch'
#include 'totvs.framework.treports.integratedprovider.th'

namespace totvs.protheus.SolicitacaoServicoSmartViewBusinessObject

Static _TQB_FILIAL  := 1
Static _TQB_CODBEM  := 2
Static _TQB_SOLICI  := 3
Static _TQB_DTABER  := 4
Static _TQB_HOABER  := 5
Static _TQB_SOLUCA  := 6
Static _TQB_DTFECH  := 7
Static _TQB_HOFECH  := 8
Static _TQB_TEMPO   := 9
Static _TQB_CENTRA  := 10
Static _TQB_CODMSS  := 11
Static _TQB_CODMSO  := 12
Static _TQB_USUARI  := 13
Static _TQB_RAMAL   := 14
Static _TQB_TIPOSS  := 15
Static _ST9_NOME    := 16
Static _TAF_CODFAM  := 17
Static _TAF_NOMNIV  := 18
Static _TQB_CCUSTO  := 19
Static _CTT_DESC01  := 20
Static _SHB_NOME    := 21
Static _ST9_CODFAMI := 22
Static _ST6_NOME    := 23
Static _TUF_NOMUSR  := 24
Static _TUF_DEPUSR  := 25
Static _TUF_RAMUSR  := 26
Static _TUF_EMAUSR  := 27
Static _TUF_TE1USR  := 28
Static _TUF_TE2USR  := 29
Static _TUR_FILATE  := 30
Static _TUR_TIPO    := 31
Static _TUR_CODATE  := 32
Static _TUR_LOJATE  := 33
Static _TUR_HRREAL  := 34
Static _TUR_NOME    := 35
Static _TUR_TOTHR   := 36
Static _TQ4_NMEXEC  := 37
Static _FACILIT     := 38

//-------------------------------------------------------------------
/*/{Protheus.doc} SolicitacaoServicoSmartViewBusinessObject
Objeto de Negócio de Multas
Tabelas: TQB, ST9, CTT, SHB, TQF, ST6, TQ4, TUF, TUR.
@type Classe
 
@author João Ricardo Santini Zandoná
@since 15/08/2023
@version P11
@return Nil
/*/
//-------------------------------------------------------------------
@totvsFrameworkTReportsIntegratedProvider(active=.T., team='SIGAGFR', tables='TQB', name='SolicitacaoServicoSmartViewBusinessObject', country='ALL', initialRelease='12.1.2310')
class SolicitacaoServicoSmartViewBusinessObject from totvs.framework.treports.integratedprovider.IntegratedProvider
    
    public method new() as object
    public method getAreas() as array
    public method getDescription() as character
    public method getData() as object
    public method getSchema() as object
    public method zeraDados() as array
    public method mntAppend() as object
    public method mntOfsc() as array
    public method mntLGPD() as array
    public method mntAtendentes() as object
    public method mntTypePar() as array

endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método Construtor do Objeto de Negócio
@type Método
 
@author João Ricardo Santini Zandoná
@since 22/09/2023
@version P11
@return objeto, Retorna o próprio objeto
/*/
//-------------------------------------------------------------------
method new() as object class SolicitacaoServicoSmartViewBusinessObject
    _Super:new()
    self:setDisplayName('Solicitações de Serviço')
    self:SetPergunte('MNT120')
return self

//-------------------------------------------------------------------
/*/{Protheus.doc} getDescription
Descrição do Objeto de Negócio
@type Método
 
@author João Ricardo Santini Zandoná
@since 22/09/2023
@version P11
@return caractere, Conteúdo da descrição do Objeto de Negócios
/*/
//-------------------------------------------------------------------
method getDescription() as character class SolicitacaoServicoSmartViewBusinessObject
return 'Objeto de Negócio de Solicitações de Serviço'

//-------------------------------------------------------------------
/*/{Protheus.doc} getAreas
Áreas do menu que o Objeto de Negócio deve ficar
@type Método
 
@author João Ricardo Santini Zandoná
@since 22/09/2023
@version P11
@return array, Retorna um array contendo as sessões do Menu em que o Objeto de Negócio deve aparecer
/*/
//-------------------------------------------------------------------
method getAreas() as array class SolicitacaoServicoSmartViewBusinessObject
return {'SS', 'Solicitacao de Servico'}

//-------------------------------------------------------------------
/*/{Protheus.doc} GetData
Método responsável pela montagem da Massa de dados enviada ao TReports
@type Método

@author João Ricardo Santini Zandoná
@since 22/09/2023
@version P11

@param nPage, numerico, Número da página atual
@param oFilter, objeto, Filtros aplicados pelo usuário

@return objeto, Retorna o próprio objeto
/*/
//-------------------------------------------------------------------
method getData(nPage as numeric, oFilter as object) as object class SolicitacaoServicoSmartViewBusinessObject
    
    Local lFacili    := AliasInDic("TUR")
    Local cQuery     as character   //Query Principal
    Local cAlias     as character   
    Local nSkip      as numeric
    Local aRetPsw    as Array
    Local aDados     := self:zeraDados()
    Local aOfusc     := self:mntOfsc(aDados)
    Local aParComboB := {}

    jParams := oFilter:getParameters() // metodo para retorno do json dos parâmetros
    
    aParComboB := self:mntTypePar({'15', '17'}, jParams)

    // Query que puxa os Pneus a partir dos parâmetros informados
    cQuery := "SELECT TQB.TQB_FILIAL, "
    cQuery += "TQB.TQB_CODBEM, "
    cQuery += "TQB.TQB_SOLICI, "
    cQuery += "TQB.TQB_DTABER, "
    cQuery += "TQB.TQB_HOABER, "
    cQuery += "TQB.TQB_SOLUCA, "
    cQuery += "TQB.TQB_DTFECH, "
    cQuery += "TQB.TQB_HOFECH, "
    cQuery += "TQB.TQB_TEMPO, "
    cQuery += "TQB.TQB_CCUSTO, "
    cQuery += "TQB.TQB_CENTRA, "
    cQuery += "TQB.TQB_CODMSS, "
    cQuery += "TQB.TQB_CODMSO, "
    cQuery += "TQB.TQB_USUARI, "
    cQuery += "TQB.TQB_RAMAL, "
    cQuery += "TQB.TQB_TIPOSS, "
    cQuery += "TQB.TQB_CDSOLI, "
    cQuery += "ST9.T9_NOME, "
    cQuery += "ST9.T9_CODFAMI, "
    cQuery += "CTT.CTT_DESC01, "
    cQuery += "SHB.HB_NOME, "
    cQuery += "TAF.TAF_CODFAM, "
    cQuery += "TAF.TAF_NOMNIV, "
    cQuery += "ST6.T6_NOME, "
    cQuery += "TQ4.TQ4_NMEXEC "
    cQuery += "FROM " +RetSqlName('TQB')+ " TQB "
    cQuery += "LEFT JOIN " +RetSqlName('CTT')+ " CTT ON "
    cQuery +=   NGMODCOMP("CTT","TQB","=") + " "
    cQuery +=   "AND CTT.CTT_CUSTO = TQB.TQB_CCUSTO  "
    cQuery +=   "AND CTT.D_E_L_E_T_ = ' '"
    cQuery += "LEFT JOIN " +RetSqlName('SHB')+ " SHB ON "
    cQuery +=   NGMODCOMP("SHB","TQB","=") + " "
    cQuery +=   "AND SHB.HB_COD = TQB.TQB_CENTRA  "
    cQuery +=   "AND SHB.D_E_L_E_T_ = ' '"
    cQuery += "LEFT JOIN " +RetSqlName('ST9')+ " ST9 ON "
    cQuery +=   NGMODCOMP("ST9","TQB","=") + " "
    cQuery +=   "AND ST9.T9_CODBEM = TQB.TQB_CODBEM "
    cQuery +=   "AND ST9.D_E_L_E_T_ = ' '"
    cQuery += "LEFT JOIN " +RetSqlName('TAF')+ " TAF ON "
    cQuery +=   NGMODCOMP("TAF","TQB","=") + " "
    cQuery +=   "AND LTRIM(RTRIM(TAF.TAF_CODNIV)) = LTRIM(RTRIM(TQB.TQB_CODBEM)) "
    cQuery +=   "AND TAF.D_E_L_E_T_ = ' '"
    cQuery += "LEFT JOIN " +RetSqlName('ST6')+ " ST6 ON "
    cQuery +=   NGMODCOMP("ST6","TQB","=") + " "
    cQuery +=   "AND ST6.T6_CODFAMI = "

    If lFacili
        cQuery += " CASE WHEN TQB.TQB_TIPOSS = 'B' THEN ST9.T9_CODFAMI ELSE TAF.TAF_CODFAM END "
    Else
        cQuery += " ST9.T9_CODFAMI "
    EndIf  
     
    If !Empty(jParams['MV_PAR05', 1]) .Or. !Empty(jParams['MV_PAR06', 1])
        cQuery += " AND (TQB.TQB_TIPOSS <> 'B' OR ST6.T6_CODFAMI BETWEEN " +ValToSQL(ArrTokStr(jParams['MV_PAR05']))+;
         " AND " +ValToSQL(ArrTokStr(jParams['MV_PAR06']))+") "
    EndIf

    cQuery += "AND ST6.D_E_L_E_T_ = ' '"
    cQuery += "LEFT JOIN " +RetSqlName('TQ4')+ " TQ4 ON "
    cQuery +=   NGMODCOMP("TQ4","TQB","=") + " "
    cQuery +=   "AND TQ4.TQ4_CDEXEC = TQB.TQB_CDEXEC "
    cQuery +=   "AND TQ4.D_E_L_E_T_ = ' ' "
    cQuery += "WHERE "
    cQuery +=   "TQB.D_E_L_E_T_ = ' ' "

    If !Empty(jParams['MV_PAR01', 1]) .Or. !Empty(jParams['MV_PAR02', 1])
        cQuery += " AND TQB.TQB_CCUSTO BETWEEN " +ValToSQL(ArrTokStr(jParams['MV_PAR01']))+;
         " AND " +ValToSQL(ArrTokStr(jParams['MV_PAR02']))+" "
    EndIf

    If !Empty(jParams['MV_PAR03', 1]) .Or. !Empty(jParams['MV_PAR04', 1])
        cQuery += " AND TQB.TQB_CENTRA BETWEEN " +ValToSQL(ArrTokStr(jParams['MV_PAR03']))+;
         " AND " +ValToSQL(ArrTokStr(jParams['MV_PAR04']))+" "
    EndIf

   If !Empty(jParams['MV_PAR07', 1]) .Or. !Empty(jParams['MV_PAR08', 1])
        cQuery += " AND (TQB.TQB_TIPOSS <> 'B' OR TQB.TQB_CODBEM BETWEEN " +ValToSQL(ArrTokStr(jParams['MV_PAR07']))+;
         " AND " +ValToSQL(ArrTokStr(jParams['MV_PAR08']))+") "
    EndIf

    If !Empty(jParams['MV_PAR09', 1]) .Or. !Empty(jParams['MV_PAR10', 1])
        cQuery += " AND (TQB.TQB_TIPOSS = 'B' OR TQB.TQB_CODBEM BETWEEN " +ValToSQL(ArrTokStr(jParams['MV_PAR09']))+;
         " AND " +ValToSQL(ArrTokStr(jParams['MV_PAR10']))+") "
    EndIf

    If !Empty(jParams['MV_PAR11', 1]) .Or. !Empty(jParams['MV_PAR12', 1])
        cQuery += " AND TQB.TQB_SOLICI BETWEEN " +ValToSQL(ArrTokStr(jParams['MV_PAR11']))+;
         " AND " +ValToSQL(ArrTokStr(jParams['MV_PAR12']))+" "
    EndIf

    If !Empty(jParams['MV_PAR13', 1]) .Or. !Empty(jParams['MV_PAR14', 1])
        cQuery += " AND TQB.TQB_DTABER BETWEEN '" +substr(ArrTokStr(jParams['MV_PAR13']), 1, 4) + substr(ArrTokStr(jParams['MV_PAR13']), 6, 2) + substr(ArrTokStr(jParams['MV_PAR13']), 9, 2)+;
         "' AND '" +substr(ArrTokStr(jParams['MV_PAR14']), 1, 4) + substr(ArrTokStr(jParams['MV_PAR14']), 6, 2) + substr(ArrTokStr(jParams['MV_PAR14']), 9, 2)+"' "
    EndIf
    
    If aParComboB[1] == 1
            cQuery += " AND TQB.TQB_TIPOSS = 'B' "
    ElseIf aParComboB[1] == 2
            cQuery += " AND TQB.TQB_TIPOSS = 'L' "
    EndIf
    
    If aParComboB[2] == 1
        cQuery += " AND TQB.TQB_SOLUCA = 'A' "
    ElseIf aParComboB[2] == 2
        cQuery += " AND TQB.TQB_SOLUCA = 'E' "
    EndIf   

    cQuery := ChangeQuery(cQuery)
    cAlias := MPSysOpenQuery(cQuery)

    If nPage == 1
  
        (cAlias)->(dbGoTop())
   
    Else
    
        //Encontra a quantidade de itens que irá pular de acordo com a página atual
        nSkip := ((nPage - 1) * self:getPageSize())      
    
        (cAlias)->(dbSkip(nSkip))
   
    EndIf

    While !(cAlias)->(Eof())

        // Inicia a variável aDados
        aDados := self:zeraDados()

        aDados[_TQB_FILIAL,  len(aDados[_TQB_FILIAL])]  := (cAlias)->TQB_FILIAL
        aDados[_TQB_CODBEM,  len(aDados[_TQB_CODBEM])]  := (cAlias)->TQB_CODBEM
        aDados[_TQB_SOLICI,  len(aDados[_TQB_SOLICI])]  := (cAlias)->TQB_SOLICI
        aDados[_TQB_DTABER,  len(aDados[_TQB_DTABER])]  := (cAlias)->TQB_DTABER
        aDados[_TQB_HOABER,  len(aDados[_TQB_HOABER])]  := (cAlias)->TQB_HOABER
        aDados[_TQB_SOLUCA,  len(aDados[_TQB_SOLUCA])]  := (cAlias)->TQB_SOLUCA
        aDados[_TQB_DTFECH,  len(aDados[_TQB_DTFECH])]  := (cAlias)->TQB_DTFECH
        aDados[_TQB_HOFECH,  len(aDados[_TQB_HOFECH])]  := (cAlias)->TQB_HOFECH
        aDados[_TQB_TEMPO,   len(aDados[_TQB_TEMPO])]   := (cAlias)->TQB_TEMPO
        aDados[_TQB_CENTRA,  len(aDados[_TQB_CENTRA])]  := (cAlias)->TQB_CENTRA
        aDados[_TQB_CODMSS,  len(aDados[_TQB_CODMSS])]  := MSMM((cAlias)->TQB_CODMSS,,,,3)
        aDados[_TQB_CODMSO,  len(aDados[_TQB_CODMSO])]  := MSMM((cAlias)->TQB_CODMSO,,,,3)
        aDados[_TQB_USUARI,  len(aDados[_TQB_USUARI])]  := (cAlias)->TQB_USUARI
        aDados[_TQB_RAMAL,   len(aDados[_TQB_RAMAL])]   := (cAlias)->TQB_RAMAL
        aDados[_TQB_TIPOSS,  len(aDados[_TQB_TIPOSS])]  := (cAlias)->TQB_TIPOSS
        aDados[_ST9_NOME,    len(aDados[_ST9_NOME])]    := (cAlias)->T9_NOME
        aDados[_TAF_CODFAM,  len(aDados[_TAF_CODFAM])]  := (cAlias)->TAF_CODFAM
        aDados[_TQB_CCUSTO,  len(aDados[_TQB_CCUSTO])]  := (cAlias)->TQB_CCUSTO
        aDados[_CTT_DESC01,  len(aDados[_CTT_DESC01])]  := (cAlias)->CTT_DESC01
        aDados[_SHB_NOME,    len(aDados[_SHB_NOME])]    := (cAlias)->HB_NOME
        aDados[_ST9_CODFAMI, len(aDados[_ST9_CODFAMI])] := (cAlias)->T9_CODFAMI
        aDados[_ST6_NOME,    len(aDados[_ST6_NOME])]    := (cAlias)->T6_NOME
        aDados[_TQ4_NMEXEC,  len(aDados[_TQ4_NMEXEC])]  := (cAlias)->TQ4_NMEXEC
        aDados[_TUF_NOMUSR,  len(aDados[_TUF_NOMUSR])]  := ' '
        aDados[_TUF_DEPUSR,  len(aDados[_TUF_DEPUSR])]  := ' '
        aDados[_TUF_RAMUSR,  len(aDados[_TUF_RAMUSR])]  := ' '
        aDados[_TUF_EMAUSR,  len(aDados[_TUF_EMAUSR])]  := ' '
        aDados[_TUF_TE1USR,  len(aDados[_TUF_TE1USR])]  := ' '
        aDados[_TUF_TE2USR,  len(aDados[_TUF_TE2USR])]  := ' '
        aDados[_TUR_FILATE,  len(aDados[_TUR_FILATE])]  := ' '
        aDados[_TUR_TIPO,    len(aDados[_TUR_TIPO])]    := ' '
        aDados[_TUR_CODATE,  len(aDados[_TUR_CODATE])]  := ' '
        aDados[_TUR_LOJATE,  len(aDados[_TUR_LOJATE])]  := ' '
        aDados[_TUR_HRREAL,  len(aDados[_TUR_HRREAL])]  := ' '
        aDados[_TUR_NOME,    len(aDados[_TUR_NOME])]    := ' '
        aDados[_TUR_TOTHR,   len(aDados[_TUR_TOTHR])]   := 0
        

        If lFacili
            aDados[_FACILIT,     len(aDados[_FACILIT])] := 'True'
        Else
            aDados[_FACILIT,     len(aDados[_FACILIT])] := 'False' 
        EndIf 

        If !Empty(jParams['MV_PAR18', 1]) .And. jParams['MV_PAR18', 1] == '1'

            If (cAlias)->TQB_TIPOSS == 'B'
                aDados[_ST9_NOME, len(aDados[_ST9_NOME])] := NGLocComp((cAlias)->TQB_CODBEM,'1') //Bem
            Else
                aDados[_TAF_NOMNIV, len(aDados[_TAF_NOMNIV])]  := NGLocComp((cAlias)->TQB_CODBEM,'2') //Localização
            EndIf

        EndIf

        If lFacili

            dbSelectArea("TUF")
            dbSetOrder(1)
            dbSeek( FWxFilial("TUF") + (cAlias)->TQB_CDSOLI)

            PswOrder(1)
            If PswSeek(TUF->TUF_CODUSR)
                aRetPsw := PswRet()
            EndIf

            aDados[_TUF_NOMUSR, len(aDados[_TUF_NOMUSR])] := aRetPsw[1][4]
            aDados[_TUF_DEPUSR, len(aDados[_TUF_DEPUSR])] := aRetPsw[1][12]
            aDados[_TUF_RAMUSR, len(aDados[_TUF_RAMUSR])] := aRetPsw[1][20]
            aDados[_TUF_EMAUSR, len(aDados[_TUF_EMAUSR])] := aRetPsw[1][14]
            aDados[_TUF_TE1USR, len(aDados[_TUF_TE1USR])] := TUF->TUF_TE1USR
            aDados[_TUF_TE2USR, len(aDados[_TUF_TE2USR])] := TUF->TUF_TE2USR

            self:mntAtendentes(aDados, aOfusc)
        
        Else

            aDados := self:mntLGPD(aDados, aOfusc)
            self:mntAppend(aDados)

        EndIf
        
        (cAlias)->( dbSkip() )

    Enddo
    
    //Se não for o último registro indica que terá próxima página
    self:setHasNext((cAlias)->(!Eof())) 

    (cAlias)->( dbCloseArea() )
    
    FWFreeArray(aDados)
    FWFreeArray(aOfusc)
    
return self:oData

//-------------------------------------------------------------------
/*/{Protheus.doc} mntAppend
Método responsável pelo envio dos dados para o TReports
@type Método
 
@author João Ricardo Santini Zandoná
@since 22/09/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor

@return
/*/
//-------------------------------------------------------------------
method mntAppend(aDados as array) as object class SolicitacaoServicoSmartViewBusinessObject

    self:appendData({'TQB_FILIAL': aDados[_TQB_FILIAL, len(aDados[_TQB_FILIAL])],;
    'TQB_CODBEM': aDados[_TQB_CODBEM, len(aDados[_TQB_CODBEM])],;
    'TQB_SOLICI': aDados[_TQB_SOLICI, len(aDados[_TQB_SOLICI])],;
    'TQB_DTABER': aDados[_TQB_DTABER, len(aDados[_TQB_DTABER])],;
    'TQB_HOABER': aDados[_TQB_HOABER, len(aDados[_TQB_HOABER])],;
    'TQB_SOLUCA': aDados[_TQB_SOLUCA, len(aDados[_TQB_SOLUCA])],;
    'TQB_DTFECH': aDados[_TQB_DTFECH, len(aDados[_TQB_DTFECH])],;
    'TQB_HOFECH': aDados[_TQB_HOFECH, len(aDados[_TQB_HOFECH])],;
    'TQB_TEMPO': aDados[_TQB_TEMPO, len(aDados[_TQB_TEMPO])],;
    'TQB_CENTRA': aDados[_TQB_CENTRA, len(aDados[_TQB_CENTRA])],;
    'TQB_CODMSS': aDados[_TQB_CODMSS, len(aDados[_TQB_CODMSS])],;
    'TQB_CODMSO': aDados[_TQB_CODMSO, len(aDados[_TQB_CODMSO])],;
    'TQB_USUARI': aDados[_TQB_USUARI, len(aDados[_TQB_USUARI])],;
    'TQB_RAMAL': aDados[_TQB_RAMAL, len(aDados[_TQB_RAMAL])],;
    'TQB_TIPOSS': aDados[_TQB_TIPOSS, len(aDados[_TQB_TIPOSS])],;
    'T9_NOME': aDados[_ST9_NOME, len(aDados[_ST9_NOME])],;
    'TAF_CODFAM': aDados[_TAF_CODFAM, len(aDados[_TAF_CODFAM])],;
    'TAF_NOMNIV': aDados[_TAF_NOMNIV, len(aDados[_TAF_NOMNIV])],;
    'TQB_CCUSTO': aDados[_TQB_CCUSTO, len(aDados[_TQB_CCUSTO])],;
    'CTT_DESC01': aDados[_CTT_DESC01, len(aDados[_CTT_DESC01])],;
    'HB_NOME': aDados[_SHB_NOME, len(aDados[_SHB_NOME])],;
    'T9_CODFAMI': aDados[_ST9_CODFAMI, len(aDados[_ST9_CODFAMI])],;
    'T6_NOME': aDados[_ST6_NOME, len(aDados[_ST6_NOME])],;
    'TUF_NOMUSR': aDados[_TUF_NOMUSR, len(aDados[_TUF_NOMUSR])],;
    'TUF_DEPUSR': aDados[_TUF_DEPUSR, len(aDados[_TUF_DEPUSR])],;
    'TUF_RAMUSR': aDados[_TUF_RAMUSR, len(aDados[_TUF_RAMUSR])],;
    'TUF_EMAUSR': aDados[_TUF_EMAUSR, len(aDados[_TUF_EMAUSR])],;
    'TUF_TE1USR': aDados[_TUF_TE1USR, len(aDados[_TUF_TE1USR])],;
    'TUF_TE2USR': aDados[_TUF_TE2USR, len(aDados[_TUF_TE2USR])],;
    'TUR_FILATE': aDados[_TUR_FILATE, len(aDados[_TUR_FILATE])],;
    'TUR_TIPO': aDados[_TUR_TIPO, len(aDados[_TUR_TIPO])],;
    'TUR_CODATE': aDados[_TUR_CODATE, len(aDados[_TUR_CODATE])],;
    'TUR_LOJATE': aDados[_TUR_LOJATE, len(aDados[_TUR_LOJATE])],;
    'TUR_HRREAL': aDados[_TUR_HRREAL, len(aDados[_TUR_HRREAL])],;
    'TUR_NOME': aDados[_TUR_NOME, len(aDados[_TUR_NOME])],;
    'TUR_TOTHR': aDados[_TUR_TOTHR, len(aDados[_TUR_TOTHR])],;
    'TQ4_NMEXEC': aDados[_TQ4_NMEXEC, len(aDados[_TQ4_NMEXEC])],;
    'FACILITIES': aDados[_FACILIT, len(aDados[_FACILIT])]})

return

//-------------------------------------------------------------------
/*/{Protheus.doc} getSchema
Método responsável por informar as características dos campos
@type Método

@author João Ricardo Santini Zandoná
@since 22/09/2023
@version P11

@return objeto, Retorna a si mesmo
/*/
//-------------------------------------------------------------------
method getSchema() as object class SolicitacaoServicoSmartViewBusinessObject

    self:addProperty('TQB_FILIAL', FWSX3Util():GetDescription( 'TQB_FILIAL' ), 'string', FWX3Titulo( 'TQB_FILIAL' ), 'TQB_FILIAL')
    self:addProperty('TQB_CODBEM', FWSX3Util():GetDescription( 'TQB_CODBEM' ), 'string', FWX3Titulo( 'TQB_CODBEM' ), 'TQB_CODBEM')
    self:addProperty('TQB_SOLICI', FWSX3Util():GetDescription( 'TQB_SOLICI' ), 'string', FWX3Titulo( 'TQB_SOLICI' ), 'TQB_SOLICI')
    self:addProperty('TQB_DTABER', FWSX3Util():GetDescription( 'TQB_DTABER' ), 'string', FWX3Titulo( 'TQB_DTABER' ), 'TQB_DTABER')
    self:addProperty('TQB_HOABER', FWSX3Util():GetDescription( 'TQB_HOABER' ), 'string', FWX3Titulo( 'TQB_HOABER' ), 'TQB_HOABER')
    self:addProperty('TQB_SOLUCA', FWSX3Util():GetDescription( 'TQB_SOLUCA' ), 'string', FWX3Titulo( 'TQB_SOLUCA' ), 'TQB_SOLUCA')
    self:addProperty('TQB_DTFECH', FWSX3Util():GetDescription( 'TQB_DTFECH' ), 'string', FWX3Titulo( 'TQB_DTFECH' ), 'TQB_DTFECH')
    self:addProperty('TQB_HOFECH', FWSX3Util():GetDescription( 'TQB_HOFECH' ), 'string', FWX3Titulo( 'TQB_HOFECH' ), 'TQB_HOFECH')
    self:addProperty('TQB_TEMPO',  FWSX3Util():GetDescription( 'TQB_TEMPO' ),  'string', FWX3Titulo( 'TQB_TEMPO' ),  'TQB_TEMPO')
    self:addProperty('TQB_CENTRA', FWSX3Util():GetDescription( 'TQB_CENTRA' ), 'string', FWX3Titulo( 'TQB_CENTRA' ), 'TQB_CENTRA')
    self:addProperty('TQB_CODMSS', FWSX3Util():GetDescription( 'TQB_CODMSS' ), 'string', FWX3Titulo( 'TQB_CODMSS' ), 'TQB_CODMSS')
    self:addProperty('TQB_CODMSO', FWSX3Util():GetDescription( 'TQB_CODMSO' ), 'string', FWX3Titulo( 'TQB_CODMSO' ), 'TQB_CODMSO')
    self:addProperty('TQB_USUARI', FWSX3Util():GetDescription( 'TQB_USUARI' ), 'string', FWX3Titulo( 'TQB_USUARI' ), 'TQB_USUARI')
    self:addProperty('TQB_RAMAL',  FWSX3Util():GetDescription( 'TQB_RAMAL' ),  'string', FWX3Titulo( 'TQB_RAMAL' ),  'TQB_RAMAL')
    self:addProperty('TQB_TIPOSS', FWSX3Util():GetDescription( 'TQB_TIPOSS' ), 'string', FWX3Titulo( 'TQB_TIPOSS' ), 'TQB_TIPOSS')
    self:addProperty('T9_NOME',    FWSX3Util():GetDescription( 'T9_NOME' ),    'string', FWX3Titulo( 'T9_NOME' ),    'T9_NOME')
    self:addProperty('TAF_CODFAM', FWSX3Util():GetDescription( 'TAF_CODFAM' ), 'string', FWX3Titulo( 'TAF_CODFAM' ), 'TAF_CODFAM')
    self:addProperty('TAF_NOMNIV', FWSX3Util():GetDescription( 'TAF_NOMNIV' ), 'string', FWX3Titulo( 'TAF_NOMNIV' ), 'TAF_NOMNIV')
    self:addProperty('TQB_CCUSTO', FWSX3Util():GetDescription( 'TQB_CCUSTO' ), 'string', FWX3Titulo( 'TQB_CCUSTO' ), 'TQB_CCUSTO')
    self:addProperty('CTT_DESC01', FWSX3Util():GetDescription( 'CTT_DESC01' ), 'string', FWX3Titulo( 'CTT_DESC01' ), 'CTT_DESC01')
    self:addProperty('HB_NOME',    FWSX3Util():GetDescription( 'HB_NOME' ),    'string', FWX3Titulo( 'HB_NOME' ),    'HB_NOME')
    self:addProperty('T9_CODFAMI', FWSX3Util():GetDescription( 'T9_CODFAMI' ), 'string', FWX3Titulo( 'T9_CODFAMI' ), 'T9_CODFAMI')
    self:addProperty('T6_NOME',    FWSX3Util():GetDescription( 'T6_NOME' ),    'string', FWX3Titulo( 'T6_NOME' ),    'T6_NOME')
    self:addProperty('TUF_NOMUSR', FWSX3Util():GetDescription( 'TUF_NOMUSR' ), 'string', FWX3Titulo( 'TUF_NOMUSR' ), 'TUF_NOMUSR')
    self:addProperty('TUF_DEPUSR', FWSX3Util():GetDescription( 'TUF_DEPUSR' ), 'string', FWX3Titulo( 'TUF_DEPUSR' ), 'TUF_DEPUSR')
    self:addProperty('TUF_RAMUSR', FWSX3Util():GetDescription( 'TUF_RAMUSR' ), 'string', FWX3Titulo( 'TUF_RAMUSR' ), 'TUF_RAMUSR')
    self:addProperty('TUF_EMAUSR', FWSX3Util():GetDescription( 'TUF_EMAUSR' ), 'string', FWX3Titulo( 'TUF_EMAUSR' ), 'TUF_EMAUSR')
    self:addProperty('TUF_TE1USR', FWSX3Util():GetDescription( 'TUF_TE1USR' ), 'string', FWX3Titulo( 'TUF_TE1USR' ), 'TUF_TE1USR')
    self:addProperty('TUF_TE2USR', FWSX3Util():GetDescription( 'TUF_TE2USR' ), 'string', FWX3Titulo( 'TUF_TE2USR' ), 'TUF_TE2USR')
    self:addProperty('TUR_FILATE', FWSX3Util():GetDescription( 'TUR_FILATE' ), 'string', FWX3Titulo( 'TUR_FILATE' ), 'TUR_FILATE')
    self:addProperty('TUR_TIPO',   FWSX3Util():GetDescription( 'TUR_TIPO' ),   'string', FWX3Titulo( 'TUR_TIPO' ),   'TUR_TIPO')
    self:addProperty('TUR_CODATE', FWSX3Util():GetDescription( 'TUR_CODATE' ), 'string', FWX3Titulo( 'TUR_CODATE' ), 'TUR_CODATE')
    self:addProperty('TUR_LOJATE', FWSX3Util():GetDescription( 'TUR_LOJATE' ), 'string', FWX3Titulo( 'TUR_LOJATE' ), 'TUR_LOJATE')
    self:addProperty('TUR_HRREAL', FWSX3Util():GetDescription( 'TUR_HRREAL' ), 'string', FWX3Titulo( 'TUR_HRREAL' ), 'TUR_HRREAL')
    self:addProperty('TUR_NOME',   FWSX3Util():GetDescription( 'TUR_NOME' ),   'string', FWX3Titulo( 'TUR_NOME' ),   'TUR_NOME')
    self:addProperty('TUR_TOTHR',  'TUR_TOTHR',  'number',  'TUR_TOTHR',  'TUR_TOTHR')
    self:addProperty('TQ4_NMEXEC', FWSX3Util():GetDescription( 'TQ4_NMEXEC' ), 'string', FWX3Titulo( 'TQ4_NMEXEC' ), 'TQ4_NMEXEC')
    self:addProperty('FACILITIES', 'FACILITIES' , 'string', 'FACILITIES', 'FACILITIES')

return self:oSchema

//-------------------------------------------------------------------
/*/{Protheus.doc} zeraDados
Método responsável por reiniciar o valor do array aDados
ESTRUTURA DO ARRAY aDados [Primeira posição nome do campo, segunda posição valor do campo]
Caso o valor do campo seja montado a partir de mais campos na primeira posição é o apelido 
do campo montado, e na última posição o valor, nas posições intermediárias os campos que 
são usados para montar o valor

@type Método

@author João Ricardo Santini Zandoná
@since 22/09/2023
@version P11

@return array, Retorna o array aDados com as posições iniciais
/*/
//-------------------------------------------------------------------
method zeraDados() as array class SolicitacaoServicoSmartViewBusinessObject

    Local aDados := {{'TQB_FILIAL', ''},;
                     {'TQB_CODBEM', ''},;
                     {'TQB_SOLICI', ''},;
                     {'TQB_DTABER', ''},;
                     {'TQB_HOABER', ''},;
                     {'TQB_SOLUCA', ''},;
                     {'TQB_DTFECH', ''},;
                     {'TQB_HOFECH', ''},;
                     {'TQB_TEMPO', ''},;
                     {'TQB_CENTRA', ''},;
                     {'TQB_CODMSS', ''},;
                     {'TQB_CODMSO', ''},;
                     {'TQB_USUARI', ''},;
                     {'TQB_RAMAL', ''},;
                     {'TQB_TIPOSS', ''},;
                     {'ST9_NOME', 'T9_NOME', ''},;
                     {'TAF_CODFAM', ''},;
                     {'TAF_NOMNIV', ''},;
                     {'TQB_CCUSTO', ''},;
                     {'CTT_DESC01', ''},;
                     {'SHB_NOME', 'HB_NOME', ''},;
                     {'ST9_CODFAMI', 'T9_CODFAMI', ''},;
                     {'ST6_NOME', 'T6_NOME', ''},;
                     {'TUF_NOMUSR', ''},;
                     {'TUF_DEPUSR', ''},;
                     {'TUF_RAMUSR', ''},;
                     {'TUF_EMAUSR', ''},;
                     {'TUF_TE1USR', ''},;
                     {'TUF_TE2USR', ''},;
                     {'TUR_FILATE', ''},;
                     {'TUR_TIPO', ''},;
                     {'TUR_CODATE', ''},;
                     {'TUR_LOJATE', ''},;
                     {'TUR_HRREAL', ''},;
                     {'TUR_NOME', ''},;
                     {'TUR_TOTHR', 0},;
                     {'TQ4_NMEXEC', ''},;
                     {'FACILITIES', ''}}     

Return aDados

//-------------------------------------------------------------------
/*/{Protheus.doc} mntOfsc
Método responsável por receber o array aDados e retornar quais campos
o usuário tem acesso.
O método é necessário pois existem campos que são montados a partir de
mais de um campo, então nesses casos caso o usuário não possa visualizar um
dos campos o campo final montado não pode ser exibido.

@type Método
 
@author João Ricardo Santini Zandoná
@since 22/09/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor
A estrutuda do array a dados pode ser {'NomeDoCampo', valorDoCampo} ou
{'NomeDoCampo', 'CampoMontagem1', 'CampoMontagem2', ..., 'valorDoCampo'}
o array pode possur inúmeras posições intermediárias desde que o primeiro
valor seja o nome ou apelido do campo e a última posição seja o valor.

@return array, Array contendo todos os campos que devem ser validados pelo LGPD
/*/
//-------------------------------------------------------------------
method mntOfsc(aDados) as array class SolicitacaoServicoSmartViewBusinessObject

    Local nX as numeric 
    Local nI as numeric
    Local aCampos := {}
    
    for nX := 1 to len(aDados)
        If len(aDados[nX]) == 2
            aAdd(aCampos, aDados[nX, 1])
        Else
            for nI := 1 to len(aDados[nX])
                If nI != 1 .And. nI != len(aDados[nX])
                    aAdd(aCampos, aDados[nX, nI])
                EndIf
            Next nI
        EndIf
    next nX

    aCampos := FwProtectedDataUtil():UsrAccessPDField( __CUSERID, aCampos)

return aCampos

//-------------------------------------------------------------------
/*/{Protheus.doc} mntLGPD
Método responsável por aplicar a regra de Proteção de dados dos campos
(LGPD)

@type Método
 
@author João Ricardo Santini Zandoná
@since 22/09/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor
@param aOfusc, array, Array contendo os campos que podem ser visualizados pelo usuário

@return array, Array contendo todos os dados recebidos já tratados
/*/
//-------------------------------------------------------------------
method mntLGPD(aDados as array, aOfusc as array) as array class SolicitacaoServicoSmartViewBusinessObject

    Local nX as numeric
    Local nI as numeric

    // Realiza o tratamento de LGPD
    For nX := 1 To len(aDados)
        
        If len(aDados[nX]) == 2

            If aScan(aOfusc, aDados[nX, 1]) == 0
        
                aDados[nX, 2] := FwProtectedDataUtil():ValueAsteriskToAnonymize(aDados[nX, 2])
            
            EndIf

        Else

            // Loop de validação para os campos que possuem valores de montagem intermediários
            for nI := 1 to len(aDados[nX])
                If nI != 1 .And. nI != len(aDados[nX])
                    If aScan(aOfusc, aDados[nX, nI]) == 0
        
                        aDados[nX, 2] := FwProtectedDataUtil():ValueAsteriskToAnonymize(aDados[nX, 2])
                    
                    EndIf
                EndIf
            Next nI

        EndIf
    
    Next nX

Return aDados

//-------------------------------------------------------------------
/*/{Protheus.doc} mntAtendentes
Método responsável por realizar o append dos registros que possuem Atendente
e utilizam facilities.

@type Método
 
@author João Ricardo Santini Zandoná
@since 22/09/2023
@version P11

@param aDados, array, Array contendo o nome dos campos e o seu valor
@param aOfusc, array, Array contendo os campos que podem ser visualizados pelo usuário

@return
/*/
//-------------------------------------------------------------------
method mntAtendentes(aDados as array, aOfusc as array) as object class SolicitacaoServicoSmartViewBusinessObject

    Local cQuery as character
    Local cAlias as character
    Local nTotHor := 0  

    cQuery := "SELECT TUR.TUR_FILIAL,"
    cQuery += "TUR.TUR_SOLICI, "
    cQuery += "TUR.TUR_TIPO, "
    cQuery += "TUR.TUR_FILATE, "
    cQuery += "TUR.TUR_CODATE, "
    cQuery += "TUR.TUR_LOJATE, "
    cQuery += "CASE "
    cQuery += "WHEN TUR.TUR_HRREAL = ' ' THEN '00:00' "
    cQuery += "ELSE TUR.TUR_HRREAL END AS TUR_HRREAL, "
    cQuery += "CASE "
    cQuery += "WHEN TUR.TUR_TIPO = '2' "
    cQuery +=   "THEN (SELECT ST1.T1_NOME FROM " + RetSqlName("ST1") + " ST1 "
    cQuery +=   "WHERE ST1.T1_CODFUNC = TUR.TUR_CODATE "
    cQuery +=   "AND   ST1.D_E_L_E_T_ = ' ') "
    cQuery += "WHEN TUR.TUR_TIPO = '3' "
    cQuery +=   "THEN (SELECT SA2.A2_NOME FROM " + RetSqlName("SA2") + " SA2 "
    cQuery += "WHERE SA2.A2_COD = SUBSTRING(TUR.TUR_CODATE, 1, " + cValToChar(TAMSX3("A2_COD")[1]) + ") "
    cQuery += "AND SA2.A2_LOJA = TUR.TUR_LOJATE "
    cQuery += "AND SA2.D_E_L_E_T_ = ' ') "
    cQuery += "END AS TUR_NOME "
    cQuery += "FROM " + RetSqlName("TUR") + " TUR "
    cQuery += "WHERE " +NGMODCOMP("TUR","TQB","=", ,aDados[_TQB_FILIAL, len(aDados[_TQB_FILIAL])])+ " "
    cQuery += "AND TUR.TUR_SOLICI = "+ValToSql(aDados[_TQB_SOLICI, len(aDados[_TQB_SOLICI])])
    cQuery += " AND TUR.D_E_L_E_T_ = ' ' "

    cQuery := ChangeQuery(cQuery)
    cAlias := MPSysOpenQuery(cQuery)

    If (cAlias)->(Eof())
        
        aDados := self:mntLGPD(aDados, aOfusc)
        self:mntAppend(aDados)

    Else
        While (cAlias)->(!Eof())
            
            nTotHor += HTON((cAlias)->TUR_HRREAL)

            aDados[_TUR_TIPO,   len(aDados[_TUR_TIPO])]   := (cAlias)->TUR_TIPO
            aDados[_TUR_FILATE, len(aDados[_TUR_FILATE])] := (cAlias)->TUR_FILATE
            aDados[_TUR_CODATE, len(aDados[_TUR_CODATE])] := (cAlias)->TUR_CODATE
            aDados[_TUR_LOJATE, len(aDados[_TUR_LOJATE])] := (cAlias)->TUR_LOJATE
            aDados[_TUR_HRREAL, len(aDados[_TUR_HRREAL])] := (cAlias)->TUR_HRREAL
            aDados[_TUR_NOME,   len(aDados[_TUR_NOME])]   := (cAlias)->TUR_NOME
            aDados[_TUR_TOTHR,  len(aDados[_TUR_TOTHR])]  := nTotHor

            aDados := self:mntLGPD(aDados, aOfusc)
            self:mntAppend(aDados)

            (cAlias)->(dbSkip())

        Enddo

    EndIf

    (cAlias)->( dbCloseArea() )

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} mntTypePar
Método responsável por validar o tipo dos parâmetros de Combobox conforme a SX1
Devido a um BUG no SmartView os parâmetros Combobox acabam vindo com tipo caractere
quando deveriam ser numérico
@type Método

@author João Ricardo Santini Zandoná
@since 06/12/2023
@version P11

@param aPars, array, Array contendo todos o campo X1_ORDEM dos parâmetros combobox
utilizados no Objeto de Negócio 
@param jParams, json, Traz os parâmetros e seus respectivos valores

@return array, Array contendo o mesmo número de posições do aPars porém respectivamente
com os valores dos parâmetros com a tipagem correta
/*/
//-------------------------------------------------------------------
method mntTypePar(aPars as array, jParams as json) as array class SolicitacaoServicoSmartViewBusinessObject

    Local aReturn := {}
    Local cTipo   := ''
    Local cPar    := ''
    Local nI      := 1

    While nI <= len(aPars)
        cTipo := Posicione("SX1",1,'MNT120    '+aPars[nI],"X1_TIPO")
        cPar := 'MV_PAR'+aPars[nI]
        If cTipo <> ValType(jParams[cPar, 1])
            If cTipo == 'N'
                aAdd(aReturn, Val(jParams[cPar, 1]))
            EndIf
        EndIf
        If nI <> len(aReturn)
            aAdd(aReturn, jParams[cPar, 1])
        EndIf
        nI := nI + 1
    Enddo

Return aReturn
