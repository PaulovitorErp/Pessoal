#include 'tlpp-core.th'
#include 'tlpp-rest.th'

Namespace TotvsDevelopers.Demo.Controllers

Using Namespace TotvsDevelopers.Demo.Services

Class NgInd014backlogOsController From NgBaseController
    Private Data oService

    Public Method New() Constructor

    @Get("/api/v1/backlogOs")
    Public Method Get()


EndClass

Method New() Class NgInd014backlogOsController
    _Super:New()
Return

Method Get() Class NgInd014backlogOsController

    Local oJson      := JsonObject():New()
    Local aParams    := {}
    Local cJson      := '{"items": [{'
    Local nCount     := 1
    Local aCollumns  := {}
    Local cDataBase  := Upper( TcGetDb() )
    Local cAliasQry  := GetNextAlias()
    Local cQuery     := "%"
    Local cQryOrdGp  := "%"
    Local cQuerySTJ  := '%'
    Local cQueryST9  := '%'
    Local cDeData    := ''
    Local cAteData   := ''
    Local cDeBem     := ''
    Local cAteBem    := ''
    Local cDeCcusto  := ''
    Local cAteCcusto := ''
    Local cDeCentra  := ''
    Local cAteCentra := ''
    Local nTamBem    := FwTamSX3( 'T9_CODBEM' )[ 1 ]
    Local nTamCC     := FwTamSX3( 'T9_CCUSTO' )[ 1 ]
    Local nTamCT     := FwTamSX3( 'T9_CENTRAB' )[ 1 ]

    oJson:FromJson( oRest:GetQueryRequest()['value'] )

    // Pega os parametros recebidos do front
    cDeData  := StrTran( oJson:GetJsonObject( 'deData' ),  '-' , '' )
    cAteData := StrTran( oJson:GetJsonObject( 'ateData' ),  '-' , '' )

    cDeBem   := PadR( oJson:GetJsonObject( 'deBem' ), nTamBem )

    If 'ZZZ' $ Upper( oJson:GetJsonObject( 'ateBem' ) )
      cAteBem := PadR( oJson:GetJsonObject( 'ateBem' ), nTamBem, 'Z' )
    Else
      cAteBem := PadR( oJson:GetJsonObject( 'ateBem' ), nTamBem )
    EndIf

    cDeCcusto := PadR( oJson:GetJsonObject( 'deCcusto' ), nTamCC )

    If 'ZZZ' $ Upper( oJson:GetJsonObject( 'ateCcusto' ) )
      cAteCcusto := PadR( oJson:GetJsonObject( 'ateCcusto' ), nTamCC, 'Z' )
    Else
      cAteCcusto := PadR( oJson:GetJsonObject( 'ateCcusto' ), nTamCC )
    EndIf

    cDeCentra := PadR( oJson:GetJsonObject( 'deCentra' ), nTamCT )

    If 'ZZZ' $ Upper( oJson:GetJsonObject( 'ateCentra' ) )
      cAteCentra := PadR( oJson:GetJsonObject( 'ateCentra' ), nTamCT, 'Z' )
    Else
      cAteCentra := PadR( oJson:GetJsonObject( 'ateCentra' ), nTamCT )
    EndIf

    // Trativa para que a query busque corretamente os valores de mes/ano das ordens de serviço.
    If cDataBase == 'ORACLE'
      cQuery    += " EXTRACT( YEAR FROM TO_DATE( TJ_DTMPINI, 'YYYYMMDD') ) as year, EXTRACT( MONTH FROM TO_DATE( TJ_DTMPINI, 'YYYYMMDD' ) ) as month, count( TJ_FILIAL ) AS total %"
      cQryOrdGp += " EXTRACT( YEAR FROM TO_DATE( TJ_DTMPINI, 'YYYYMMDD') ), EXTRACT( MONTH FROM TO_DATE( TJ_DTMPINI, 'YYYYMMDD' ) ) "
      cQryOrdGp += " ORDER BY EXTRACT( YEAR FROM TO_DATE( TJ_DTMPINI, 'YYYYMMDD' ) ), EXTRACT( MONTH FROM TO_DATE( TJ_DTMPINI, 'YYYYMMDD' ) ) %"
    ElseIf cDataBase == 'POSTGRES'
      cQuery    += " DATE_PART( 'YEAR', TO_DATE( TJ_DTMPINI, 'YYYYMMDD' ) ) AS year, DATE_PART( 'MONTH', TO_DATE( TJ_DTMPINI, 'YYYYMMDD' ) ) AS month, count( TJ_FILIAL ) AS total %"
      cQryOrdGp += " DATE_PART( 'YEAR', TO_DATE( TJ_DTMPINI, 'YYYYMMDD' ) ), DATE_PART( 'MONTH', TO_DATE( TJ_DTMPINI, 'YYYYMMDD' ) ) "
      cQryOrdGp += " ORDER BY DATE_PART( 'YEAR', TO_DATE( TJ_DTMPINI, 'YYYYMMDD' ) ), DATE_PART( 'MONTH', TO_DATE( TJ_DTMPINI, 'YYYYMMDD' ) ) %"
    Else
      cQuery    += " YEAR( TJ_DTMPINI ) as year, MONTH( TJ_DTMPINI ) as month, count( TJ_FILIAL ) AS total %"
      cQryOrdGp += " YEAR( TJ_DTMPINI ), MONTH( TJ_DTMPINI ) "
      cQryOrdGp += " ORDER BY YEAR( TJ_DTMPINI ), MONTH( TJ_DTMPINI ) %"
    EndIf

    // Adiciona os valores na query
    cQuerySTJ += ' TJ.TJ_DTMPINI BETWEEN ' + ValToSQL( cDeData ) + ' AND ' + ValToSQL( cAteData ) + ' AND '
    cQuerySTJ += " TJ.D_E_L_E_T_ = ' ' %"

    cQueryST9 += ' T9.T9_CODBEM BETWEEN '      + ValToSQL( cDeBem ) + ' AND ' + ValToSQL( cAteBem )
    cQueryST9 += ' AND T9.T9_CCUSTO BETWEEN '  + ValToSQL( cDeCcusto ) + ' AND ' + ValToSQL( cAteCcusto )
    cQueryST9 += ' AND T9.T9_CENTRAB BETWEEN ' + ValToSQL( cDeCentra ) + ' AND ' + ValToSQL(cAteCentra ) + ' AND '
    cQueryST9 += " T9.D_E_L_E_T_ = ' ' %"

    BeginSQL alias cAliasQry
      SELECT %exp:cQuery%
        FROM %table:ST9% T9
      INNER JOIN %table:STJ% TJ ON
            TJ.TJ_FILIAL = %xFilial:STJ%
        AND TJ.TJ_CODBEM = T9.T9_CODBEM
        AND %exp:cQuerySTJ%
        AND TJ.TJ_SITUACA = 'L'
        AND TJ.TJ_TERMINO = 'N'
      WHERE T9.T9_FILIAL = %xFilial:ST9%
        AND %exp:cQueryST9%
        GROUP BY %exp:cQryOrdGp%

    EndSQL

    While (cAliasQry)->( !Eof() )

      If nCount == 1
        cJson += '"ano":' + cValtoChar( (cAliasQry)->year ) + ', "mes": ' + cValToChar( (cAliasQry)->month ) + ', "quantidade": ' + cValToChar( (cAliasQry)->total ) + '}'
      Else
        cJson += ', { "ano":' + cValtoChar( (cAliasQry)->year ) + ', "mes": ' + cValToChar( (cAliasQry)->month ) + ', "quantidade": ' + cValToChar( (cAliasQry)->total ) + '}'
      EndIf

      (cAliasQry)->(dbSkip())
      nCount ++

    End

    If nCount > 1
      cJson += ']}'
    Else
      cJson := '{"items": [] }'
    EndIf

    (cAliasQry)->( dbCloseArea() )

    oRest:SetResponse( cJson )

    FwFreeArray( aCollumns )
    FwFreeArray( aParams )

Return

