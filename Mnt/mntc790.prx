#include "mntc790.ch" 
#include "PROTHEUS.CH"
#include 'FWMVCDEF.ch'   

//-------------------------------------------------------------------
/*/{Protheus.doc} MNTC790
Consulta de Ordens de Serviço
@type function

@author Alexandre Santos
@since  30/11/2023

@param 
@return
/*/
//-------------------------------------------------------------------
Function MNTC790()

	Local aAreaSTJ    := STJ->( FWGetArea() )
	Local aCores      := {}
	Local cFuncBkp    := FunName()

	Private aRotina   := MenuDef()
	Private cAls790   := GetNextAlias()
	Private cCadastro := OemtoAnsi( STR0001 ) // Ordem de Servico
	Private oTemp790

	SetFunName( 'MNTC790' )

	If ExistBlock( 'MNTC7902' )

		aCores := ExecBlock( 'MNTC7902', .F., .F. )

	EndIf

	If TT9->( FieldPos( 'TT9_CARACT' ) ) > 0

		If Pergunte( 'MNC790', .T. )

			/*----------------------------------------+
			| Cria estrutura da na tabela temporária. |
			+----------------------------------------*/
			fCriaTemp()

			/*-------------------------------------------+
			| Faz a carga de dados na tabela temporária. |
			+-------------------------------------------*/
			fLoadTemp()

			/*-------------------------------------------------+
			| Cria browse conforme dados da tabela temporária. |
			+-------------------------------------------------*/
			fCriaBrow( aCores )

			/*-------------------------+
			| Deleta objeto do browse. |
			+-------------------------*/
			oTemp790:Delete()

		EndIf

	Else

		mBrowse( 6, 1, 22, 75, 'STJ', , , , , , aCores )

	EndIf
	
	SetFunName( cFuncBkp )

	FWRestArea( aAreaSTJ )

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} MNTC790Vld
Valid. do grupo de perguntas MNC790.
@type function

@author Alexandre Santos
@since  29/11/2023

@param 	cParam , string, Parâmetro que será validado.
@return boolean, Indica se o parâmetro foi validado.
/*/
//-------------------------------------------------------------------
Function MNTC790Vld( cParam )

	Local lRet := .T.

	Do Case

		Case cParam == '01' // De Filial

			If !Empty( MV_PAR01 )

                lRet := ExistCPO( 'SM0', SM0->M0_CODIGO + MV_PAR01 )

            EndIf

            If lRet .And. !Empty( MV_PAR02 ) .And.;
                !( MV_PAR02 == Replicate( 'Z', FwSizeFilial() ) )

                lRet := AteCodigo( 'SM0', SM0->M0_CODIGO + MV_PAR01, SM0->M0_CODIGO + MV_PAR02, 10 )

            EndIf

		Case cParam == '02' // Até Filial

			If !( MV_PAR02 == Replicate( 'Z', FwSizeFilial() ) )
			
				lRet := AteCodigo( 'SM0', SM0->M0_CODIGO + MV_PAR01, SM0->M0_CODIGO + MV_PAR02, 10 )
				
			EndIf

		Case cParam == '03' // De Bem

			If !Empty( MV_PAR03 )

                lRet := ExistCPO( 'ST9', MV_PAR03, 1 )

            EndIf

            If lRet .And. !Empty( MV_PAR04 ) .And.;
                !( MV_PAR04 == Replicate( 'Z', FWTamSX3( 'T9_CODBEM' )[1] ) )

                lRet := AteCodigo( 'ST9', MV_PAR03, MV_PAR04, 10 )

            EndIf

		Case cParam == '04' // Até Bem

			If !( MV_PAR04 == Replicate( 'Z', FWTamSX3( 'T9_CODBEM' )[1] ) )
			
				lRet := AteCodigo( 'ST9', MV_PAR03, MV_PAR04, 10 )
				
			EndIf

		Case cParam == '05' // De Família

			If !Empty( MV_PAR05 )

                lRet := ExistCPO( 'ST6', MV_PAR05, 1 )

            EndIf

            If lRet .And. !Empty( MV_PAR06 ) .And.;
                !( MV_PAR06 == Replicate( 'Z', FWTamSX3( 'T6_CODFAMI' )[1] ) )

                lRet := AteCodigo( 'ST6', MV_PAR05, MV_PAR06, 10 )

            EndIf

		Case cParam == '06' // Até Família

			If !( MV_PAR06 == Replicate( 'Z', FWTamSX3( 'T6_CODFAMI' )[1] ) )
			
				lRet := AteCodigo( 'ST6', MV_PAR05, MV_PAR06, 10 )
				
			EndIf

		Case cParam == '07' // De Modelo

			If !Empty( MV_PAR07 )

                lRet := ExistCPO( 'TQR', MV_PAR07, 1 )

            EndIf

            If lRet .And. !Empty( MV_PAR08 ) .And.;
                !( MV_PAR08 == Replicate( 'Z', FWTamSX3( 'TQR_TIPMOD' )[1] ) )

                lRet := AteCodigo( 'TQR', MV_PAR07, MV_PAR08, 10 )

            EndIf

		Case cParam == '08' // Até Modelo

			If !( MV_PAR08 == Replicate( 'Z', FWTamSX3( 'TQR_TIPMOD' )[1] ) )
			
				lRet := AteCodigo( 'TQR', MV_PAR07, MV_PAR08, 10 )
				
			EndIf

		Case cParam == '09' // De Centro de Custo

			If !Empty( MV_PAR09 )

                lRet := ExistCPO( 'CTT', MV_PAR09, 1 )

            EndIf

            If lRet .And. !Empty( MV_PAR10 ) .And.;
                !( MV_PAR10 == Replicate( 'Z', FWTamSX3( 'CTT_CUSTO' )[1] ) )

                lRet := AteCodigo( 'CTT', MV_PAR09, MV_PAR10, 10 )

            EndIf

		Case cParam == '10' // Até Centro de Custo

			If !( MV_PAR10 == Replicate( 'Z', FWTamSX3( 'CTT_CUSTO' )[1] ) )
			
				lRet := AteCodigo( 'CTT', MV_PAR09, MV_PAR10, 10 )
				
			EndIf

		Case cParam == '11' // De Centro de Trabaho

			If !Empty( MV_PAR11 )

                lRet := ExistCPO( 'SHB', MV_PAR11, 1 )

            EndIf

            If lRet .And. !Empty( MV_PAR12 ) .And.;
                !( MV_PAR12 == Replicate( 'Z', FWTamSX3( 'HB_COD' )[1] ) )

                lRet := AteCodigo( 'SHB', MV_PAR11, MV_PAR12, 10 )

            EndIf

		Case cParam == '12' // Até Centro de Trabalho

			If !( MV_PAR12 == Replicate( 'Z', FWTamSX3( 'HB_COD' )[1] ) )
			
				lRet := AteCodigo( 'SHB', MV_PAR11, MV_PAR12, 10 )
				
			EndIf

		Case cParam == '13' // De Ordem de Serviço

			If !Empty( MV_PAR13 )

                lRet := ExistCPO( 'STJ', MV_PAR13, 1 )

            EndIf

            If lRet .And. !Empty( MV_PAR14 ) .And.;
                !( MV_PAR14 == Replicate( 'Z', FWTamSX3( 'TJ_ORDEM' )[1] ) )

                lRet := AteCodigo( 'STJ', MV_PAR13, MV_PAR14, 10 )

            EndIf

		Case cParam == '14' // Até Ordem de Serviço

			If !( MV_PAR14 == Replicate( 'Z', FWTamSX3( 'TJ_ORDEM' )[1] ) )
			
				lRet := AteCodigo( 'STJ', MV_PAR13, MV_PAR14, 10 )
				
			EndIf

		Case cParam == '15' // De Serviço

			If !Empty( MV_PAR15 )

                lRet := ExistCPO( 'ST4', MV_PAR15, 1 )

            EndIf

            If lRet .And. !Empty( MV_PAR16 ) .And.;
                !( MV_PAR16 == Replicate( 'Z', FWTamSX3( 'T4_SERVICO' )[1] ) )

                lRet := AteCodigo( 'ST4', MV_PAR15, MV_PAR16, 10 )

            EndIf

		Case cParam == '16' // Até Serviço

			If !( MV_PAR16 == Replicate( 'Z', FWTamSX3( 'T4_SERVICO' )[1] ) )
			
				lRet := AteCodigo( 'ST4', MV_PAR15, MV_PAR16, 10 )
				
			EndIf

		Case cParam == '17' // De Data

			lRet := NaoVazio( MV_PAR17 )

            If lRet .And. !Empty( MV_PAR18 ) .And.;
                MV_PAR17 > MV_PAR18

                Help( '', 1, 'DATAINVALI' )

                lRet := .F.

            EndIf

		Case cParam == '18' // Até Data

			If MV_PAR17 > MV_PAR18

                Help( '', 1, 'DATAINVALI' )

                lRet := .F.

            EndIf

		Case cParam == '19' // Tipo de O.S.

			lRet := NaoVazio()

	End Case
	
Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTC790Per
Apresenta o pergunte MNC790 e faz o reload da consulta.
@type function

@author Alexandre Santos
@since 30/11/2023

@param
@return
/*/
//---------------------------------------------------------------------
Function MNTC790Per()

	If Pergunte( 'MNC790', .T. )
		
        dbSelectArea( cAls790 )
        Zap
		
		/*-------------------------------------------+
        | Faz a carga de dados na tabela temporária. |
        +-------------------------------------------*/
	    fLoadTemp()

    EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTC790Men
Chama rotinas do menu relacional.
@type function

@author Alexandre Santos
@since 30/11/2023

@param cOption, string, Indica a rotina que deve ser chamada.
@return
/*/
//---------------------------------------------------------------------
Function MNTC790Men( cOption )

    If TT9->( FieldPos( 'TT9_CARACT' ) ) > 0

		dbSelectArea( 'STJ' )
		msGoTo( (cAls790)->RECSTJ )

	EndIf

	Do Case

		Case cOption == '01'

			MNTC600C()

		Case cOption == '02'

			MNTC600D()

		Case cOption == '03'

			MNTC550A()

		Case cOption == '04'

			MNTC040A()

		Case cOption == '05'

			MNTC550B()

		Case cOption == '06'

			MNTC290( STJ->TJ_ORDEM )
		
		Case cOption == '07'

			NGCAD01( 'STJ', RecNo(), 2 )

	End Case
    
Return 

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Menu da rotina
@type function

@author Alexandre Santos
@since 30/11/2023

@param
@return
/*/
//---------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina := {}

	ADD OPTION aRotina TITLE STR0011 ACTION "MNTC790Per()"       OPERATION 3 ACCESS 0 // Nova Consulta
	ADD OPTION aRotina TITLE STR0003 ACTION "MNTC790Men( '07' )" OPERATION 2 ACCESS 0 // Visual.
	ADD OPTION aRotina TITLE STR0004 ACTION "MNTC790Men( '01' )" OPERATION 6 ACCESS 0 // Detalhes
    ADD OPTION aRotina TITLE STR0005 ACTION "MNTC790Men( '02' )" OPERATION 6 ACCESS 0 // Ocorren.
	ADD OPTION aRotina TITLE STR0006 ACTION "MNTC790Men( '03' )" OPERATION 6 ACCESS 0 // Problemas
    ADD OPTION aRotina TITLE STR0007 ACTION "MNTC790Men( '04' )" OPERATION 6 ACCESS 0 // Motivo Atraso
	ADD OPTION aRotina TITLE STR0008 ACTION "MNTC790Men( '05' )" OPERATION 6 ACCESS 0 // Etapas
	ADD OPTION aRotina TITLE STR0010 ACTION "MsDocument"         OPERATION 6 ACCESS 0 // Conhecimento
							
	If SuperGetMV( 'MV_NGMNTES', .F., 'N' ) == 'S'

		ADD OPTION aRotina TITLE STR0009 ACTION "MNTC790Men( '06' )" OPERATION 6 ACCESS 0 // Sol. Compra

	EndIf

	If ExistBlock( 'MNTC7901' )
		
		aRotina := ExecBlock( 'MNTC7901', .F., .F., { aRotina } )
	
	EndIf

Return aRotina

//---------------------------------------------------------------------
/*/{Protheus.doc} fCriaTemp
Cria a estrutura da tabela temporária.
@type function

@author Alexandre Santos
@since 30/11/2023

@param
@return
/*/
//---------------------------------------------------------------------
Static Function fCriaTemp()

    Local aFields := {}

    aAdd( aFields, { 'TJ_FILIAL' , 'C', FWSizeFilial()             , 00 } )
	aAdd( aFields, { 'TJ_ORDEM'  , 'C', FWTamSX3( 'TJ_ORDEM' )[1]  , 00 } )
	aAdd( aFields, { 'TJ_PLANO'  , 'C', FWTamSX3( 'TJ_PLANO' )[1]  , 00 } )
	aAdd( aFields, { 'TJ_TIPOOS' , 'C', FWTamSX3( 'TJ_TIPOOS' )[1] , 00 } )
	aAdd( aFields, { 'TJ_SITUACA', 'C', 01                         , 00 } )
	aAdd( aFields, { 'TJ_TERMINO', 'C', 01                         , 00 } )
	aAdd( aFields, { 'TJ_CODBEM' , 'C', FWTamSX3( 'T9_CODBEM' )[1] , 00 } )
	aAdd( aFields, { 'TJ_NOMBEM' , 'C', FWTamSX3( 'T9_NOME' )[1]   , 00 } )
	aAdd( aFields, { 'TJ_SERVICO', 'C', FWTamSX3( 'T4_SERVICO' )[1], 00 } )
	aAdd( aFields, { 'TJ_NOMSERV', 'C', FWTamSX3( 'T4_NOME' )[1]   , 00 } )
	aAdd( aFields, { 'TJ_SEQRELA', 'C', FWTamSX3( 'TJ_SEQRELA' )[1], 00 } )
	aAdd( aFields, { 'TJ_DTPPINI', 'D', 10                         , 00 } )
	aAdd( aFields, { 'TJ_DTMPINI', 'D', 10                         , 00 } )
	aAdd( aFields, { 'RECSTJ'    , 'N', 18                         , 00 } )

	oTemp790 := FWTemporaryTable():New( cAls790, aFields )

	oTemp790:Create()
    
Return 

//---------------------------------------------------------------------
/*/{Protheus.doc} fLoadTemp
Carga inicial da tabela temporária.
@type function

@author Alexandre Santos
@since 30/11/2023

@param
@return
/*/
//---------------------------------------------------------------------
Static Function fLoadTemp()

	Local cQryTmpSTJ := ''

	cQryTmpSTJ := 'INSERT INTO ' + oTemp790:GetRealName()
	cQryTmpSTJ += 	" ( TJ_FILIAL , "
	cQryTmpSTJ += 	"   TJ_ORDEM  , "
	cQryTmpSTJ += 	"   TJ_PLANO  , "
	cQryTmpSTJ += 	"   TJ_SEQRELA, "
	cQryTmpSTJ += 	"   TJ_TIPOOS , "
	cQryTmpSTJ += 	"   TJ_SITUACA, "
	cQryTmpSTJ += 	"   TJ_TERMINO, "
	cQryTmpSTJ += 	"   TJ_CODBEM , "
	cQryTmpSTJ += 	"   TJ_NOMBEM , "
	cQryTmpSTJ += 	"   TJ_SERVICO, "
	cQryTmpSTJ += 	"   TJ_NOMSERV, "
	cQryTmpSTJ += 	"   TJ_DTPPINI, "
	cQryTmpSTJ += 	"   TJ_DTMPINI, "
	cQryTmpSTJ +=   "   RECSTJ ) "
	cQryTmpSTJ += "SELECT "
	cQryTmpSTJ +=      "STJ.TJ_FILIAL , "
	cQryTmpSTJ +=      "STJ.TJ_ORDEM  , "
	cQryTmpSTJ +=      "STJ.TJ_PLANO  , "
	cQryTmpSTJ +=      "STJ.TJ_SEQRELA, "
	cQryTmpSTJ +=      "STJ.TJ_TIPOOS , "
	cQryTmpSTJ +=      "STJ.TJ_SITUACA, "
	cQryTmpSTJ +=      "STJ.TJ_TERMINO, "
	cQryTmpSTJ +=      "STJ.TJ_CODBEM , "
	cQryTmpSTJ +=      "ST9.T9_NOME   , "
	cQryTmpSTJ +=      "STJ.TJ_SERVICO, "
	cQryTmpSTJ +=      "ST4.T4_NOME   , "
	cQryTmpSTJ += 	   "STJ.TJ_DTPRINI, "
	cQryTmpSTJ += 	   "STJ.TJ_DTMPINI, "
	cQryTmpSTJ +=      "STJ.R_E_C_N_O_  "
	cQryTmpSTJ += "FROM "
	cQryTmpSTJ +=    RetSQLName( 'STJ' ) + " STJ "
	cQryTmpSTJ += "INNER JOIN "
	cQryTmpSTJ +=    RetSQLName( 'ST9' ) + " ST9 ON "
	cQryTmpSTJ +=        "ST9.T9_CODBEM  = STJ.TJ_CODBEM AND "
	cQryTmpSTJ +=        "ST9.T9_CODFAMI BETWEEN " + ValToSQL( MV_PAR05 ) + " AND " + ValToSQL( MV_PAR06 ) + " AND "
	cQryTmpSTJ +=        "ST9.T9_TIPMOD  BETWEEN " + ValToSQL( MV_PAR07 ) + " AND " + ValToSQL( MV_PAR08 ) + " AND "
	cQryTmpSTJ +=        "ST9.D_E_L_E_T_ = ' '           AND "
	cQryTmpSTJ +=        NGModComp( 'ST9', 'STJ' )
	cQryTmpSTJ += " INNER JOIN "
	cQryTmpSTJ +=    RetSQLName( 'ST4' ) + " ST4 ON "
	cQryTmpSTJ +=        "ST4.T4_SERVICO = STJ.TJ_SERVICO AND "
	cQryTmpSTJ +=        "ST4.D_E_L_E_T_ = ' '            AND "
	cQryTmpSTJ +=        NGModComp( 'ST4', 'STJ' )
	cQryTmpSTJ += " WHERE "
	cQryTmpSTJ +=    "STJ.TJ_FILIAL   BETWEEN " + ValToSQL( MV_PAR01 ) + " AND " + ValToSQL( MV_PAR02 ) + " AND "
	cQryTmpSTJ +=    "STJ.TJ_ORDEM    BETWEEN " + ValToSQL( MV_PAR13 ) + " AND " + ValToSQL( MV_PAR14 ) + " AND "
	cQryTmpSTJ +=    "STJ.TJ_SERVICO  BETWEEN " + ValToSQL( MV_PAR15 ) + " AND " + ValToSQL( MV_PAR16 ) + " AND "
	cQryTmpSTJ +=    "STJ.TJ_CODBEM   BETWEEN " + ValToSQL( MV_PAR03 ) + " AND " + ValToSQL( MV_PAR04 ) + " AND "
	cQryTmpSTJ +=    "STJ.TJ_DTMPINI  BETWEEN " + ValToSQL( MV_PAR17 ) + " AND " + ValToSQL( MV_PAR18 ) + " AND "
	cQryTmpSTJ +=    "STJ.TJ_CCUSTO   BETWEEN " + ValToSQL( MV_PAR09 ) + " AND " + ValToSQL( MV_PAR10 ) + " AND "
	cQryTmpSTJ +=    "STJ.TJ_CENTRAB  BETWEEN " + ValToSQL( MV_PAR11 ) + " AND " + ValToSQL( MV_PAR12 ) + " AND "

	If MV_PAR19 == 4

		cQryTmpSTJ += " STJ.TJ_TERMINO = 'S' AND "

	ElseIf MV_PAR19 != 5

		cQryTmpSTJ += " STJ.TJ_TERMINO = 'N' AND "

		Do Case

			Case MV_PAR19 == 1

				cQryTmpSTJ += " STJ.TJ_SITUACA IN ( 'P', 'L' ) AND "

			Case MV_PAR19 == 2

				cQryTmpSTJ += " STJ.TJ_SITUACA = 'P' AND "

			Case MV_PAR19 == 3

				cQryTmpSTJ += " STJ.TJ_SITUACA = 'C' AND "

		End Case

	EndIf

	cQryTmpSTJ += "STJ.D_E_L_E_T_ = ' ' "

	TcSQLExec( cQryTmpSTJ )

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} fCriaBrow
Cria o browse principal da consulta.
@type function

@author Alexandre Santos
@since 30/11/2023

@param  aLegend, array, Legenda utilizada no browse principal.
@return
/*/
//---------------------------------------------------------------------
Static Function fCriaBrow( aLegend )
	
	Local aFldsBrw := {}
	Local aFiltBrw := {}
	Local nInd1    := 0

	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_FILIAL' ) , 'TJ_FILIAL' , 'C', FwSizeFilial()             , 00, '@!' } ) // Filial
	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_ORDEM' )  , 'TJ_ORDEM'  , 'C', FWTamSX3( 'TJ_ORDEM' )[1]  , 00, '@!' } ) // Ordem de Serviço
	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_PLANO' )  , 'TJ_PLANO'  , 'C', FWTamSX3( 'TJ_PLANO' )[1]  , 00, '@!' } ) // Plano
	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_TIPOOS' ) , 'TJ_TIPOOS' , 'C', 01                         , 00, '@!' } ) // Tipo O.S.
	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_CODBEM' ) , 'TJ_CODBEM' , 'C', FWTamSX3( 'T9_CODBEM' )[1] , 00, '@!' } ) // Bem
	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_NOMBEM' ) , 'TJ_NOMBEM' , 'C', FWTamSX3( 'T9_NOME' )[1]   , 00, '@!' } ) // Nome do Bem
	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_SERVICO' ), 'TJ_SERVICO', 'C', FWTamSX3( 'T4_SERVICO' )[1], 00, '@!' } ) // Serviço
	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_NOMSERV' ), 'TJ_NOMSERV', 'C', FWTamSX3( 'T4_NOME' )[1]   , 00, '@!' } ) // Nome do Serviço
	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_SEQRELA' ), 'TJ_SEQRELA', 'C', FWTamSX3( 'TJ_SEQRELA' )[1], 00, '@!' } ) // Sequencia
	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_DTPPINI' ), 'TJ_DTPPINI', 'D', 10                         , 00, '@!' } ) // Nome do Serviço
	aAdd( aFldsBrw, { FWX3Titulo( 'TJ_DTMPINI' ), 'TJ_DTMPINI', 'D', 10                         , 00, '@!' } ) // Sequencia

	aAdd( aFiltBrw, { 'TJ_FILIAL' , FWX3Titulo( 'TJ_FILIAL' ) , 'C', FwSizeFilial()             , 00, '@!' } ) // Filial
	aAdd( aFiltBrw, { 'TJ_ORDEM'  , FWX3Titulo( 'TJ_ORDEM' )  , 'C', FWTamSX3( 'TJ_ORDEM' )[1]  , 00, '@!' } ) // Ordem de Serviço
	aAdd( aFiltBrw, { 'TJ_PLANO'  , FWX3Titulo( 'TJ_PLANO' )  , 'C', FWTamSX3( 'TJ_PLANO' )[1]  , 00, '@!' } ) // Plano
	aAdd( aFiltBrw, { 'TJ_TIPOOS' , FWX3Titulo( 'TJ_TIPOOS' ) , 'C', 01                         , 00, '@!' } ) // Tipo O.S.
	aAdd( aFiltBrw, { 'TJ_CODBEM' , FWX3Titulo( 'TJ_CODBEM' ) , 'C', FWTamSX3( 'T9_CODBEM' )[1] , 00, '@!' } ) // Bem
	aAdd( aFiltBrw, { 'TJ_NOMBEM' , FWX3Titulo( 'TJ_NOMBEM' ) , 'C', FWTamSX3( 'T9_NOME' )[1]   , 00, '@!' } ) // Nome do Bem
	aAdd( aFiltBrw, { 'TJ_SERVICO', FWX3Titulo( 'TJ_SERVICO' ), 'C', FWTamSX3( 'T4_SERVICO' )[1], 00, '@!' } ) // Serviço
	aAdd( aFiltBrw, { 'TJ_NOMSERV', FWX3Titulo( 'TJ_NOMSERV' ), 'C', FWTamSX3( 'T4_NOME' )[1]   , 00, '@!' } ) // Nome do Serviço
	aAdd( aFiltBrw, { 'TJ_SEQRELA', FWX3Titulo( 'TJ_SEQRELA' ), 'C', FWTamSX3( 'TJ_SEQRELA' )[1], 00, '@!' } ) // Sequencia
	aAdd( aFiltBrw, { 'TJ_DTPPINI', FWX3Titulo( 'TJ_DTPPINI' ), 'D', 10                         , 00, '@!' } ) // Nome do Serviço
	aAdd( aFiltBrw, { 'TJ_DTMPINI', FWX3Titulo( 'TJ_DTMPINI' ), 'D', 10                         , 00, '@!' } ) // Sequencia

	oBrw790:= FWMBrowse():New()
	oBrw790:SetDescription( STR0001 ) // Consulta de Manutenções Multíplas
	oBrw790:SetTemporary( .T. )
	oBrw790:SetAlias( cAls790 )
	oBrw790:SetFields( aFldsBrw )
	oBrw790:SetFieldFilter( aFiltBrw )
	oBrw790:DisableReport()
	oBrw790:SetMenuDef( 'MNTC790' )

	For nInd1 := 1 To Len( aLegend )
		
		oBrw790:AddLegend( aLegend[nInd1,1], aLegend[nInd1,2] )

	Next nInd1

	oBrw790:Activate()

Return 
 