#include "PROTHEUS.CH"
#include "mdt.smartview.atestadoaso.ch"
#include "FWLIBVERSION.CH"
#include "totvs.ch"
#include "msobject.ch"
#include "totvs.framework.treports.integratedprovider.th"
 
namespace totvs.protheus.MDT.AtestadoAsoSmartViewBusinessObject

//-------------------------------------------------------------------
/*/{Protheus.doc} AtestadoAsoSmartViewBusinessObject
Objeto de negócio de abastecimentos por filial
Tabelas: TM0, TMY, SRA, SRJ, TM5, TM4, TMA, TMF, TME, CTT, TMC, TMK
@type Classe
 
@author Elisson França
@since 21/11/2023
@version P11
@return Nil
/*/
//-------------------------------------------------------------------
@totvsFrameworkTReportsIntegratedProvider( active=.T., team="SIGAMDT", tables="TM0, TMY, SRA, SRJ, TM5, TM4, TMA, TMF, TME, CTT, TMC, TMK", name="Atestado - ASO", country="ALL", initialRelease="12.1.2210" )
class AtestadoAsoSmartViewBusinessObject from totvs.framework.treports.integratedprovider.IntegratedProvider
    
    public method new() as object
    public method getAreas() as array
    public method getDescription() as character
    public method getData() as object
    public method getSchema() as object
    public method mdtAppend() as object

endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método Construtor do Objeto de Negócio
@type Método
 
@author Elisson França
@since 21/11/2023
@version P11
@return Nil
/*/
//-------------------------------------------------------------------
method new() as object class AtestadoAsoSmartViewBusinessObject
    
    _Super:new()
    self:setDisplayName( "Atestado - ASO" )

return self
 
//-------------------------------------------------------------------
/*/{Protheus.doc} getDescription
Descrição do Objeto de Negócio
@type Método
 
@author Elisson França
@since 21/11/2023
@version P11
@return caractere, Conteúdo da descrição do Objeto de Negócios
/*/
//-------------------------------------------------------------------
method getDescription() as character class AtestadoAsoSmartViewBusinessObject
return "Relatório do ASO"

//-------------------------------------------------------------------
/*/{Protheus.doc} getAreas
Áreas do menu que o Objeto de Negócio deve ficar
@type Método
 
@author Elisson França
@since 21/11/2023
@version P11
@return array, Retorna um array contendo as sessões do Menu em que o Objeto de Negócio deve aparecer
/*/
//-------------------------------------------------------------------
method getAreas() as array class AtestadoAsoSmartViewBusinessObject
return { "MDT" }

//-------------------------------------------------------------------
/*/{Protheus.doc} GetData
Método responsável pelo processamento dos dados enviados pelo 
Objeto de Negócio
@type Método

@author Elisson França
@since 21/11/2023
@version P11

@param nPage, numerico, Número da página atual
@param oFilter, objeto, Filtros aplicados pelo usuário

@return objeto, Retorna o próprio objeto
/*/
//-------------------------------------------------------------------
method getData( nPage as numeric, oFilter as object ) as object class AtestadoAsoSmartViewBusinessObject
    
    Local cAlias    as character
    Local cAliasAgen as character
    Local cAliasExam as character
    Local cNatexa   as character
    Local cPortDef   as character
    Local cIndPar   as character
    Local cNomeAgen as character
    Local cNomeTerm as character
    Local cAltura   as character
    Local cConfin   as character
    Local cTmc      as character
    Local cEletri   as character
    Local cPlat     as character
    Local cManciv   as character
    Local cExplo    as character
    Local cEscav    as character
    Local cSolda    as character
    Local cFrio     as character
    Local cRadia    as character
    Local cPress    as character
    Local cExames   as character
    Local cDataExam as character

    Local nExames  as numeric

    Local jParams as json

    cExames := ""
    nExames := 1
    jParams := oFilter:getParameters() // metodo para retorno do json dos parâmetros

    cAlias     := GetNextAlias()
    cAliasAgen := GetNextAlias()
    cAliasExam := GetNextAlias()

    BeginSQL Alias cAlias
        SELECT
            TMY.TMY_FILIAL, TM0.TM0_MAT, TMY.TMY_NUMASO, TMY.TMY_DTGERA,
            TMY.TMY_INDPAR, TMY.TMY_CODUSU, TMY.TMY_DESCRI, TMY.TMY_NATEXA,
            TMY.TMY_NOVFUN, TMY.TMY_NOVCC, TMY.TMY_NOVDEP, TMY.TMY_FILFUT,
            TMY.TMY_EMPFUT, TMY.TMY_ALTURA, TMY.TMY_CONFIN, TMY.TMY_TMC,
            TMY.TMY_ELETRI, TMY.TMY_PLAT, TMY.TMY_MANCIV, TMY.TMY_EXPLO,
            TMY.TMY_ESCAV, TMY.TMY_SOLDA, TMY.TMY_FRIO, TMY.TMY_RADIA,
            TMY.TMY_PRESS, TMY.TMY_OUTROS, TMY.TMY_NUMFIC, SRA.RA_MAT,
            SRA.RA_NOME, SRA.RA_NSOCIAL, SRA.RA_ENDEREC, SRA.RA_CIC,
            SRA.RA_CODFUNC, SRA.RA_ADMISSA,SRA.RA_NASC, SRA.RA_TPDEFFI,
            SRJ.RJ_DESC, TMK.TMK_NOMUSU, TMK.TMK_TELUSU, TMK.TMK_ENDUSU,
            TMK.TMK_NUMENT, CTT.CTT_DESC01, TMF.TMF_RESTRI, TMF.TMF_DTINIC,
            TMF.TMF_DTFIM, TME.TME_NOMRES
        FROM
            %table:TMY% TMY
            LEFT JOIN %table:TM0% TM0 ON
                TM0.TM0_FILIAL = %xFilial:TM0% AND 
                TM0.TM0_NUMFIC = TMY.TMY_NUMFIC AND
                TM0.%NotDel% AND TMY.%NotDel%
            LEFT JOIN %table:SRA% SRA ON 
                SRA.RA_FILIAL = %xFilial:SRA% AND 
                SRA.RA_MAT = TM0.TM0_MAT AND 
                SRA.%NotDel%
            LEFT JOIN %table:SRJ% SRJ ON 
                SRJ.RJ_FILIAL = %xFilial:SRJ% AND
                SRJ.RJ_FUNCAO = SRA.RA_CODFUNC AND
                SRJ.%NotDel%
            LEFT JOIN %table:TMK% TMK ON 
                TMK.TMK_FILIAL = %xFilial:TMK% AND
                TMK.TMK_CODUSU = TMY.TMY_CODUSU AND 
                TMK.%NotDel%
            LEFT JOIN %table:CTT% CTT ON 
                CTT.CTT_FILIAL = %xFilial:CTT% AND 
                CTT.CTT_CUSTO = TM0.TM0_CC AND 
                CTT.%NotDel% 
            LEFT JOIN %table:TMF% TMF ON 
                TMF.TMF_FILIAL = %xFilial:TMF% AND 
                TMF.TMF_NUMFIC = TM0.TM0_NUMFIC AND 
                TMF.%NotDel%
            LEFT JOIN %table:TME% TME ON 
                TME.TME_FILIAL = %xFilial:TME% AND 
                TME.TME_RESTRI = TMF.TMF_RESTRI AND 
                TME.%NotDel%
        WHERE 
            TMY.TMY_FILIAL = %xFilial:TMY% 
            AND TMY.TMY_NUMFIC = %exp:jParams[ "MV_PAR01", 1 ]%
            AND TMY.%NotDel%
    EndSQL

    //Query para buscar os exames do funcionário
    BeginSQL Alias cAliasExam
        SELECT 
            TM5.TM5_NUMFIC, TM5.TM5_NUMASO, TM5.TM5_DTRESU, TM5.TM5_INDRES,
            TM5.TM5_CODRES, TM5.TM5_NATEXA, TM4.TM4_NOMEXA
        FROM %table:TM5% TM5
            RIGHT JOIN %table:TMY% TMY ON
                TM5.TM5_NUMASO = TMY.TMY_NUMASO AND TMY.%NotDel%
            LEFT JOIN %table:TM0% TM0 ON
                TM0.TM0_FILIAL = %xFilial:TM0%  AND TM0.TM0_NUMFIC = TM5.TM5_NUMFIC AND TM0.%NotDel%
            LEFT JOIN %table:TM4% TM4 ON
                TM4.TM4_FILIAL = %xFilial:TM4%  AND TM4.TM4_EXAME = TM5.TM5_EXAME AND TM4.%NotDel%
        WHERE 
            TM5.TM5_FILIAL = %xFilial:TM5% 
            AND TMY.TMY_NUMFIC = %exp:jParams[ "MV_PAR01", 1 ]% 
            AND TM5.D_E_L_E_T_ = ' '
    EndSQL

    //Query para buscar os agentes expostos ao funcionário
    BeginSQL Alias cAliasAgen
        SELECT 
            TMC.TMC_NUMASO, TMC.TMC_AGENTE, TMA.TMA_NOMAGE
        FROM 
            %table:TMC% TMC
        LEFT JOIN %table:TMY% TMY ON
            TMY.TMY_FILIAL = %xFilial:TMY%  AND
            TMY.TMY_NUMASO = TMC.TMC_NUMASO AND
            TMY.%NotDel%
        LEFT JOIN %table:TMA% TMA ON
            TMA.TMA_FILIAL = %xFilial:TMA%  AND
            TMA.TMA_AGENTE = TMC.TMC_AGENTE AND
            TMA.%NotDel%
        WHERE 
            TMC.TMC_FILIAL = %xFilial:TMC%
            AND TMY.TMY_NUMFIC = %exp:jParams[ "MV_PAR01", 1 ]%
            AND TMC.%NotDel%
    EndSQL

     // Paginação
    If nPage == 1

        ( cAlias )->( dbGoTop() )
        ( cAliasExam )->( dbGoTop() )
        ( cAliasAgen )->( dbGoTop() )

    EndIf



    While !( cAliasExam )->( Eof() ) .And. ( cAliasExam )->TM5_NUMFIC = ( cAlias )->TMY_NUMFIC

        cExames += ( cAliasExam )->TM4_NOMEXA + CRLF

        cDataExam += ( cAliasExam )->TM5_DTRESU + CRLF

        ( cAliasExam )->( dbSkip() )

    End

    While !( cAliasAgen )->( Eof() ) .And. ( cAliasAgen )->TMC_NUMASO = ( cAlias )->TMY_NUMASO

        cNomeAgen += ( cAliasAgen )->TMC_AGENTE + "-" + Space( 3 ) + ( cAliasAgen )->TMA_NOMAGE + CRLF

        ( cAliasAgen )->( dbSkip() )

    End

    DbSelectArea( cAlias )
    dbGoTop()
    Do Case
        Case ( cAlias )->TMY_NATEXA == "1"
            cNatexa := STR0001
        Case ( cAlias )->TMY_NATEXA == "2"
            cNatexa := STR0002
        Case ( cAlias )->TMY_NATEXA == "3"
            cNatexa := STR0003
        Case ( cAlias )->TMY_NATEXA == "4"
            cNatexa := STR0004
        Case ( cAlias )->TMY_NATEXA == "5"
            cNatexa := STR0005
        Case ( cAlias )->TMY_NATEXA == "6"
            cNatexa := STR0006
    EndCase

    If !Empty( jParams[ 'MV_PAR05', 1 ] ) .And. jParams[ 'MV_PAR05', 1 ] = '1'

        Do Case
            Case ( cAlias )->RA_TPDEFFI == "0"
                cPortDef := STR0007
            Case ( cAlias )->RA_TPDEFFI == "1"
                cPortDef := STR0008
            Case ( cAlias )->RA_TPDEFFI == "2"
                cPortDef := STR0009
            Case ( cAlias )->RA_TPDEFFI == "3"
                cPortDef := STR0010
            Case ( cAlias )->RA_TPDEFFI == "4"
                cPortDef := STR0011
            Case ( cAlias )->RA_TPDEFFI == "5"
                cPortDef := STR0012
            Case ( cAlias )->RA_TPDEFFI == "6"
                cPortDef := STR0013
            Case ( cAlias )->RA_TPDEFFI == "x"
                cPortDef := STR0014
        EndCase

    Else

        cPortDef := " "

    EndIf

    Do Case
        Case ( cAlias )->TMY_INDPAR == "1"
            cIndPar := STR0015
        Case ( cAlias )->TMY_INDPAR == "2" .Or. ( cAlias )->TMY_INDPAR == "3" .And. jParams[ 'MV_PAR03', 1 ] = "1"
            cIndPar := STR0017
        Case ( cAlias )->TMY_INDPAR == "3" .And. jParams[ 'MV_PAR03', 1 ] = "2"
            cIndPar := STR0016
    EndCase

    If jParams[ 'MV_PAR04', 1 ] = "1"

        cIndPar += Space( 3 ) + "-" + Space( 3 ) + ( cAlias )->TME_NOMRES

    EndIf

    If ( cAlias )->TMY_ALTURA == "1"
        cAltura := STR0015
    Else
        cAltura := STR0017
    EndIf

    If ( cAlias )->TMY_CONFIN == "1"
        cConfin := STR0015
    Else
        cConfin := STR0017
    EndIf

    If ( cAlias )->TMY_TMC == "1"
        cTmc := STR0015
    Else
        cTmc := STR0017
    EndIf

    If ( cAlias )->TMY_ELETRI == "1"
        cEletri := STR0015
    Else
        cEletri := STR0017
    EndIf

    If ( cAlias )->TMY_PLAT == "1"
        cPlat := STR0015
    Else
        cPlat := STR0017
    EndIf

    If ( cAlias )->TMY_MANCIV == "1"
        cManciv := STR0015
    Else
        cManciv := STR0017
    EndIf

    If ( cAlias )->TMY_EXPLO == "1"
        cExplo := STR0015
    Else
        cExplo := STR0017
    EndIf

    If ( cAlias )->TMY_ESCAV == "1"
        cEscav := STR0015
    Else
        cEscav := STR0017
    EndIf

    If ( cAlias )->TMY_SOLDA == "1"
        cSolda := STR0015
    Else
        cSolda := STR0017
    EndIf
    
    If ( cAlias )->TMY_FRIO == "1"
        cFrio := STR0015
    Else
        cFrio := STR0017
    EndIf

    If ( cAlias )->TMY_RADIA == "1"
        cRadia := STR0015
    Else
        cRadia := STR0017
    EndIf

    If ( cAlias )->TMY_PRESS == "1"
        cPress := STR0015
    Else
        cPress := STR0017
    EndIf

    If !Empty( jParams[ 'MV_PAR02', 1 ] )

        cNomeTerm := Posicione( 'TMZ', 1, xFilial( 'TMZ' ) + jParams[ 'MV_PAR02', 1 ], 'TMZ_NOMTER' )

    Else

        cNomeTerm := ' '

    EndIf

    dbGoTop()
    While !( cAlias )->( Eof() )

        self:oData:appendData( { "TM0_MAT": ( cAlias )->TM0_MAT, ;
            "TMY_FILIAL" : ( cAlias )->TMY_FILIAL, ;
            "TMY_NUMASO" : ( cAlias )->TMY_NUMASO, ;
            "TMY_DTGERA" : totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TMY_DTGERA ), ;
            "TMY_INDPAR" : cIndPar               , ;
            "TMY_CODUSU" : ( cAlias )->TMY_CODUSU, ;
            "TMY_DESCRI" : ( cAlias )->TMY_DESCRI, ;
            "TMY_NATEXA" : cNatexa               , ;
            "TMY_NOVFUN" : ( cAlias )->TMY_NOVFUN, ;
            "TMY_NOVCC"  : ( cAlias )->TMY_NOVCC , ;
            "TMY_NOVDEP" : ( cAlias )->TMY_NOVDEP, ;
            "TMY_FILFUT" : ( cAlias )->TMY_FILFUT, ;
            "TMY_EMPFUT" : ( cAlias )->TMY_EMPFUT, ;
            "TMY_ALTURA" : cAltura               , ;
            "TMY_CONFIN" : cConfin               , ;
            "TMY_TMC"    : cTmc                  , ;
            "TMY_ELETRI" : cEletri               , ;
            "TMY_PLAT"   : cPlat                 , ;
            "TMY_MANCIV" : cManciv               , ;
            "TMY_EXPLO"  : cExplo                , ;
            "TMY_ESCAV"  : cEscav                , ;
            "TMY_SOLDA"  : cSolda                , ;
            "TMY_FRIO"   : cFrio                 , ;
            "TMY_RADIA"  : cRadia                , ;
            "TMY_PRESS"  : cPress                , ;
            "TMY_OUTROS" : ( cAlias )->TMY_OUTROS, ;
            "TMY_NUMFIC" : ( cAlias )->TMY_NUMFIC, ;
            "RA_MAT"     : ( cAlias )->RA_MAT    , ;
            "RA_NOME"    : ( cAlias )->RA_NOME   , ;
            "RA_NSOCIAL" : ( cAlias )->RA_NSOCIAL, ;
            "RA_ENDEREC" : ( cAlias )->RA_ENDEREC, ;
            "RA_CIC"     : ( cAlias )->RA_CIC    , ;
            "RA_CODFUNC" : ( cAlias )->RA_CODFUNC, ;
            "RA_ADMISSA" : totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->RA_ADMISSA ) , ;
            "RA_NASC"    : totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->RA_NASC )    , ;
            "RA_TPDEFFI" : cPortDef, ;
            "RJ_DESC"    : ( cAlias )->RJ_DESC   , ;
            "TMK_NOMUSU" : ( cAlias )->TMK_NOMUSU, ;
            "TMK_TELUSU" : ( cAlias )->TMK_TELUSU, ;
            "TMK_ENDUSU" : ( cAlias )->TMK_ENDUSU, ;
            "TMK_NUMENT" : ( cAlias )->TMK_NUMENT, ;
            "TM5_DTRESU" : cDataExam, ;
            "TM5_INDRES" : ( cAliasExam )->TM5_INDRES, ;
            "TM5_CODRES" : ( cAliasExam )->TM5_CODRES, ;
            "TM4_NOMEXA" : cExames, ;
            "CTT_DESC01" : ( cAlias )->CTT_DESC01, ;
            "TMF_RESTRI" : ( cAlias )->TMF_RESTRI, ;
            "TMF_DTINIC" : totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TMF_DTINIC ) , ;
            "TMF_DTFIM"  : totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TMF_DTFIM )  , ;
            "TME_NOMRES" : ( cAlias )->TME_NOMRES, ;
            "TMA_NOMAGE" : cNomeAgen, ;
            "TMZ_NOMTER" : cNomeTerm } )

        ( cAlias )->( dbSkip() )

    Enddo

    self:setHasNext( ( cAlias )->( !Eof() ) )

    ( cAlias )->( DBCloseArea() )
    ( cAliasAgen )->( DBCloseArea() )

return self:oData

//-------------------------------------------------------------------
/*/{Protheus.doc} getSchema
Método responsável por informar as características dos campos e 
também os parâmetros quando esses não são adicionados pela SX1
@type Método

@author Elisson França
@since 21/11/2023
@version P11

@return objeto, Retorna a si mesmo
/*/
//-------------------------------------------------------------------
method getSchema() as object class AtestadoAsoSmartViewBusinessObject

    self:AddParameter( 'MV_PAR01', 'Número da Ficha Médica'          , 'string' , .F. )
    self:AddParameter( 'MV_PAR02', 'Termo de Responsabilidade'       , 'string' , .F. )
    self:AddParameter( 'MV_PAR03', 'Imprimir Apto com Restrições'    , 'string' , .F. )
    self:AddParameter( 'MV_PAR04', 'Imprimir Restrições'             , 'string' , .F. )
    self:AddParameter( 'MV_PAR05', 'Imprimir portador de deficiência', 'string' , .F. )

    self:addProperty( 'TM0_MAT'   , 'Matricula da ficha médica'          , 'string', 'Matricula da ficha médica'         , 'TM0_MAT'    )
    self:addProperty( 'TMY_FILIAL', 'Filial do ASO'                      , 'string', 'Filial do ASO'                     , 'TMY_FILIAL' )
    self:addProperty( 'TMY_NUMASO', 'Número do ASO'                      , 'string', 'Número do ASO'                     , 'TMY_NUMASO' )
    self:addProperty( 'TMY_DTGERA', 'Data de geração do ASO'             , 'date'  , 'Data de geração'                   , 'TMY_DTGERA' )
    self:addProperty( 'TMY_INDPAR', 'Indicação do parecer médico'        , 'string', 'Parecer médico.'                   , 'TMY_INDPAR' )
    self:addProperty( 'TMY_CODUSU', 'Médico responsável'                 , 'string', 'Médico responsável'                , 'TMY_CODUSU' )
    self:addProperty( 'TMY_DESCRI', 'Descrição do parecer médico'        , 'string', 'Desc. parecer med'                 , 'TMY_DESCRI' )
    self:addProperty( 'TMY_NATEXA', 'Naturexa do exame'                  , 'string', 'Naturexa do exame'                 , 'TMY_NATEXA' )
    self:addProperty( 'TMY_NOVFUN', 'Nova função do funcionário'         , 'string', 'Nova função.'                      , 'TMY_NOVFUN' )
    self:addProperty( 'TMY_NOVCC' , 'Novo centro de custo do funcionário', 'string', 'Novo centro de custo'              , 'TMY_NOVCC'  )
    self:addProperty( 'TMY_NOVDEP', 'Novo departamento do funcionário'   , 'string', 'Novo departamento'                 , 'TMY_NOVDEP' )
    self:addProperty( 'TMY_FILFUT', 'Nova filial do funcionário'         , 'string', 'Nova filial do funcionário'        , 'TMY_FILFUT' )
    self:addProperty( 'TMY_EMPFUT', 'Nova empresa do funcionário'        , 'string', 'Nova empresa do funcionário'       , 'TMY_EMPFUT' )
    self:addProperty( 'TMY_ALTURA', 'Trabalho em altura'                 , 'string', 'Trabalho em altura'                , 'TMY_ALTURA' )
    self:addProperty( 'TMY_CONFIN', 'Trabalho em confinamento'           , 'string', 'Trabalho em confinamento'          , 'TMY_CONFIN' )
    self:addProperty( 'TMY_TMC'   , 'Trabalho com movimentação de carga' , 'string', 'Trabalho com movimentação de carga', 'TMY_TMC'    )
    self:addProperty( 'TMY_ELETRI', 'Trabalho com eletricidade'          , 'string', 'Trabalho com eletricidade'         , 'TMY_ELETRI' )
    self:addProperty( 'TMY_PLAT'  , 'Trabalho em plataforma'             , 'string', 'Trabalho em plataforma'            , 'TMY_PLAT'   )
    self:addProperty( 'TMY_MANCIV', 'Trabalho com manutenção civil'      , 'string', 'Trabalho com manutenção civil'     , 'TMY_MANCIV' )
    self:addProperty( 'TMY_EXPLO' , 'Trabalho com explosivos'            , 'string', 'Trabalho com explosivos'           , 'TMY_EXPLO'  )
    self:addProperty( 'TMY_ESCAV' , 'Trabalho em escavações'             , 'string', 'Trabalho em escavações'            , 'TMY_ESCAV'  )
    self:addProperty( 'TMY_SOLDA' , 'Trabalho com solda'                 , 'string', 'Trabalho com solda'                , 'TMY_SOLDA'  ) 
    self:addProperty( 'TMY_FRIO'  , 'Trabalho em situações frias'        , 'string', 'Trabalho em situações frias'       , 'TMY_FRIO'   ) 
    self:addProperty( 'TMY_RADIA' , 'Trabalho em radiação'               , 'string', 'Trabalho em radiação'              , 'TMY_RADIA'  ) 
    self:addProperty( 'TMY_PRESS' , 'Trabalho pressão'                   , 'string', 'Trabalho pressão'                  , 'TMY_PRESS'  )
    self:addProperty( 'TMY_OUTROS', 'Trabalho Outros'                    , 'string', 'Trabalho Outros'                   , 'TMY_OUTROS' )
    self:addProperty( 'TMY_NUMFIC', 'Número da ficha médica'             , 'string', 'Número da ficha médica'            , 'TMY_NUMFIC' )
    self:addProperty( 'TMC_AGENTE', 'Agente de risco vinculado ao ASO'   , 'string', 'Agente vinculado ao ASO'           , 'TMC_AGENTE' )
    self:addProperty( 'TMA_NOMAGE', 'Nome do Agente vinculado ao ASO'    , 'string', 'Agente vinculado ao ASO'           , 'TMA_NOMAGE' )
    self:addProperty( 'RA_MAT'    , 'Número da Matrícula'                , 'string', 'Matrícula'                         , 'RA_MAT'     )
    self:addProperty( 'RA_NOME'   , 'Nome do funcionário'                , 'string', 'Funcionário'                       , 'RA_NOME'    )
    self:addProperty( 'RA_NSOCIAL', 'Nome Social do funcionário'         , 'string', 'Nome Social do funcionário'        , 'RA_NSOCIAL' )
    self:addProperty( 'RA_ENDEREC', 'Endereço do Funcionário'            , 'string', 'Endereço'                          , 'RA_ENDEREC' )
    self:addProperty( 'RA_CIC'    , 'CPF do funcionário'                 , 'string', 'CPF do funcionário'                , 'RA_CIC'     )
    self:addProperty( 'RA_CODFUNC', 'Função do funcionário'              , 'string', 'Função do funcionário'             , 'RA_CODFUNC' )    
    self:addProperty( 'RA_ADMISSA', 'Admissão do funcionário'            , 'date'  , 'Admissão do funcionário'           , 'RA_ADMISSA' )    
    self:addProperty( 'RA_NASC'   , 'Data de nasc. do func.'             , 'date'  , 'Data de nasc. do func.'            , 'RA_NASC'    )    
    self:addProperty( 'RA_TPDEFFI', 'Tipo de deficiência'                , 'string', 'Tipo de deficiência'               , 'RA_TPDEFFI' )    
    self:addProperty( 'RJ_DESC'   , 'Descrição da função'                , 'string', 'Descrição da função'               , 'RJ_DESC'    )
    self:addProperty( 'TMK_NOMUSU', 'Nome do usuário'                    , 'string', 'Nome do usuário'                   , 'TMK_NOMUSU' )
    self:addProperty( 'TMK_TELUSU', 'Telefone do usuário'                , 'string', 'Telefone do usuário'               , 'TMK_TELUSU' )
    self:addProperty( 'TMK_ENDUSU', 'Endereço do usuário'                , 'string', 'Endereço do usuário'               , 'TMK_ENDUSU' )
    self:addProperty( 'TMK_NUMENT', 'Número da entidade classe'          , 'string', 'Número da entidade classe'         , 'TMK_NUMENT' )
    self:addProperty( 'TM5_DTRESU', 'Data Resultado do Exame'            , 'string', 'Data Resultado'                    , 'TM5_DTRESU' )
    self:addProperty( 'TM5_INDRES', 'Indicador Resultado Exame'          , 'string', 'Ind. Result.'                      , 'TM5_INDRES' )
    self:addProperty( 'TM5_CODRES', 'Cód. Conclusão Resultado'           , 'string', 'Concl. Result.'                    , 'TM5_CODRES' )
    self:addProperty( 'TM5_NATEXA', 'Indicador Natureza Exame'           , 'string', 'Natureza'                          , 'TM5_NATEXA' )
    self:addProperty( 'TM4_NOMEXA', 'Nome do Exame Médico'               , 'string', 'Nome Exame'                        , 'TM4_NOMEXA' )
    self:addProperty( 'CTT_DESC01', 'Descrição do centro de custo'       , 'string', 'Desc. do centro de custo'          , 'CTT_DESC01' )
    self:addProperty( 'TMF_RESTRI', 'Código da Restrição'                , 'string', 'Restriçaõ.'                        , 'TMF_RESTRI' )
    self:addProperty( 'TMF_DTINIC', 'Data Início Restrição'              , 'date'  , 'Data Início'                       , 'TMF_DTINIC' )
    self:addProperty( 'TMF_DTFIM' , 'Data Término Restrição'             , 'date'  , 'Data Término'                      , 'TMF_DTFIM'  )
    self:addProperty( 'TME_NOMRES', 'Nome da Restrição'                  , 'string', 'Nome Restric.'                     , 'TME_NOMRES' )
    self:addProperty( 'TMZ_NOMTER', 'Nome do Termo de Resp.'             , 'string', 'Nome do Termo de Resp.'            , 'TMZ_NOMTER' )

return self:oSchema
