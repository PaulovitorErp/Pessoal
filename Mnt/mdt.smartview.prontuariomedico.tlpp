#include "msobject.ch"
#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "totvs.framework.treports.integratedprovider.th"

namespace totvs.protheus.MDT.ProntuarioMedicoSmartViewBusinessObject

//-------------------------------------------------------------------
/*/{Protheus.doc} ProntuarioMedicoSmartViewBusinessObject
Objeto de negócio Prontuário Médico
Tabelas: TM0, SRA, TMN, TMO, TM5, TM4, TMU, TMF, TME, TNA, TME, TMS, TMR, TMT, TL9, TL6, TM2, TM1, TL5, TY3
@type Classe

@author Eloisa Anibaletto
@since 23/10/2023
@version P11
@return Nil
/*/
//-------------------------------------------------------------------
@totvsFrameworkTReportsIntegratedProvider( active=.T., team="SIGAMDT", tables="TM0, SRA, TMN, TMO, TM5, TM4, TMU, TMF, TME, TMS, TNA, TME, TMR, TMT, TL9, TL6, TM2, TM1, TL5, TY3", name="Prontuário Médico", country="ALL", initialRelease="12.1.2310" )
class ProntuarioMedicoSmartViewBusinessObject from totvs.framework.treports.integratedprovider.IntegratedProvider

    public method new() as object
    public method getAreas() as array
    public method getDescription() as character
    public method getData() as object
    public method getSchema() as object

endclass

//-------------------------------------------------------------------
/*/{Protheus.doc} New
Método Construtor do Objeto de Negócio
@type Método

@author Eloisa Anibaletto
@since 23/10/2023
@version P11
@return Nil
/*/
//-------------------------------------------------------------------
method new() as object class ProntuarioMedicoSmartViewBusinessObject
    _Super:new()
    self:setDisplayName( "Prontuário Médico" )
return self

//-------------------------------------------------------------------
/*/{Protheus.doc} getDescription
Descrição do Objeto de Negócio
@type Método

@author Eloisa Anibaletto
@since 23/10/2023
@version P11
@return caractere, Conteúdo da descrição do Objeto de Negócios
/*/
//-------------------------------------------------------------------
method getDescription() as character class ProntuarioMedicoSmartViewBusinessObject
return "Relatório da ficha médica e todo seu prontuário"

//-------------------------------------------------------------------
/*/{Protheus.doc} getAreas
Áreas do menu que o Objeto de Negócio deve ficar
@type Método

@author Eloisa Anibaletto
@since 23/10/2023
@version P11
@return array, Retorna um array contendo as sessões do Menu em que o Objeto de Negócio deve aparecer
/*/
//-------------------------------------------------------------------
method getAreas() as array class ProntuarioMedicoSmartViewBusinessObject
return { "MDT" }

//-------------------------------------------------------------------
/*/{Protheus.doc} GetData
Método responsável pelo processamento dos dados enviados pelo 
Objeto de Negócio
@type Método

@author Eloisa Anibaletto
@since 23/10/2023
@version P11

@param nPage, numerico, Número da página atual
@param oFilter, objeto, Filtros aplicados pelo usuário

@return objeto, Retorna o próprio objeto
/*/
//-------------------------------------------------------------------
method getData( nPage as numeric, oFilter as object ) as object class ProntuarioMedicoSmartViewBusinessObject

    Local cAlias      as character
    Local cMat        as character
    Local cNomeSocial as character
    Local cSRA        as character
    Local cTL5        as character
    Local cTL6        as character
    Local cTL9        as character
    Local cTM0        as character
    Local cTM1        as character
    Local cTM2        as character
    Local cTM4        as character
    Local cTM5        as character
    Local cTME        as character
    Local cTMF        as character
    Local cTMN        as character
    Local cTMO        as character
    Local cTMR        as character
    Local cTMS        as character
    Local cTMT        as character
    Local cTMU        as character
    Local cTNA        as character
    Local cTY3        as character

    Local jParams     as json

    Local nCount      as numeric

    nCount  := 0
    jParams := oFilter:getParameters() // metodo para retorno do json dos parâmetros

    cAlias  := GetNextAlias()
    cSRA       := xFilial( "SRA" )
    cTL5       := xFilial( "TL5" )
    cTL6       := xFilial( "TL6" )
    cTL9       := xFilial( "TL9" )
    cTM0       := xFilial( "TM0" )
    cTM1       := xFilial( "TM1" )
    cTM2       := xFilial( "TM2" )
    cTM4       := xFilial( "TM4" )
	cTM5       := xFilial( "TM5" )
    cTME       := xFilial( "TME" )
    cTMF       := xFilial( "TMF" )
    cTMN       := xFilial( "TMN" )
	cTMO       := xFilial( "TMO" )
	cTMR       := xFilial( "TMR" )
    cTMS       := xFilial( "TMS" )
    cTMT       := xFilial( "TMT" )
    cTMU       := xFilial( "TMU" )
    cTNA       := xFilial( "TNA" )
    cTY3       := xFilial( "TY3" )

    BeginSQL Alias cAlias
		SELECT TM0.TM0_FILIAL, TM0.TM0_NUMFIC, TM0.TM0_NOMFIC,
			TM0.TM0_DTIMPL, TM0.TM0_FILFUN, TM0.TM0_NUMDEP, TM0.TM0_CANDID,
			TM0.TM0_DTNASC, TM0.TM0_SEXO, TM0.TM0_SANGUE, TM0.TM0_FATORH, 
			TM0.TM0_DOADOR, TM0.TM0_DTDOAC, TM0.TM0_PESO, TM0.TM0_ALTURA, 
			TM0.TM0_FUMA, TM0.TM0_QTCIG, TM0.TM0_QTTEMP, TM0.TM0_FICANT, 
			TM0.TM0_DESCRI, SRA.RA_MAT, SRA.RA_NSOCIAL, SRA.RA_ENDEREC, SRA.RA_BAIRRO, 
			SRA.RA_COMPLEM, TMN.TMN_CODPRO, TMN.TMN_DTINIC, TMN.TMN_DTTERM, 
			TMO.TMO_NOMPRO, TM5.TM5_EXAME, TM5.TM5_CODRES, TM5.TM5_DTPROG, 
			TM5.TM5_DTRESU, TM5.TM5_INDRES, TM5.TM5_NATEXA, TM4.TM4_NOMEXA, 
			TMU.TMU_RESULT, TMF.TMF_RESTRI, TMF.TMF_DTINIC, TMF.TMF_DTFIM, 
			TME.TME_NOMRES, TNA.TNA_CID, TNA.TNA_DTINIC, TNA.TNA_DTFIM, TMR.TMR_DOENCA,
			TMT.TMT_DTCONS, TMT.TMT_CID, TMT.TMT_OCORRE, TM1.TM1_NOMEDI, TM1.TM1_UNIDAD, 
			TM2.TM2_CODMED, TM2.TM2_QTUTIL, TL9.TL9_VACINA, TL9.TL9_DTREAL, 
			TL9.TL9_DOSE, TL6.TL6_NOMVAC, TL5.TL5_MOTIVO, TL5.TL5_DTATEN, 
			TL5.TL5_HRATEN, TMS.TMS_NOMOTI, TY3.TY3_CODMED, TY3.TY3_QUANT,
            ISNULL( CAST( CAST( TMT.TMT_MDIAGN AS VARBINARY( 8000 ) ) AS VARCHAR( 8000 ) ), "" ) AS TMT_MDIAGN,
            ISNULL( CAST( CAST( TMT.TMT_MDESAT AS VARBINARY( 8000 ) ) AS VARCHAR( 8000 ) ), "" ) AS TMT_MDESAT,
            ISNULL( CAST( CAST( TMT.TMT_MQUEIX AS VARBINARY( 8000 ) ) AS VARCHAR( 8000 ) ), "" ) AS TMT_MQUEIX
		FROM %table:TM0% TM0
		LEFT JOIN %table:SRA% SRA ON
				SRA.RA_FILIAL = TM0.TM0_FILFUN
				AND SRA.RA_MAT = TM0.TM0_MAT
				AND %exp:cSRA% = SRA.RA_FILIAL 
				AND SRA.%notDel%
		LEFT JOIN %table:TMN% TMN ON
				TMN.TMN_NUMFIC = TM0.TM0_NUMFIC
				AND TMN.TMN_DTINIC >= %exp:jParams[ "MV_PAR03", 1 ]% 
                AND TMN.TMN_DTTERM <= %exp:jParams[ "MV_PAR04", 1 ]%
				AND %exp:cTMN% = TMN.TMN_FILIAL
				AND TMN.%notDel%
		LEFT JOIN %table:TMO% TMO ON
				TMO.TMO_CODPRO = TMN.TMN_CODPRO
				AND %exp:cTMO% = TMO.TMO_FILIAL
				AND TMO.%notDel%
		LEFT JOIN %table:TM5% TM5 ON
				TM5.TM5_NUMFIC = TM0.TM0_NUMFIC
                AND TM5.TM5_DTPROG = TM5.TM5_DTRESU
				AND %exp:cTM5% = TM5.TM5_FILIAL
				AND TM5.%notDel%
		LEFT JOIN %table:TM4% TM4 ON
				TM4.TM4_EXAME = TM5.TM5_EXAME
				AND %exp:cTM4% = TM4.TM4_FILIAL
				AND TM4.%notDel%
		LEFT JOIN %table:TMU% TMU ON
				TMU.TMU_CODRES = TM5.TM5_CODRES
				AND %exp:cTMU% = TMU.TMU_FILIAL
				AND TMU.%notDel%
		LEFT JOIN %table:TMF% TMF ON
				TMF.TMF_NUMFIC = TM0.TM0_NUMFIC
				AND %exp:cTMF% = TMF.TMF_FILIAL
				AND TMF.%notDel%
		LEFT JOIN %table:TME% TME ON
				TME.TME_RESTRI = TMF.TMF_RESTRI
				AND %exp:cTME% = TME.TME_FILIAL
				AND TME.%notDel%
		LEFT JOIN %table:TNA% TNA ON
				TNA.TNA_NUMFIC = TM0.TM0_NUMFIC
				AND %exp:cTNA% = TNA.TNA_FILIAL
				AND TNA.%notDel%
		LEFT JOIN %table:TMR% TMR ON
				TMR.TMR_CID = TNA.TNA_CID
				AND %exp:cTMR% = TMR.TMR_FILIAL
				AND TMR.%notDel%
		LEFT JOIN %table:TMT% TMT ON
				TMT.TMT_NUMFIC = TM0.TM0_NUMFIC
				AND %exp:cTMT% = TMT.TMT_FILIAL
				AND TMT.%notDel%
		LEFT JOIN %table:TM2% TM2 ON
				TM2.TM2_NUMFIC = TM0.TM0_NUMFIC
				AND %exp:cTM2% = TM2.TM2_FILIAL
				AND TM2.TM2_DTCONS = TMT.TMT_DTCONS
                AND TM2.TM2_HRCONS = TMT.TMT_HRCONS
				AND TM2.%notDel%
		LEFT JOIN %table:TM1% TM1 ON
				TM1.TM1_CODMED = TM2.TM2_CODMED
				AND %exp:cTM1% = TM1.TM1_FILIAL
				AND TM1.%notDel%
		LEFT JOIN %table:TL9% TL9 ON
				TL9.TL9_NUMFIC = TM0.TM0_NUMFIC
				AND %exp:cTL9% = TL9.TL9_FILIAL
				AND TL9.%notDel%
		LEFT JOIN %table:TL6% TL6 ON
				TL6.TL6_VACINA = TL9.TL9_VACINA
				AND %exp:cTL6% = TL6.TL6_FILIAL
				AND TL6.%notDel%
		LEFT JOIN %table:TL5% TL5 ON
				TL5.TL5_NUMFIC = TM0.TM0_NUMFIC
				AND %exp:cTL5% = TL5.TL5_FILIAL
				AND TL5.%notDel%
		LEFT JOIN %table:TMS% TMS ON
				TMS.TMS_MOTIVO = TL5.TL5_MOTIVO
				AND %exp:cTMS% = TMS.TMS_FILIAL
				AND TMS.%notDel%
		LEFT JOIN %table:TY3% TY3 ON
				TY3.TY3_NUMFIC = TM0.TM0_NUMFIC
                AND TY3.TY3_DTATEN = TL5.TL5_DTATEN
                AND TY3.TY3_HRATEN = TL5.TL5_HRATEN
				AND %exp:cTY3% = TY3.TY3_FILIAL
				AND TY3.%notDel%
		WHERE 
			TM0.TM0_FILIAL = %exp:cTM0%
            AND TM0.TM0_NUMFIC BETWEEN %exp:jParams[ "MV_PAR01", 1 ]% AND %exp:jParams[ "MV_PAR02", 1 ]%
			AND TM0.%notDel%
	EndSQL

    dbSelectArea( cAlias )
	dbGoTop()

    self:setPageSize( 15 )

    // Paginação
    If nPage == 1

        ( cAlias )->( dbGoTop() )

    EndIf

    While !( cAlias )->( Eof() )

        If Empty( ( cAlias )->TM0_CANDID )
            cCand := "-"
        Else
            cCand := ( cAlias )->TM0_CANDID
        EndIf

        If Empty( ( cAlias )->RA_MAT )
            cMat := "-"
        Else
            cMat := ( cAlias )->RA_MAT
        EndIf

        If Empty( ( cAlias )->RA_NSOCIAL )
            cNomeSocial := "-"
        Else
            cNomeSocial := ( cAlias )->RA_NSOCIAL
        EndIf

        self:oData:appendData( { "TM0_FILIAL": ( cAlias )->TM0_FILIAL, ;
                "TM0_NUMFIC": ( cAlias )->TM0_NUMFIC, ;
                "TM0_NOMFIC": ( cAlias )->TM0_NOMFIC, ;
                "TM0_DTIMPL": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TM0_DTIMPL ), ;
                "TM0_FILFUN": ( cAlias )->TM0_FILFUN, ;
                "TM0_NUMDEP": ( cAlias )->TM0_NUMDEP, ;
                "TM0_CANDID": cCand                 , ;
                "TM0_DTNASC": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TM0_DTNASC ), ;
                "TM0_SEXO"  : NGRETSX3BOX( "TM0_SEXO", ( cAlias )->TM0_SEXO     ), ;
                "TM0_SANGUE": NGRETSX3BOX( "TM0_SANGUE", ( cAlias )->TM0_SANGUE ), ;
                "TM0_FATORH": NGRETSX3BOX( "TM0_FATORH", ( cAlias )->TM0_FATORH ), ;
                "TM0_DOADOR": NGRETSX3BOX( "TM0_DOADOR", ( cAlias )->TM0_DOADOR ), ;
                "TM0_DTDOAC": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TM0_DTDOAC ), ;
                "TM0_PESO"  : ( cAlias )->TM0_PESO  , ;
                "TM0_ALTURA": ( cAlias )->TM0_ALTURA, ;
                "TM0_FUMA"  : NGRETSX3BOX( "TM0_FUMA", ( cAlias )->TM0_FUMA ), ;
                "TM0_QTCIG" : ( cAlias )->TM0_QTCIG , ;
                "TM0_QTTEMP": ( cAlias )->TM0_QTTEMP, ;
                "TM0_FICANT": ( cAlias )->TM0_FICANT, ;
                "RA_MAT"    : cMat                  , ;
                "RA_NSOCIAL": cNomeSocial           , ;
                "RA_ENDEREC": ( cAlias )->RA_ENDEREC, ;
                "RA_BAIRRO" : ( cAlias )->RA_BAIRRO , ;
                "RA_COMPLEM": ( cAlias )->RA_COMPLEM, ;
                "TMO_NOMPRO": ( cAlias )->TMO_NOMPRO, ;
                "TMN_CODPRO": ( cAlias )->TMN_CODPRO, ;
                "TMN_DTINIC": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TMN_DTINIC ), ;
                "TMN_DTTERM": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TMN_DTTERM ), ;
                "TM5_EXAME" : ( cAlias )->TM5_EXAME , ;
                "TM5_CODRES": ( cAlias )->TM5_CODRES, ;
                "TM5_DTPROG": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TM5_DTPROG ), ;
                "TM5_DTRESU": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TM5_DTRESU ), ;
                "TM5_INDRES": NGRETSX3BOX( "TM5_INDRES", ( cAlias )->TM5_INDRES ), ;
                "TM5_NATEXA": NGRETSX3BOX( "TM5_NATEXA", ( cAlias )->TM5_NATEXA ), ;
                "TM4_NOMEXA": ( cAlias )->TM4_NOMEXA, ;
                "TMU_RESULT": ( cAlias )->TMU_RESULT, ;
                "TMF_RESTRI": ( cAlias )->TMF_RESTRI, ;
                "TMF_DTINIC": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TMF_DTINIC ), ;
                "TMF_DTFIM" : totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TMF_DTFIM  ), ;
                "TME_NOMRES": ( cAlias )->TME_NOMRES, ;
                "TNA_CID"   : ( cAlias )->TNA_CID   , ;
                "TMT_OCORRE": NGRETSX3BOX( "TM5_INDRES", ( cAlias )->TMT_OCORRE ), ;
                "TNA_DTINIC": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TNA_DTINIC ), ;
                "TNA_DTFIM" : totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TNA_DTFIM  ), ;
                "TMR_DOENCA": ( cAlias )->TMR_DOENCA, ;
                "TMT_DTCONS": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TMT_DTCONS ), ;
                "TMT_CID"   : ( cAlias )->TMT_CID   , ;
                "TMT_MDIAGN": ( cAlias )->TMT_MDIAGN, ;
                "TMT_MDESAT": ( cAlias )->TMT_MDESAT, ;
                "TMT_MQUEIX": ( cAlias )->TMT_MQUEIX, ;
                "TM1_NOMEDI": ( cAlias )->TM1_NOMEDI, ;
                "TM1_UNIDAD": ( cAlias )->TM1_UNIDAD, ;
                "TM2_CODMED": ( cAlias )->TM2_CODMED, ;
                "TM2_QTUTIL": ( cAlias )->TM2_QTUTIL, ;
                "TL9_VACINA": ( cAlias )->TL9_VACINA, ;
                "TL9_DTREAL": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TL9_DTREAL ), ;
                "TL9_DOSE"  : ( cAlias )->TL9_DOSE  , ;
                "TL6_NOMVAC": ( cAlias )->TL6_NOMVAC, ;
                "TL5_MOTIVO": ( cAlias )->TL5_MOTIVO, ;
                "TL5_DTATEN": totvs.framework.treports.date.stringToTimeStamp( ( cAlias )->TL5_DTATEN ), ;
                "TL5_HRATEN": ( cAlias )->TL5_HRATEN, ;
                "TMS_NOMOTI": ( cAlias )->TMS_NOMOTI, ;
                "TY3_CODMED": ( cAlias )->TY3_CODMED, ;
                "TY3_QUANT" : ( cAlias )->TY3_QUANT } )

        ( cAlias )->( dbSkip() )

        nCount++

        /*If nCount == self:getPageSize()
            Exit
        EndIf*/ //Trecho comentado porque paginação não esta funcionando

    Enddo

    self:setHasNext( ( cAlias )->( !Eof() ) )

    ( cAlias )->( DBCloseArea() )

return self:oData

//-------------------------------------------------------------------
/*/{Protheus.doc} getSchema
Método responsável por informar as características dos campos e 
também os parâmetros quando esses não são adicionados pela SX1
@type Método

@author Eloisa Anibaletto
@since 23/10/2023
@version P11

@return objeto, Retorna a si mesmo
/*/
//-------------------------------------------------------------------
method getSchema() as object class ProntuarioMedicoSmartViewBusinessObject

    self:AddParameter( 'MV_PAR01', 'De Ficha'          , 'string' , .F. )
    self:AddParameter( 'MV_PAR02', 'Ate Ficha'         , 'string' , .F. )
    self:AddParameter( 'MV_PAR03', 'De Data'           , 'date'   , .F. )
    self:AddParameter( 'MV_PAR04', 'Ate Data'          , 'date'   , .F. )

    self:addProperty( 'TM0_FILIAL', 'Filial'                               , 'string', 'Filial'                   , 'TM0_FILIAL' )
    self:addProperty( 'TM0_NUMFIC', 'Número da Ficha Médica'               , 'string', 'Ficha Médica'             , 'TM0_NUMFIC' )
    self:addProperty( 'TM0_NOMFIC', 'Nome Proprietário da Ficha Médica'    , 'string', 'Nome'                     , 'TM0_NOMFIC' )
    self:addProperty( 'TM0_DTIMPL', 'Data Implantação da Ficha'            , 'date'  , 'Data Implant.'            , 'TM0_DTIMPL' )
    self:addProperty( 'TM0_FILFUN', 'Filial do Funcionário'                , 'string', 'Filial Func.'             , 'TM0_FILFUN' )
    self:addProperty( 'TM0_NUMDEP', 'Número de Dependente'                 , 'string', 'Dependente'               , 'TM0_NUMDEP' )
    self:addProperty( 'TM0_CANDID', 'Candidato a Emprego'                  , 'string', 'Candidato'                , 'TM0_CANDID' )
    self:addProperty( 'TM0_DTNASC', 'Data de Nascimento'                   , 'date'  , 'Data Nasc.'               , 'TM0_DTNASC' )
    self:addProperty( 'TM0_SEXO'  , 'Sexo do Proprietário da Ficha Médica' , 'string', 'Sexo'                     , 'TM0_SEXO'   )
    self:addProperty( 'TM0_SANGUE', 'Tipo de Sangue'                       , 'string', 'Tipo Sang.'               , 'TM0_SANGUE' )
    self:addProperty( 'TM0_FATORH', 'Fator RH de Sangue'                   , 'string', 'Fator RH'                 , 'TM0_FATORH' )
    self:addProperty( 'TM0_DOADOR', 'Doador de Sangue'                     , 'string', 'Doador?'                  , 'TM0_DOADOR' )
    self:addProperty( 'TM0_DTDOAC', 'Data Ultima Doação'                   , 'date'  , 'Data Doação'              , 'TM0_DTDOAC' )
    self:addProperty( 'TM0_PESO'  , 'Peso da Pessoa em Kg.'                , 'number', 'Peso'                     , 'TM0_PESO'   )
    self:addProperty( 'TM0_ALTURA', 'Altura da Pessoa'                     , 'number', 'Altura'                   , 'TM0_ALTURA' )
    self:addProperty( 'TM0_FUMA'  , 'Indicador de Fumante'                 , 'string', 'Fuma?'                    , 'TM0_FUMA'   )
    self:addProperty( 'TM0_QTCIG' , 'Quant. de cigarros por dia'           , 'number', 'Qt. Cigarros'             , 'TM0_QTCIG'  )
    self:addProperty( 'TM0_QTTEMP', 'Qtde. tempo em ano que fuma'          , 'number', 'Quantos Anos Fuma?'       , 'TM0_QTTEMP' )
    self:addProperty( 'TM0_FICANT', 'Ficha Anterior'                       , 'string', 'Ficha Ant.'               , 'TM0_FICANT' )
    self:addProperty( 'RA_MAT'    , 'Número da Matrícula'                  , 'string', 'Matrícula'                , 'RA_MAT'     )
    self:addProperty( 'RA_NSOCIAL', 'Nome Social'                          , 'string', 'Nome Social'              , 'RA_NSOCIAL' )
    self:addProperty( 'RA_ENDEREC', 'Endereço do Funcionário'              , 'string', 'Endereço'                 , 'RA_ENDEREC' )
    self:addProperty( 'RA_BAIRRO' , 'Bairro'                               , 'string', 'Bairro'                   , 'RA_BAIRRO'  )
    self:addProperty( 'RA_COMPLEM', 'Complemento do Endereço'              , 'string', 'Compl. Ender.'            , 'RA_COMPLEM' )
    self:addProperty( 'TMO_NOMPRO', 'Nome do Programa de Saúde'            , 'string', 'Nome Prog. de Saúde'      , 'TMO_NOMPRO' )
    self:addProperty( 'TMN_CODPRO', 'Código Programa de Saúde'             , 'string', 'Prog. Saúde'              , 'TMN_CODPRO' )
    self:addProperty( 'TMN_DTINIC', 'Data Início no Programa'              , 'date'  , 'Data Início Prog.'        , 'TMN_DTINIC' )
    self:addProperty( 'TMN_DTTERM', 'Data Termino no Programa'             , 'date'  , 'Data Término Prog.'       , 'TMN_DTTERM' )
    self:addProperty( 'TM5_EXAME' , 'Codigo do Exame Médico'               , 'string', 'Cód. Exame'               , 'TM5_EXAME'  )
    self:addProperty( 'TM5_CODRES', 'Cód. Conclusão Resultado'             , 'string', 'Concl. Result.'           , 'TM5_CODRES' )
    self:addProperty( 'TM5_DTPROG', 'Data Programação Exame'               , 'date'  , 'Data Exame'               , 'TM5_DTPROG' )
    self:addProperty( 'TM5_DTRESU', 'Data Resultado do Exame'              , 'date'  , 'Data Resultado'           , 'TM5_DTRESU' )
    self:addProperty( 'TM5_INDRES', 'Indicador Resultado Exame'            , 'string', 'Ind. Result.'             , 'TM5_INDRES' )
    self:addProperty( 'TM5_NATEXA', 'Indicador Natureza Exame'             , 'string', 'Natureza'                 , 'TM5_NATEXA' )
    self:addProperty( 'TM4_NOMEXA', 'Nome do Exame Médico'                 , 'string', 'Nome Exame'               , 'TM4_NOMEXA' )
    self:addProperty( 'TMU_RESULT', 'Descrição Resultado Exame'            , 'string', 'Desc. Result. Exame'      , 'TMU_RESULT' )
    self:addProperty( 'TMF_RESTRI', 'Código da Restrição'                  , 'string', 'Restrição'                , 'TMF_RESTRI' )
    self:addProperty( 'TMF_DTINIC', 'Data Início Restrição'                , 'date'  , 'Data Início Restriç.'     , 'TMF_DTINIC' )
    self:addProperty( 'TMF_DTFIM' , 'Data Término Restrição'               , 'date'  , 'Data Término Restriç.'    , 'TMF_DTFIM'  )
    self:addProperty( 'TME_NOMRES', 'Nome da Restrição'                    , 'string', 'Nome Restric.'            , 'TME_NOMRES' )
    self:addProperty( 'TNA_CID'   , 'Classif. Internac. Doença'            , 'string', 'CID Doença Func.'         , 'TNA_CID'    )
    self:addProperty( 'TNA_DTINIC', 'Data Início Doença'                   , 'date'  , 'Data Início Doença'       , 'TNA_DTINIC' )
    self:addProperty( 'TNA_DTFIM' , 'Data da Cura Total'                   , 'date'  , 'Data Término Doença'      , 'TNA_DTFIM'  )
    self:addProperty( 'TMR_DOENCA', 'Descrição da Doença'                  , 'string', 'Desc. Doença'             , 'TMR_DOENCA' )
    self:addProperty( 'TMT_DTCONS', 'Data Consulta Diag.'                  , 'date'  , 'Data Consulta Diag.'      , 'TMT_DTCONS' )
    self:addProperty( 'TMT_CID'   , 'CID Principal'                        , 'string', 'CID Princip. Diag.'       , 'TMT_CID'    )
    self:addProperty( 'TMT_OCORRE', 'Ind. Atendimento Diag.'               , 'string', 'Ind. Atendimento Diag.'   , 'TMT_OCORRE' )
    self:addProperty( 'TMT_MDIAGN', 'Descrição Diagnóstico'                , 'string', 'Descr. Diagnóstico'       , 'TMT_MDIAGN' )
    self:addProperty( 'TMT_MDESAT', 'Descrição Atendimento Médico'         , 'string', 'Descr. Atendimento Médico', 'TMT_MDESAT' )
    self:addProperty( 'TMT_MQUEIX', 'Queixa Principal'                     , 'string', 'Queixa'                   , 'TMT_MQUEIX' )
    self:addProperty( 'TM1_NOMEDI', 'Nome Medicamento'                     , 'string', 'Nome Medicamento'         , 'TM1_NOMEDI' )
    self:addProperty( 'TM1_UNIDAD', 'Unidade de Medida'                    , 'string', 'Unid. Medida'             , 'TM1_UNIDAD' )
    self:addProperty( 'TM2_CODMED', 'Código do Medicamento'                , 'string', 'Cód. Medicam. Diag.'      , 'TM2_CODMED' )
    self:addProperty( 'TM2_QTUTIL', 'Quantidade Utilizada'                 , 'number', 'Qtd. Utiliz. Diag.'       , 'TM2_QTUTIL' )
    self:addProperty( 'TL9_VACINA', 'Código da Vacina'                     , 'string', 'Cód. Vacina'              , 'TL9_VACINA' )
    self:addProperty( 'TL9_DTREAL', 'Data Real'                            , 'date'  , 'Data Real Vacina'         , 'TL9_DTREAL' )
    self:addProperty( 'TL9_DOSE'  , 'Dose da Vacina'                       , 'string', 'Dose Vacina'              , 'TL9_DOSE'   )
    self:addProperty( 'TL6_NOMVAC', 'Nome da Vacina'                       , 'string', 'Nome Vacina'              , 'TL6_NOMVAC' )
    self:addProperty( 'TL5_MOTIVO', 'Motivo do Atendimento'                , 'string', 'Motivo Atend. Enferm.'    , 'TL5_MOTIVO' )
    self:addProperty( 'TL5_DTATEN', 'Data de Atendimento'                  , 'date'  , 'Data Atend. Enferm.'      , 'TL5_DTATEN' )
    self:addProperty( 'TL5_HRATEN', 'Hora do Atendimento'                  , 'string', 'Hora Atend. Enferm.'      , 'TL5_HRATEN' )
    self:addProperty( 'TMS_NOMOTI', 'Nome Motivo da Consulta'              , 'string', 'Motivo Consul. Enferm.'   , 'TMS_NOMOTI' )
    self:addProperty( 'TY3_CODMED', 'Código do Medicamento'                , 'string', 'Código Medicamen.'        , 'TY3_CODMED' )
    self:addProperty( 'TY3_QUANT' , 'Quantidade de Medicamento'            , 'number', 'Quantidade Medicamen.'    , 'TY3_QUANT'  )

return self:oSchema
