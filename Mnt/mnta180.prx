#INCLUDE "MNTA180.CH"
#INCLUDE "FOLDER.CH"
#INCLUDE "FONT.CH"
#INCLUDE "COLORS.CH"
#INCLUDE "PROTHEUS.CH"

Static nTipOper

//---------------------------------------------------------------------
 /*/{Protheus.doc} MNTA180
Manutenção padrão
@author Deivys Joenck
@since XX/XX/XXXX
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNTA180()

	//---------------------------------------------------------------------
	//|Guarda conteudo e declara variaveis padroes 						  |
	//---------------------------------------------------------------------
	Local aNGBEGINPRM
	Local x
	Local nInd := 1
	Local cCampo := ""
	Local aHeadRel := {}

	If !FindFunction( 'MNTAmIIn' ) .Or. MNTAmIIn( 19, 35, 95 )

		aNGBEGINPRM := NGBEGINPRM()

		Private cCADASTRO := OEMTOANSI(STR0009) //"Manutencao Padrao"
		Private aRotina   := MenuDef()
		Private OLDALIAS  := "ST0", c180KEY := "ST0", OLDTIPO := "X"
		Private aTP5ACOL  := {},aTPMACOL := {},aTPGACOL := {},aTPHACOL := {}
		Private arraySTF  := {},arrayTPG := {},arrayTP5 := {},arrayTPM := {},arrayTPH := {},arrayTP2 := {}
		Private aMONTARR  := {'STF','TPG','TP5','TPM','TPH','TP2'}
		Private aTROCAF3  := {},aNGFIELD := {}, aAddTT9 := {}, aCopyTP5 := {}
		Private nINDTPH   := 6
		Private nCONTROGD := 1, _TAM := 0, n180KEY := 5, OLDORDER := 1
		Private lTIPLUB   := If(NGCADICBASE("TPF_TIPLUB ","D","TPF",.F.),.t.,.f.)
		Private cALIAS,cSER180,cSEQ180,cFAM180,cTIP180,nOPCOES,nNOMETA,nETAPA,nNOMECO,nQTDGAR,nUNIGAR,nDOCTOTPH,nDOCFILTPH,nALMOX
		Private nTARG,nTARH,nTIPORE,nCODIGO,nQUANRE,nQUANTI,nUNIDAD,nDESTIN,nRESERV,nDEPEND,nTAREFA,nDOCTOTP5,nDOCFILTP5
		Private TPG_TIPORE := "M", nFornec, nLoja

		//Variaveis utilizadas na copia da manutencao
		Private lCopia   := .F.
		Private aTPFArea := {}

		Private cAliQrySTF := ""

		If FindFunction("NGSEQETA")
		   nINDTPH := NGSEQETA("TPH",6)
		EndIf

		aCHOICE := {}
		aVARNAO := {}
		aPOS1   := {15,1,78,315}
		POSREG  := RECNO()

		//MONTAGEM DAS ARRAYS DOS CAMPOS USADOS NOS ARQUIVOS DE RELACAO DO PADRAO
		For x:=1 To Len(aMONTARR)

			cARRAY := aMONTARR[x]
			aHeadRel := NGHeader(cARRAY)

			For nInd := 1 To Len(aHeadRel)

				cCampo := aHeadRel[nInd,2]
				If cARRAY == "STF"
					aAdd(arraySTF,cCampo)
				ElseIf cARRAY == "TPG"
					aAdd(arrayTPG,cCampo)
				ElseIf cARRAY == "TP5"
					aAdd(arrayTP5,cCampo)
				ElseIf cARRAY == "TPM"
					aAdd(arrayTPM,cCampo)
				ElseIf cARRAY == "TPH"
					aAdd(arrayTPH,cCampo)
				ElseIf cARRAY == "TP2"
					aAdd(arrayTP2,cCampo)
				EndIf

			Next nInd

		Next x

		dbSelectArea( 'TPF' )
		dbSetOrder( 4 ) // TPF_FILIAL + TPF_CODFAM + TPF_TIPMOD + TPF_SERVIC + TPF_SEQREL
		dbGoTo( POSREG )

		MBROWSE(6,1,22,75,"TPF")
		dbSelectArea("TPF")

		//---------------------------------------------------------------------
		//|Retorna conteudo de variaveis padroes       						  |
		//---------------------------------------------------------------------
		NGRETURNPRM(aNGBEGINPRM)

	EndIf

Return

//---------------------------------------------------------------------
 /*/{Protheus.doc} NG180FOLD
Funcao para montagem de folder
@author Deivys Joenck
@since 05/07/2001
@version undefined
@param cALIAS1, characters
@param nREG, numeric
@param nOPCX, numeric
@type function
/*/
//---------------------------------------------------------------------
Function NG180FOLD(cALIAS1,nREG,nOPCX)
   //---------------------------------------------------------------------
   //|Guarda conteudo e declara variaveis padroes 						  |
   //---------------------------------------------------------------------
   Local aNGBEGINPRM := If(!IsInCallStack("MNTA120"),NGBEGINPRM(,"MNTA180",/*aChkAlias*/,.f.),{})
   Local nP2SEQ, nP2SER, nP2MOD, nP2FAM, nP2OPC, nP2TAR, nP2ETA
   Local nOK, aPAGES := {}, aTITLES := {}, aNoFields := {},aOldTP2 := {}
   Local nI, nY,oGET,cGET,lGETD := .F.
   Local xFunct := Nil
   Local nPosSeq := 0

   OX := GETOBJBROW()
   Private n := 1, x := 0, nOPCAO := nOPCX, oMenu, nCONTROL,INCLUI := (nOPCAO == 3)
   Private aSVHEADER := {{},{},{},{}}, aSVCOLS := {{},{},{},{}}
   Private aSVATELA  := {},aSVAGETS := {},aTELA := {},aGETS := {}, aCopyTP5 := {}
   Private aTP5ACOL  := {},aTPMACOL := {},aTPGACOL := {},aTPHACOL := {}, aAddTT9 := {}
   Private lOK := .F., lWhileTPH,lWhileTP2,lWhileTPG,lWhileTPM,lWhileTP5
   Private oENC01,oGET01,oFOLDER,oDLG,oGET02,oGET03,oGET04
   Private cDesTar   := Space(Len(tp5->tp5_descri))
   Private lCopia   := If(Type("lCopia") = "L",lCopia,.f.)
   Private aTPFArea := TPF->(GetArea())
   Private aSize := MsAdvSize(), aObjects := {},aCopyTP2 := {}
   Private aNgButton := If( Type( "aNgButton" ) == "A", aClone( aNgButton ), {} )

   Private aOldTP5    := {}
   Private lUpsertTP5 := .F.
   Private aOldTPG    := {}
   Private lUpsertTPG := .F.
   Private aOldTPM    := {}
   Private lUpsertTPM := .F.
   Private aOldTPH    := {}
   Private lUpsertTPH := .F.

	//--------------------------------------------------
	// Carrega array de botões para Ações relacionadas
	// baseados nas tabelas de clique da direita
	//--------------------------------------------------
	If Len( aNgButton ) == 0
      NGClickBar( @aNgButton, NGRIGHTCLICK("MNTA180") )
   EndIf

   aAdd(aNgButton,{"PARAMETROS",{||MNT180QDO()},STR0027,STR0036}) //"Relacionar documento(Manutencao/Tarefa/Etapa)" # "Man/Tar"

   Store 0   To nCONTROL, nOK
   Store .F. To ALPADRAO

   aAdd(aTITLES,OEMTOANSI(STR0009))
   aAdd(aPAGES,"HEADER 1")
   nCONTROL++
   aAdd(aTITLES,OEMTOANSI(STR0019))
   aAdd(aPAGES,"HEADER 2")
   nCONTROL++
   aAdd(aTITLES,OEMTOANSI(STR0020))
   aAdd(aPAGES,"HEADER 3")
   nCONTROL++
   aAdd(aTITLES,OEMTOANSI(STR0023))
   aAdd(aPAGES,"HEADER 4")
   nCONTROL++
   aAdd(aTITLES,OEMTOANSI(STR0021))
   aAdd(aPAGES,"HEADER 5")
   nCONTROL++

   //Se for alteracao faz copia inicial do TP2
   If nOPCAO == 4 .And. !lCopia
   
      dbSelectArea( 'TP2' )
      dbSetOrder( 3 ) // TP2_FILIAL + TP2_CODFAM + TP2_TIPMOD + TP2_SERVIC + TP2_SEQREL + TP2_TAREFA + TP2_ETAPA + TP2_OPCAO
      dbSeek( FWxFilial( 'TP2' ) + TPF->( TPF_CODFAM + TPF_TIPMOD + TPF_SERVIC + TPF_SEQREL) )
      
      While TP2->( !EoF() ) .And. FWxFilial( 'TP2' ) == TP2->TP2_FILIAL .And. TPF->TPF_TIPMOD == TP2->TP2_TIPMOD .And.;
         TP2->TP2_CODFAM+TP2->TP2_SERVIC+TP2->TP2_SEQREL == TPF->TPF_CODFAM+TPF->TPF_SERVIC+TPF->TPF_SEQREL
         
         aAdd(aOldTP2,{})

         For nI := 1 to FCOUNT()
            aAdd(aOldTP2[Len(aOldTP2)],&("TP2->"+FieldName(nI)))
         Next nI

         dbSkip()

      End

   EndIf

   lGETD := If(nOPCAO # 2 .Or. nOPCAO # 5,.T.,.F.) // Visual

   aAdd(aObjects,{015,020,.t.,.t.})
   aAdd(aObjects,{100,100,.t.,.t.})
   aInfo   := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
   aPosObj := MsObjSize(aInfo, aObjects,.t.)

   DEFINE MSDIALOG oDLG TITLE cCADASTRO FROM aSize[7],0 TO aSize[6],aSize[5] OF oMAINWND PIXEL
   oDLG:lMaximized := .T.

   oFOLDER := TFOLDER():New(1,0,aTITLES,aPAGES,oDLG,,,,.F.,.F.,320,200,)

	oFolder:bChange := {|| ChangeGet()}
	oFolder:bSetOption := {|| CheckCols() }

   oFOLDER:aDIALOGS[1]:oFONT := oDLG:oFONT
   oFOLDER:aDIALOGS[2]:oFONT := oDLG:oFONT
   oFOLDER:aDIALOGS[3]:oFONT := oDLG:oFONT
   oFOLDER:aDIALOGS[4]:oFONT := oDLG:oFONT
   oFOLDER:aDIALOGS[5]:oFONT := oDLG:oFONT

   //+-------------------------------------------------------------------+
   //| Enchoice 01                                          			  |
   //+-------------------------------------------------------------------+
   aTELA := {}
   aGETS := {}

   //+-------------------------------------------------------------------+
   //| GetDados 01                                          			  |
   //+-------------------------------------------------------------------+
   dbSelectArea( 'TP5' )
   dbSetOrder( 3 ) // TP5_FILIAL + TP5_CODFAM + TP5_TIPMOD + TP5_SERVIC + TP5_SEQREL + TP5_TAREFA
   aHeader := {}
   aCols   := {}

   aAdd( aNoFields, 'TP5_CODFAM' )
   aAdd( aNoFields, 'TP5_SERVIC' )
   aAdd( aNoFields, 'TP5_SEQREL' )
   aAdd( aNoFields, 'TP5_TIPMOD' )
   
   cQuery := "SELECT * FROM "+RetSqlName("TP5")+" TP5 WHERE TP5.TP5_FILIAL = '"+xFilial("TP5")+"' AND TP5.TP5_CODFAM = '"+TPF->TPF_CODFAM+"'"+;
            " AND TP5.TP5_SERVIC = '"+TPF->TPF_SERVIC+"' AND TP5.TP5_SEQREL = '"+TPF->TPF_SEQREL+"' AND TP5.D_E_L_E_T_ = ' '"
   cQuery += " AND TP5.TP5_TIPMOD = '"+TPF->TPF_TIPMOD+"'"

   FillGetDados( nOpcx, 'TP5', 3, FWxFilial( 'TP5' ) + TPF->TPF_CODFAM + TPF->TPF_TIPMOD + TPF->TPF_SERVIC + TPF->TPF_SEQREL,;
      { || 'TP5->TP5_FILIAL + TP5->TP5_CODFAM + TP5->TP5_TIPMOD + TP5->TP5_SERVIC + TP5->TP5_SEQREL' }, { || .T. }, aNoFields, , , cQuery )
   
   nPosSeq := GDFIELDPOS("TP5_SEQUEN")

   aSort( aCols, , , { |x, y| x[ nPosSeq ] < y[ nPosSeq ] })
   
   
   NGSETIFARQUI("TP5","F",1)

   nTAREFA    := GDFIELDPOS("TP5_TAREFA")
   nDESCRI    := GDFIELDPOS("TP5_DESCRI")
   nDOCTOTP5  := GDFIELDPOS("TP5_DOCTO")
   nDOCFILTP5 := GDFIELDPOS("TP5_DOCFIL")

   If Empty(aCOLS) .Or. nOPCAO == 3
      aCOLS := BLANKGETD(aHEADER)
   Else
      aTP5ACOL := aCLONE(aCOLS)
   EndIf

   aSVHEADER[1] := aCLONE(aHEADER)
   aSVCOLS[1]   := aCLONE(aCOLS)
   aCopyTP5     := aCLONE(aCOLS)
   aOldTP5      := aClone( aCols )
   n            := Len(aCOLS)
	xFunct       := IIf( FindFunction( 'MNTA120Tar' ), Nil, "NGFOLDTAR( 'A','P' )" )

   oGET01 := MsNewGetDados():New( 0, 0, 125, 315, GD_INSERT + GD_UPDATE + GD_DELETE, 'NG180LINOK()', 'AllwaysTrue', '',;
      , ,500, xFunct, , "NGFOLDTAR( 'E', 'P' )", oFolder:aDialogs[2], aHeader, aCols )

   oGET01:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
   oGET01:oBROWSE:DEFAULT()
   oGET01:oBROWSE:REFRESH()

   //+-------------------------------------------------------------------+
   //| GetDados 02                                           			  |
   //+-------------------------------------------------------------------+
   dbSelectArea( 'TPM' )
   dbSetOrder( 2 ) // TPM_FILIAL + TPM_CODFAM + TPM_TIPMOD + TPM_SERVIC + TPM_SEQREL + TPM_TAREFA + TPM_DEPEND

   NGSETIFARQUI("TPM","F",1)

   aHeader   := {}
   aCols     := {}
   aNoFields := {}

   aAdd( aNoFields, 'TPM_CODFAM' )
   aAdd( aNoFields, 'TPM_SERVIC' )
   aAdd( aNoFields, 'TPM_TIPMOD' )
   aAdd( aNoFields, 'TPM_SEQREL' )
    
   cQuery := "SELECT * FROM "+RetSqlName("TPM")+" TPM WHERE TPM.TPM_FILIAL = '"+xFilial("TPM")+"' AND TPM.TPM_CODFAM = '"+TPF->TPF_CODFAM+"'"+;
      " AND TPM.TPM_SERVIC = '"+TPF->TPF_SERVIC+"' AND TPM.TPM_SEQREL = '"+TPF->TPF_SEQREL+"' AND TPM.D_E_L_E_T_ = ' '"
   cQuery += " AND TPM.TPM_TIPMOD = '"+TPF->TPF_TIPMOD+"'"

   FillGetDados( nOpcx, 'TPM', 2, FWxFilial( 'TPM' ) + TPF->TPF_CODFAM + TPF->TPF_TIPMOD + TPF->TPF_SERVIC + TPF->TPF_SEQREL,;
      { || 'TPM->TPM_FILIAL + TPM->TPM_CODFAM + TPM->TPM_TIPMOD + TPM->TPM_SERVIC + TPM->TPM_SEQREL' }, {|| .T.}, aNoFields, , , cQuery )

   NGSETIFARQUI("TPM","F",1)

   If Empty(aCOLS) .Or. nOPCAO == 3
      aCOLS := BLANKGETD(aHEADER)
   Else
      aTPMACOL  := aCLONE(aCOLS)
   EndIf
   nTARM        := GDFIELDPOS("TPM_TAREFA")
   nDEPEND      := GDFIELDPOS("TPM_DEPEND")
   nNOMDEP      := GDFIELDPOS("TPM_NOME")
   nSOBREP      := GDFIELDPOS("TPM_SOBREP")
   aSVHEADER[2] := aCLONE(aHEADER)
   aSVHEADER[2][nTARM][6] += " .And. NG190CHECK(M->TPM_TAREFA,.T.)" //Verifica se a tarefa dependende e dela mesma
   aSVCOLS[2]   := aCLONE(aCOLS)
   aOldTPM      := aClone( aCols )
   n            := Len(aCOLS)

   oGet02 := MsNewGetDados():New( 0, 0, 125, 315, GD_INSERT + GD_UPDATE + GD_DELETE, 'NG180LINOK( 2 )', 'AllwaysTrue', '',;
      , ,500, , , "NGFOLDESM( nTAREFA, aCols[n,nTARM], aCols[n,nDEPEND], nDEPEND )", oFolder:aDialogs[3], aHeader, aCols )

   oGet02:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
   oGet02:oBROWSE:DEFAULT()
   oGet02:oBROWSE:REFRESH()

   //+-------------------------------------------------------------------+
   //| GetDados 03                                          			  |
   //+-------------------------------------------------------------------+
   dbSelectArea( 'TPG' )
	dbSetOrder( 3 ) // TPG_FILIAL + TPG_CODFAM + TPG_TIPMOD + TPG_SERVIC + TPG_SEQREL + TPG_TAREFA + TPG_TIPORE + TPG_CODIGO

   NGSETIFARQUI("TPG","F",1)

   aHeader   := {}
   aCols     := {}
   aNoFields := {}

   aAdd( aNoFields, 'TPG_CODFAM' )
   aAdd( aNoFields, 'TPG_SERVIC' )
   aAdd( aNoFields, 'TPG_TIPMOD' )
   aAdd( aNoFields, 'TPG_SEQREL' )
   aAdd( aNoFields, 'TPG_NOMETA' )

   cQuery := "SELECT * FROM "+RetSqlName("TPG")+" TPG WHERE TPG.TPG_FILIAL = '"+xFilial("TPG")+"' AND TPG.TPG_CODFAM = '"+TPF->TPF_CODFAM+"'"+;
      " AND TPG.TPG_SERVIC = '"+TPF->TPF_SERVIC+"' AND TPG.TPG_SEQREL = '"+TPF->TPF_SEQREL+"' AND TPG.D_E_L_E_T_ = ' '"
   cQuery += " AND TPG.TPG_TIPMOD = '"+TPF->TPF_TIPMOD+"'"

   FillGetDados( nOpcx, 'TPG', 3, FWxFilial( 'TPG' ) + TPF->TPF_CODFAM + TPF->TPF_TIPMOD + TPF->TPF_SERVIC + TPF->TPF_SEQREL,;
      { || 'TPG->TPG_FILIAL + TPG->TPG_CODFAM + TPG->TPG_TIPMOD + TPG->TPG_SERVIC + TPG->TPG_SEQREL' }, { || .T. }, aNoFields, , , cQuery )
    
   NGSETIFARQUI("TPG","F",1)

   If Empty(aCOLS) .Or. nOPCAO == 3
      aCOLS := BLANKGETD(aHEADER)
   Else
      aTPGACOL := aCLONE(aCOLS)
   EndIf
   nTARG        := GDFIELDPOS("TPG_TAREFA")
   nTIPORE      := GDFIELDPOS("TPG_TIPORE")
   nCODIGO      := GDFIELDPOS("TPG_CODIGO")
   nNOMECO      := GDFIELDPOS("TPG_NOMECO")
   nQUANRE      := GDFIELDPOS("TPG_QUANRE")
   nQUANTI      := GDFIELDPOS("TPG_QUANTI")
   nRESERV      := GDFIELDPOS("TPG_RESERV")
   nDESTIN      := GDFIELDPOS("TPG_DESTIN")
   nQTDGAR      := GDFIELDPOS("TPG_QTDGAR")
   nUNIGAR      := GDFIELDPOS("TPG_UNIGAR")
   nUNIDAD      := GDFIELDPOS("TPG_UNIDAD")
   nALMOX       := GDFIELDPOS("TPG_LOCAL")
   nFornec		 := GDFIELDPOS("TPG_FORNEC")
   nLoja		 := GDFIELDPOS("TPG_LOJA")
   aSVHEADER[3] := aCLONE(aHEADER)
   aSVCOLS[3]   := aCLONE(aCOLS)
   aOldTPG      := aClone( aCols )
   n            := Len(aCOLS)

   oGet03 := MsNewGetDados():New( 0, 0, 125, 315, GD_INSERT + GD_UPDATE + GD_DELETE, 'NG180LINO3()', 'AllwaysTrue', '',;
      , ,500, , , "NGFOLDESM( nTAREFA, aCols[n,nTARG], '', nCODIGO )", oFolder:aDialogs[4], aHeader, aCols )

   oGet03:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
   oGet03:oBROWSE:DEFAULT()
   oGet03:oBROWSE:REFRESH()

   //---------------------------------------------------------------------
   //| GetDados 04                                          			  |
   //---------------------------------------------------------------------
   dbSelectArea( 'TPH' )
	dbSetOrder( 6 ) // TPH_FILIAL + TPH_CODFAM + TPH_TIPMOD + TPH_SERVIC + TPH_SEQREL + TPH_TAREFA + TPH_ETAPA
  
   NGSETIFARQUI("TPH","F",1)

   aHeader   := {}
   aCols     := {}
   aNoFields := {}

   aAdd( aNoFields, 'TPH_CODFAM' )
   aAdd( aNoFields, 'TPH_SERVIC' )
   aAdd( aNoFields, 'TPH_TIPMOD' )
   aAdd( aNoFields, 'TPH_SEQREL' )

   cQuery := "SELECT * FROM "+RetSqlName("TPH")+" TPH WHERE TPH.TPH_FILIAL = '"+xFilial("TPH")+"' AND TPH.TPH_CODFAM = '"+TPF->TPF_CODFAM+"'"+;
      " AND TPH.TPH_SERVIC = '"+TPF->TPF_SERVIC+"' AND TPH.TPH_SEQREL = '"+TPF->TPF_SEQREL+"' AND TPH.D_E_L_E_T_ = ' '"
   cQuery += " AND TPH.TPH_TIPMOD = '"+TPF->TPF_TIPMOD+"'"

   FillGetDados( nOpcx, 'TPH', 6, FWxFilial( 'TPH' ) + TPF->TPF_CODFAM + TPF->TPF_TIPMOD + TPF->TPF_SERVIC + TPF->TPF_SEQREL,;
      { || 'TPH->TPH_FILIAL + TPH->TPH_CODFAM + TPH->TPH_TIPMOD + TPH->TPH_SERVIC + TPH->TPH_SEQREL' }, { || .T. }, aNoFields, , , cQuery )
   
   NGSETIFARQUI("TPH","F",1)

   dbSelectArea( 'TPH' )
	dbSetOrder( 6 ) // TPH_FILIAL + TPH_CODFAM + TPH_TIPMOD + TPH_SERVIC + TPH_SEQREL + TPH_TAREFA + TPH_ETAPA
   If Empty(aCOLS) .Or. nOPCAO == 3
      aCOLS := BLANKGETD(aHEADER)
   Else
      aTPHACOL := aCLONE(aCOLS)
   EndIf

   nTARH        := GDFIELDPOS("TPH_TAREFA")
   nETAPA       := GDFIELDPOS("TPH_ETAPA")
   nNOMETA      := GDFIELDPOS("TPH_NOMETA")
   nOPCOES      := GDFIELDPOS("TPH_OPCOES")
   nDOCTOTPH    := GDFIELDPOS("TPH_DOCTO")
   nDOCFILTPH   := GDFIELDPOS("TPH_DOCFIL")
   nTipOper     := GDFieldPos( 'TPH_TIPOPE' )

   nPosSeq := GDFIELDPOS("TPH_SEQETA")

   aSort( aCols, , , { |x, y| x[ nPosSeq ] < y[ nPosSeq ] })
   
   If !Empty(aTPHACOL)
      aTPHACOL := aCLONE(aCOLS)
   EndIf

   aSVHEADER[4] := aCLONE(aHEADER)
   aSVCOLS[4]   := aCLONE(aCOLS)
   aOldTPH      := aClone( aCols )
   n            := Len(aCOLS)

   oGet04 := MsNewGetDados():New( 0, 0, 125, 315, GD_INSERT + GD_UPDATE + GD_DELETE, 'NG180LINO4( 4 )', 'AllwaysTrue', '',;
      , ,500, , , "NGFOLDESM( nTAREFA, aCols[n,nTARH], ,nETAPA )", oFolder:aDialogs[5], aHeader, aCols )

   oGet04:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
   oGet04:oBrowse:Default()
   oGet04:oBrowse:Refresh()

    //+-------------------------------------------------------------------+
    //| Enchoice 01							                			  |
    //+-------------------------------------------------------------------+
    dbSelectArea("TPF")
    If lCopia
      
      RegToMemory("TPF",.f.,.t.)
      aCopyTP2 := {}
      nOPCAO   := 3
      
      //Seta a inclusao
      SetInclui()

      M->TPF_CODFAM := Space( Len( M->TPF_CODFAM ) )
      M->TPF_NOMFAM := Space( Len( M->TPF_NOMFAM ) )
      M->TPF_TIPMOD := Space( Len( M->TPF_TIPMOD ) )
      M->TPF_DESMOD := Space( Len( M->TPF_DESMOD ) )
      M->TPF_SEQREL := Space( Len( M->TPF_SEQREL ) )
      M->TPF_SERVIC := Space( Len( M->TPF_SERVIC ) )
      M->TPF_NOMSER := Space( Len( M->TPF_NOMSER ) )
      M->TPF_CODARE := Space( Len( M->TPF_CODARE ) ) 
      M->TPF_NOMARE := Space( Len( M->TPF_NOMARE ) )
      M->TPF_TIPO   := Space( Len( M->TPF_TIPO ) )
      M->TPF_NOMTIP := Space( Len( M->TPF_NOMTIP ) ) 

   Else

      RegToMemory("TPF",(nOPCAO == 3))

   EndIf

   oENC01 := MsMGet():New("TPF",nREG,nOPCAO,,,,,{0,0,125,aPosObj[2,4]},,,,,,oFOLDER:aDIALOGS[1],,,.F.,"aSVATELA")
   oENC01:oBOX:bGOTFOCUS := {|| NGENTRAENC("TPF")}
   oENC01:oBOX:ALIGN     := CONTROL_ALIGN_ALLCLIENT

   aSVATELA := aCLONE(aTELA)
   aSVAGETS := aCLONE(aGETS)

   @ 1000,1000 MSGET oGET VAR cGET PICTURE "@!" SIZE 1,01

	ACTIVATE DIALOG oDLG ON INIT (ENCHOICEBAR(oDLG,{|| lOK:=.T.,If(CHK180(),oDLG:END(),lOK := .F.)},{|| lOK := .F., nOK:= 0,oDLG:END()},,aNgButton),,;
									AlignObject(oDlg,{oFolder},1), aNGBUTTON )

	If lOK .And. Str( nOPCAO, 1 ) $ "345"
   
      If nOpcao == 4

         fVldUpdate()

      EndIf

      NG180GRAVA(nOPCAO)
	
   ElseIf !lOK
      
      lAltTP5 := .F.
      
      If nOPCAO == 4 .Or. nOPCAO == 5
         If Len(aSVCOLS[1]) != Len(aCopyTP5)
            lAltTP5 := .T.
         Else
            For nI := 1 to Len(aCopyTP5)
               If aTail(aSVCOLS[1][nI])
                  lAltTP5 := .T.
                  Exit
               ElseIf aCopyTP5[nI][1] != (aSVCOLS[1])[nI][1]
                  lAltTP5 := .T.
                  Exit
               EndIf
            Next nI
         EndIf
      EndIf

      If nOPCAO == 3 .Or. lAltTP5
           
         NGIFDBSEEK( 'TP5', M->TPF_CODFAM + M->TPF_TIPMOD + M->TPF_SERVIC + M->TPF_SEQREL, 3 )
         lWhile := &( 'TP5->TP5_TIPMOD == M->TPF_TIPMOD' )

         While !EoF() .And. TP5->TP5_FILIAL == FWxFILIAL( 'TP5') .And.;
            TP5->TP5_CODFAM == M->TPF_CODFAM .And. TP5->TP5_SERVIC == M->TPF_SERVIC .And.;
            TP5->TP5_SEQREL == M->TPF_SEQREL .And. lWhile
            
            NGDELETAREG("TP5")
            Dbskip()

         End

         If lAltTp5
            
            For nI := 1 To Len(aCopyTP5)
               
               If !Empty( aCopyTP5[nI,1] )

                  RecLock( 'TP5', .T. )
                  
                     For nY := 1 To Len(aCopyTP5[nI])-1
                     
                        nFieldPos := TP5->(FieldPos(aSVHEADER[1][nY][2]))
                        
                        If nFieldPos > 0
                           FieldPut(nFieldPos,aCopyTP5[nI][nY])
                        EndIf
                     
                     Next nY
                     
                     TP5->TP5_FILIAL := xFILIAL("TP5")
                     TP5->TP5_CODFAM := M->TPF_CODFAM
                     TP5->TP5_TIPMOD := M->TPF_TIPMOD
                     TP5->TP5_SERVIC := M->TPF_SERVIC
                     TP5->TP5_SEQREL := M->TPF_SEQREL
                  
                  MsUnLock()

               EndIf

            Next nI
      
         EndIf
      
      EndIf

      //Se for inclusao e cancelar, deleta TP2 cadastrados
      If Len(aCopyTP2) > 0 .Or. Len(aOldTP2) > 0
         
         dbSelectarea( 'TP2' )
         dbSetOrder( 3 )
         nP2FAM := FieldPos('TP2_CODFAM')
         nP2MOD := FieldPos('TP2_TIPMOD')
         nP2SER := FieldPos('TP2_SERVIC')
         nP2SEQ := FieldPos('TP2_SEQREL')
         nP2TAR := FieldPos('TP2_TAREFA')
         nP2ETA := FieldPos('TP2_ETAPA')
         nP2OPC := FieldPos('TP2_OPCAO')

         lDelTP2:= .T.

         If nOPCAO == 4
            If Len(aCopyTP2) == Len(aOldTP2)
               lDelTP2 := .f.
               For nI := 1 to Len(aOldTP2)
                  For nY := 1 to Len(aOldTP2[nI])
                     If aOldTP2[nI][nY] != aCopyTP2[nI][nY]
                        lDelTP2 := .t.
                        Exit
                     EndIf
                  Next nY
                  If lDelTP2
                     Exit
                  EndIf
               Next nI
            EndIf
         EndIf

         If lDelTP2
            For nI := 1 to Len(aCopyTP2)

               cSeek := aCopyTP2[nI][nP2FAM] + aCopyTP2[nI][nP2MOD] + aCopyTP2[nI][nP2SER] + aCopyTP2[nI][nP2SEQ]
               
               If dbSeek(xFilial("TP2")+cSeek+aCopyTP2[nI][nP2TAR]+aCopyTP2[nI][nP2ETA]+aCopyTP2[nI][nP2OPC])
                  NGDELETAREG("TP2")
               EndIf

            Next nI

            If nOPCAO == 4

               For nI := 1 to Len(aOldTP2)

                  cSeek := aOldTP2[nI][nP2FAM] + aOldTP2[nI][nP2MOD] + aOldTP2[nI][nP2SER] + aOldTP2[nI][nP2SEQ]
                  
                  If dbSeek(xFilial("TP2")+cSeek+aOldTP2[nI][nP2TAR]+aOldTP2[nI][nP2ETA]+aOldTP2[nI][nP2OPC])
                     RecLock("TP2",.f.)
                  Else
                     RecLock("TP2",.t.)
                  EndIf

                  For nY := 1 to Len(aOldTP2[nI])
                     FieldPut(nY,aOldTP2[nI][nY])
                  Next nY
                  MsUnLock()
               Next nI
            EndIf
         EndIf
         aCopyTP2 := {}
      EndIf

      RestArea(aTPFArea)

   EndIf

	//Retorna lCopia falso
	lCopia := .F.

	dbSelectArea( 'TPF' )
   dbSetOrder( 4 )
	dbGoTo( RECNO() )

	//+-------------------------------------------------------------------+
	//|Retorna conteudo de variaveis padroes       						  |
	//+-------------------------------------------------------------------+
	NGRETURNPRM(aNGBEGINPRM)

 Return

//---------------------------------------------------------------------
 /*/{Protheus.doc} ENTRAGET
Retorna aCols e aHeader quando se foca a GETDADOS
@author Deivys Joenck
@since 14/08/01
@version undefined
@param nG, numeric
@type function
/*/
//---------------------------------------------------------------------
Static Function ENTRAGET(nG)

	Local cVar		:= "oGET" + STRZERO(nG, 2)
   Local aNoFields	:= {}

	cFAM180 := M->TPF_CODFAM
	cSER180 := M->TPF_SERVIC
	cSEQ180 := M->TPF_SEQREL
	cTIP180 := M->TPF_TIPMOD
	aHEADER := aCLONE(aSVHEADER[nG])
	aCOLS   := aCLONE(aSVCOLS[nG])
	n       := Len(aCOLS)

	oFolder:Refresh()
	//+-------------------------------------------------------------------+
	//|  São utilizados dois Refresh's para a MsGetDados devido à		  |
	//|  algum problema (provavelmente Framework) no qual o objeto		  |
	//|  não é atualizado corretamente quando utilizado apenas um.		  |
	//|  Pedro Henrique Soares de Souza | 07/01/2015					  |
	//+-------------------------------------------------------------------+s
	&cVAR:oBROWSE:REFRESH()
	&cVAR:oBrowse:Refresh()

	If cVar == "oGET03"
		SetKey(VK_F4,{|| MntViewSB2(aCOLS[n,nTIPORE],aCOLS[n,nCODIGO]) })
	EndIf

	nCONTROGD := nG

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} NG180GRAVA
Funcao para gravacao dos dados.
@author Deivys Joenck
@since 05/07/01
@version undefined
@param nOPCS, numeric
@type function
/*/
//---------------------------------------------------------------------
Function NG180GRAVA(nOPCS)

   Local oTmpTbl1 //Obj. Tab. Temporária
   Local i := 0,ah,ny
	Local xConteudo := ""

   Private cTRB := GetNextAlias()//Alias Tabela Temporária.

   cFAM180 := M->TPF_CODFAM
   cSER180 := M->TPF_SERVIC
   cTIP180 := M->TPF_TIPMOD
   cSEQ180 := M->TPF_SEQREL

   If nCONTROGD # 0
      NGSAIENC(nCONTROGD)
   EndIf

   bCAMPO := {|nCPO| Field(nCPO)}
   lFIELD := (VALTYPE(aCHOICE) == "A")
   lGRAVA := (TYPE("bNGGRAVA") == "B")
   If lFIELD
      lFIELD := !Empty(aCHOICE)
   EndIf

   dbSelectArea( 'TPF' )
   dbSetOrder( 4 )

   If nOPCS == 3 .Or. nOPCS == 4

      dbSelectArea("TPF")
      aCAMPO   := DbStruct()

		//Instancia classe FWTemporaryTable
		oTmpTbl1:= FWTemporaryTable():New( cTRB, aCampo )
		//Adiciona os Indices
		oTmpTbl1:AddIndex( "Ind01" , {"TPF_CODFAM","TPF_TIPMOD"} )
		//Cria a tabela temporaria
		oTmpTbl1:Create()

      If nOPCS == 4
         dbSelectArea("TPF")
         dbSelectArea(cTRB)
         (cTRB)->(DbAppend())
         For i := 1 To FCOUNT()
            x   := "TPF->"+FIELDNAME(i)
            y   := "(cTRB)->"+FIELDNAME(i)
            &y. := &x.
         Next i
      EndIf
        
      GRAVATAR(1)//Grava dados no aCols
      GRAVATPM() //Grava dados no aCols para TPM
      GRAVATPG() //Detalhes Manutenção Padrão
      GRAVATPH() //Etapas Manutenção Padrão

      //---------------------------------------------------------------------
      //| Atualiza o arquivo principal (cALIAS)                             |
      //---------------------------------------------------------------------
      dbSelectArea("TPF")
      For ah := 1 To Len(aVARNAO)
         xx := aVARNAO[ah][1]
         yy := aVARNAO[ah][2]
         If !Empty(yy)
            &xx. := &yy.
         EndIf
      Next
        
      If NGIFDBSEEK( 'TPF', cFAM180 + cTIP180 + cSER180 + cSEQ180, 4 )
         RecLock("TPF",.F.)
      Else
         RecLock("TPF",.T.)
      EndIf
      
      For ny := 1 To FCOUNT()
         nx := "M->" + FIELDNAME(ny)
         If "_FILIAL"$UPPER(nx)
            FieldPut(ny, xFILIAL("TPF"))
         Else
            xConteudo := &NX.
            If ValType(xConteudo) != "M"
               FieldPut(ny, &nx.)
            EndIf
         EndIf
      Next ny

      If lTIPLUB
         Dbselectarea("TPF")
         TPF->TPF_TIPLUB := NGSEEK("ST4",TPF->TPF_SERVIC,1,"T4_LUBRIFI")
      EndIf

      MsUnLock()

      EvalTrigger()  // Processa Gatilhos
      If nOPCS == 3
         ConfirmSX8()
      EndIf
      ATUALISTF()

      oTmpTbl1:Delete()//Deleta Tabela Temporiária

   EndIf

   If nOPCS == 3
      RollBackSX8()
   EndIf

   If nOPCS == 5
      Store .t. To lWhileTPH,lWhileTP2,lWhileTPG,lWhileTPM,lWhileTP5
      
      NGIFDBSEEK("TPH",cFAM180+cTIP180+cSER180+cSEQ180,6)
      lWhileTPH := &("TPH->TPH_TIPMOD == cTIP180")

      While !Eof() .And. TPH->TPH_FILIAL == xFILIAL("TPH") .And.;
         TPH->TPH_CODFAM == cFAM180 .And. TPH->TPH_SERVIC == cSER180 .And.;
         TPH->TPH_SEQREL == cSEQ180 .And. lWhileTPH

         NGIFDBSEEK("TP2",cFAM180+cTIP180+cSER180+cSEQ180+TPH->TPH_TAREFA,3)
         lWhileTP2 := &("TP2->TP2_TIPMOD == cTIP180")

         While !Eof() .And. TP2->TP2_FILIAL == xFILIAL("TP2") .And.;
            TP2->TP2_CODFAM == cFAM180 .And. TP2->TP2_SERVIC == cSER180 .And.;
            TP2->TP2_SEQREL == cSEQ180 .And. TP2->TP2_TAREFA == TPH->TPH_TAREFA;
            .And. lWhileTP2
            NGDELETAREG("TP2")
            dbSkip()
         End
         NGDELETAREG("TPH")
         dbSkip()
      End

      NGIFDBSEEK("TPG",cFAM180+cTIP180+cSER180+cSEQ180,3)
      lWhileTPG := &("TPG->TPG_TIPMOD == cTIP180")
     
      While !Eof() .And. TPG->TPG_FILIAL == xFILIAL("TPG") .And.;
         TPG->TPG_CODFAM == cFAM180 .And. TPG->TPG_SERVIC == cSER180 .And.;
         TPG->TPG_SEQREL == cSEQ180 .And. lWhileTPG
         NGDELETAREG("TPG")
         dbSkip()
      End

      NGIFDBSEEK("TPM",cFAM180+cTIP180+cSER180+cSEQ180,2)
      lWhileTPM := &("TPM->TPM_TIPMOD == cTIP180")
      
      While !Eof() .And. TPM->TPM_FILIAL == xFILIAL("TPM") .And.;
         TPM->TPM_CODFAM == cFAM180 .And. TPM->TPM_SERVIC == cSER180 .And.;
         TPM->TPM_SEQREL == cSEQ180 .And. lWhileTPM
         NGDELETAREG("TPM")
         dbSkip()
      End

      NGIFDBSEEK("TP5",cFAM180+cTIP180+cSER180+cSEQ180,3)
      lWhileTP5 := &("TP5->TP5_TIPMOD == cTIP180")
     
      While !Eof() .And. TP5->TP5_FILIAL == xFILIAL("TP5") .And.;
         TP5->TP5_CODFAM == cFAM180 .And. TP5->TP5_SERVIC == cSER180 .And.;
         TP5->TP5_SEQREL == cSEQ180 .And. lWhileTP5
         NGDELETAREG("TP5")
         dbSkip()
      End
      NGDELETAREG("TPF")
      EvalTrigger()  // Processa Gatilhos

   EndIf

   dbSelectArea("TPF")

 Return .T.
//---------------------------------------------------------------------
 /*/{Protheus.doc} GRAVATAR
Funcao para gravacao dos dados no aCols.
@author Deivys Joenck
@since 30/07/01
@version undefined
@param xp
@type function
/*/
//---------------------------------------------------------------------
Static Function GRAVATAR(xp)
   
   Local ny,cTAR,cTIP,nDESCRI,i,x

   NGIFDBSEEK( 'TP9', M->TPF_CODFAM + M->TPF_TIPMOD, 1 )
   
   dbSelectArea( 'TP5' )
   dbSetOrder( 3 )
    
   If aHeader[1,2] != 'TP5_TAREFA'
      aHeader := aClone( aSVHEADER[1] )
      aCols   := aClone( aSVCOLS[1] )
   EndIf

   nDESCRI := GDFIELDPOS("TP5_DESCRI")

   //---------------------------------------------------------------------
   //| Verifica se nao foi excluido nenhum registro e grava 			  |
   //| as novas inclusoes e alteracoes efetuadas            			  |
   //---------------------------------------------------------------------
   For x:=1 To Len(aCOLS)
      
      If !Empty(aCOLS[x][1])
         
         If aCOLS[x][Len(aCOLS[x])]
          
            If NGIFDBSEEK( 'TP5', cFAM180 + cTIP180 + cSER180 + cSEQ180 + aCOLS[x][nTAREFA], 3 )

               cTAR := aCOLS[x][nTAREFA]
               cTIP := aCOLS[x][nDESCRI]
               nQTD := 0

               aEVAL(aCOLS,{|x| If(x[nTAREFA]+x[nDESCRI] == cTAR+cTIP,nQTD++,NIL)})
               
               If nQTD <= 1
               
                  lDELTP5 := IIf(NGIFDBSEEK("TPG", cFAM180+cTIP180+cSER180+cSEQ180+TP5->TP5_TAREFA, 3 ),.f.,.t.)

                  If lDELTP5
                     lDELTP5 := IIf(NGIFDBSEEK("TPM", cFAM180+cTIP180+cSER180+cSEQ180+TP5->TP5_TAREFA, 2 ),.f.,.t.)
                  EndIf
                     
                  If lDELTP5
                     lDELTP5 := IIf(NGIFDBSEEK("TPH",cFAM180+cTIP180+cSER180+cSEQ180+TP5->TP5_TAREFA, 6 ),.f.,.t.)
                  EndIf
                     
                  If lDELTP5
                     
                     If NGIFDBSEEK("TP5", cFAM180+cTIP180+cSER180+cSEQ180+cTAR, 3 )
                        NGDELETAREG("TP5")
                     EndIf

                  EndIf

               EndIf
               
            EndIf
            
            If NGIFDBSEEK("TP5", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[x][nTAREFA], 3 )
            
               NGDELETAREG("TP5")
            
            EndIf
            
            Loop

         EndIf

         If NGIFDBSEEK("TP5", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[x][nTAREFA], 3 )
            RecLock("TP5",.F.)
         Else
          
            RecLock("TP5",.T.)
            TP5->TP5_FILIAL := xFILIAL("TP5")
            TP5->TP5_CODFAM := M->TPF_CODFAM
            TP5->TP5_TIPMOD := M->TPF_TIPMOD
            TP5->TP5_SERVIC := M->TPF_SERVIC
            TP5->TP5_SEQREL := M->TPF_SEQREL
         EndIf

         For i := 1 To FCOUNT()
            xx := GDFIELDPOS(AllTrim(FIELDNAME(i)))
            If xx > 0
               vv   := "TP5->"+FIELDNAME(i)
               &vv. := aCOLS[x][xx]
            EndIf
         Next i
         
         MsUnLock()

         If xp == 1 .And. aScan( aAddTT9, { |x| x == TP5->TP5_TAREFA } ) > 0
            
            NGGTARPADRA( TP5->TP5_TAREFA, TP5->TP5_DESCRI, '1' )
         
         EndIf

      EndIf
    
   Next

   cSeqTP5:= M->TPF_SEQREL
   For ny := 1 To Len(aTP5ACOL)
		If aSCAN(aCols,{|x| x[1] == aTP5ACOL[ny,nTAREFA]}) = 0
         If NGIFDBSEEK("TP5", M->TPF_CODFAM+cTIP180+M->TPF_SERVIC+cSeqTP5+aTP5ACOL[ny,nTAREFA], 3 )
             NGDELETAREG("TP5")
         EndIf
      EndIf
   Next ny
   
   If lOK == .F.
      oGET01:oBROWSE:REFRESH()
      NGSAIGET( 1, oGet01 )
   EndIf
   
   If lOK .And. xp = 2
      NGSAIGET( 1, oGet01 )
   EndIf
   
   dbSelectArea("TPF")

Return lOk
//---------------------------------------------------------------------
/*/{Protheus.doc} GRAVATPM
Funcao para gravacao dos dados no aCols para o TPM
@author Deivys Joenck
@since 20/12/01
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Static Function GRAVATPM()

   Local ny,cTAR,cDEP,nTARM,x,i

   dbSelectArea("TPM")
   dbSetOrder(2)
   aCOLS   := aCLONE(aSVCOLS[2])
   aHEADER := aCLONE(aSVHEADER[2])
   nTARM   := 1
   nDepend := 2
   //---------------------------------------------------------------------
   //| Verifica se nao foi excluido nenhum registro e grava 			  |
   //| as novas inclusoes e alteracoes efetuadas            			  |
   //---------------------------------------------------------------------
   For x:=1 To Len(aCOLS)
      If !Empty(aCOLS[x][1])
         If aCOLS[x][Len(aCOLS[x])]
            If NGIFDBSEEK("TPM", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[x][nTARM]+aCOLS[x][nDEPEND], 2 )
               cTAR := aCOLS[x][nTARM]
               cDEP := aCOLS[x][nDEPEND]
               nQTD := 0

               aEVAL(aCOLS, {|x| IIf(x[nTARM]+x[nDEPEND] == cTAR+cDEP,nQTD++,NIL)})
               If nQTD <= 1
                  NGDELETAREG("TPM")
               EndIf
            EndIf
            Loop
         EndIf

         If NGIFDBSEEK("TPM", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[x][nTARM]+aCOLS[x][nDEPEND], 2 )
            RecLock("TPM",.F.)
         Else
            RecLock("TPM",.T.)
            TPM->TPM_FILIAL := xFILIAL("TPM")
            TPM->TPM_CODFAM := M->TPF_CODFAM
            TPM->TPM_TIPMOD := M->TPF_TIPMOD
            TPM->TPM_SERVIC := M->TPF_SERVIC
            TPM->TPM_SEQREL := M->TPF_SEQREL
         EndIf

         For i := 1 To FCOUNT()
            xx := GDFIELDPOS(AllTrim(FIELDNAME(i)))
            If xx > 0
               vv   := "TPM->"+FIELDNAME(i)
               &vv. := aCOLS[x][xx]
            EndIf
      Next i
      MsUnLock()
      EndIf
   Next
   cSeqTPM := M->TPF_SEQREL
   For ny := 1 To Len(aTPMACOL)
      If aSCAN(aTPMACOL,{|x| x[1]+x[2] == aCols[ny,nTARM]+aCols[ny,nDEPEND]}) = 0
         If NGIFDBSEEK("TPM", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+cSeqTPM+aTPMACOL[ny,nTARM]+aTPMACOL[ny,nDEPEND], 2 )
            NGDELETAREG("TPM")
         EndIf
      EndIf
   Next ny

   NGSAIGET( 2, oGet02 )

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} GRAVATPG
Funcao para gravacao dos dados no aCols para o TPG
@author Deivys Joenck
@since 17/12/01
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Static Function GRAVATPG()
    Local ny,cTAR,cTIP,cCOD,i,x

   dbSelectArea("TPG")
   dbSetOrder(3)
   aCOLS   := aCLONE(aSVCOLS[3])
   aHEADER := aCLONE(aSVHEADER[3])

   //---------------------------------------------------------------------
   //| Verifica se nao foi excluido nenhum registro e grava 			  |
   //| as novas inclusoes e alteracoes efetuadas            			  |
   //---------------------------------------------------------------------
   For x:= 1 To Len(aCOLS)
      If !Empty(aCOLS[x][nTIPORE])
         If aCOLS[x][Len(aCOLS[x])]
            If NGIFDBSEEK("TPG", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[x][nTARG]+aCOLS[x][nTIPORE]+aCOLS[x][nCODIGO], 3 )
               cTAR := aCOLS[x][nTARG]
               cTIP := aCOLS[x][nTIPORE]
               cCOD := aCOLS[x][nCODIGO]
               nQTD := 0

               aEVAL(aCOLS, {|x| If(x[nTARG]+x[nTIPORE]+x[nCODIGO] == cTAR+cTIP+cCOD,nQTD++,NIL)})
               If nQTD <= 1
            
                  NGDELETAREG("TPG")
               EndIf
            EndIf
            Loop
         EndIf

         If NGIFDBSEEK("TPG", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[x][nTARG]+aCOLS[x][nTIPORE]+aCOLS[x][nCODIGO], 3 )
            RecLock("TPG",.F.)
         Else
            RecLock("TPG",.T.)
            TPG->TPG_FILIAL := xFILIAL("TPG")
            TPG->TPG_CODFAM := M->TPF_CODFAM
            TPG->TPG_SERVIC := M->TPF_SERVIC
            TPG->TPG_TIPMOD := M->TPF_TIPMOD
            TPG->TPG_SEQREL := M->TPF_SEQREL
            If nALMOX == 0

               TPG->TPG_LOCAL   := NGSEEK('SB1',aCols[x][nCODIGO],1,'B1_LOCPAD')

            EndIf
         EndIf

         For i := 1 To FCOUNT()
            xx := GDFIELDPOS(AllTrim(FIELDNAME(i)))
            If xx > 0
               vv   := "TPG->"+FIELDNAME(i)
               &vv. := aCOLS[x][xx]
            EndIf
         Next i
         MsUnLock()
      EndIf
   Next

   cSeqTPG := M->TPF_SEQREL
   For ny := 1 To Len(aTPGACOL)
      If aSCAN(aTPGACOL,{|x| x[nTARG]+x[nTIPORE]+x[nCODIGO] == aCols[ny,nTARG]+aCols[ny,nTIPORE]+aCols[ny,nCODIGO]}) = 0
         If NGIFDBSEEK("TPG", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+cSeqTPG+aTPGACOL[ny,nTARG]+aTPGACOL[ny,nTIPORE]+aTPGACOL[ny,nCODIGO], 3 )
            NGDELETAREG("TPG")
         EndIf
      EndIf
   Next ny

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} GRAVATPH
Funcao para gravacao dos dados no aCols para o TPH

@author Deivys Joenck
@since 21/12/01
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Static Function GRAVATPH()

   Local ny      := 0
   Local nx      := 0
   Local nI      := 0
   Local cTAR    := ""
   Local cETA    := ""
   Local cFilTP2 := xFilial( 'TP2' )
   Local cFilTPC := xFilial( 'TPC' )

   dbSelectArea("TPH")
   dbSetOrder( 6 )
   aCOLS   := aCLONE(aSVCOLS[4])
   aHEADER := aCLONE(aSVHEADER[4])

   //---------------------------------------------------------------------
   //| Verifica se nao foi excluido nenhum registro e grava 			  |
   //| as novas inclusoes e alteracoes efetuadas                 		  |
   //---------------------------------------------------------------------
   For nx := 1 To Len(aCOLS)
      If !Empty(aCOLS[nx][1])
         
         If aCOLS[nx][Len(aCOLS[nx])]
            If NGIFDBSEEK("TPH", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[nx][nTARH]+aCOLS[nx][nETAPA], 6 )
               cTAR := aCOLS[nx][nTARG]
               cETA := aCOLS[nx][nETAPA]
               nQTD := 0

               aEVAL(aCOLS, {|x| If(x[nTARH]+x[nETAPA]== cTAR+cETA,nQTD++,NIL)})
               If nQTD <= 1
                  NGDELETAREG("TPH")
               EndIf
            EndIf
            DELTP2OP(aCOLS[nx][nTARH],aCOLS[nx][nETAPA])
            Loop
         EndIf

         //Se for Sem Opcoes verifica TP2 e deleta registros
		   If aCOLS[nx][nOPCOES] = '0'
            DELTP2OP(aCOLS[nx][nTARH],aCOLS[nx][nETAPA])
         EndIf

         If NGIFDBSEEK("TPH", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[nx][nTARH]+aCOLS[nx][nETAPA], 6 )
            RecLock("TPH",.F.)
         Else
            RecLock("TPH",.T.)
            TPH->TPH_FILIAL := xFILIAL("TPH")
            TPH->TPH_CODFAM := M->TPF_CODFAM
            TPH->TPH_TIPMOD := M->TPF_TIPMOD
            TPH->TPH_SERVIC := M->TPF_SERVIC
            TPH->TPH_SEQREL := M->TPF_SEQREL
         EndIf

         For nI := 1 To FCOUNT()
            xx := GDFIELDPOS(AllTrim(FIELDNAME(nI)))
            If xx > 0
               vv   := "TPH->"+FIELDNAME(nI)
               &vv. := aCOLS[nx][xx]
            EndIf
         Next nI
         MsUnLock()
      EndIf
      
      dbSelectArea( 'TPC' )
      dbSetOrder( 1 ) // TPC_FILIAL + TPC_ETAPA + TPC_OPCAO
      If dbSeek( cFilTPC + aCols[nX,nEtapa] )

         While TPC->( !EoF() ) .And. TPC->TPC_FILIAL == cFilTPC .And. TPC->TPC_ETAPA == aCols[nX,nEtapa]

            /*----------------------------------------------------------+
            | Realiza gravação da opções de resposta para etapa padrão. |
            +----------------------------------------------------------*/
            dbSelectArea( 'TP2' )
            dbSetOrder( 3 ) // TP2_FILIAL + TP2_CODFAM + TP2_TIPMOD + TP2_SERVIC + TP2_SEQREL + TP2_TAREFA + TP2_ETAPA + TP2_OPCAO
            If !dbSeek( cFilTP2 + M->TPF_CODFAM + M->TPF_TIPMOD + M->TPF_SERVIC + M->TPF_SEQREL + aCols[nX,nTARH] + aCols[nX,nEtapa] +;
               TPC->TPC_OPCAO )

               RecLock( 'TP2', .T. )
               TP2->TP2_FILIAL := cFilTP2
               TP2->TP2_CODFAM := M->TPF_CODFAM
               TP2->TP2_TIPMOD := M->TPF_TIPMOD
               TP2->TP2_SERVIC := M->TPF_SERVIC
               TP2->TP2_SEQREL := M->TPF_SEQREL
               TP2->TP2_TAREFA := aCols[nX,nTARH]
               TP2->TP2_ETAPA  := TPC->TPC_ETAPA
               TP2->TP2_OPCAO  := TPC->TPC_OPCAO
               TP2->TP2_TIPRES := TPC->TPC_TIPRES
               TP2->TP2_CONDOP := TPC->TPC_CONDOP
               TP2->TP2_CONDIN := TPC->TPC_CONDIN
               TP2->TP2_TPMANU := TPC->TPC_TPMANU
               TP2->TP2_TIPCAM := TPC->TPC_TIPCAM
               TP2->TP2_SERVMN := TPC->TPC_SERVIC
               TP2->TP2_PORBEM := TPC->TPC_PORBEM
               TP2->TP2_DESCRI := TPC->TPC_DESCRI
               MsUnLock()

            EndIf

            aAdd( aCopyTP2, {} )

            For nY := 1 To FCOUNT()
               aAdd(aCopyTP2[Len(aCopyTP2)],&("TP2->"+FieldName(nY)))
            Next nY

            TPC->( dbSkip() )

         End

      EndIf

   Next

   cSeqTPH := M->TPF_SEQREL
   For ny := 1 To Len( aTPHACOL )
      
      If aScan( aTPHACOL, { |x| x[1] + x[2] == aCols[ny,nTARH] + aCols[ny,nETAPA] } ) == 0
         
         If NGIFDBSEEK( 'TPH', M->TPF_CODFAM + M->TPF_TIPMOD + M->TPF_SERVIC + cSeqTPH + aTPHACOL[ny,nTARH] + aTPHACOL[ny,nETAPA], 6 )
            
            NGDELETAREG( 'TPH' )

            If aTPHACOL[nY,nOPCOES] != '0'
               
               /*--------------------------------------------------+
               | Deleta relacionamento entre as tabelas TPH x TP2. |
               +--------------------------------------------------*/
               DELTP2OP( aTPHACOL[nY,nTARH], aTPHACOL[nY,nETAPA] )
            
            EndIf
         
         EndIf

      EndIf

   Next ny

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180LINOK
Critica se a linha digitada esta' Ok
@author Deivys Joenck
@since 03/08/01
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function NG180LINOK()

   Local nx,lRET  := .T.,lREFRE := .F.
   Local lOk      := .T.
   Local cObject  := 'oGET' + StrZero( nCONTROGD, 2 )
   Local cVarHead := cObject + ':aHeader'
   Local cVarCols := cObject + ':aCols'
   Local nLine    := &( cObject + ':nAt' )
   Local nTeenMan := GDFieldPos( 'TP5_TEENMA', oGet01:aHeader )
   Local nUnenMan := GDFieldPos( 'TP5_UNENMA', oGet01:aHeader )
   Local nInenMan := GDFieldPos( 'TP5_INENMA', oGet01:aHeader )

   aHeader := aClone( &( cVarHead ) )
   aCols   := aClone( &( cVarCols ) )

   If lOK .And. aHEADER[1,2] != 'TP5_TAREFA'

      aSVHEADER[nCONTROGD] := aClone( &cVarHead ) //Não remover, utilizado no NGSAIGET
      aSVCOLS[nCONTROGD]   := aClone( &cVarCols ) //Não remover, utilizado no NGSAIGET
      
      oGET01:oBROWSE:REFRESH()

      NGSAIGET( nCONTROGD )
     
      lREFRE  := .T.

   EndIf

   If Len( oGet01:aCols ) == 1 .And. !aTail( oGet01:aCols[1] )

      If Empty( oGet01:aCols[1,nTAREFA] ) .And.;
         Empty( oGet01:aCols[1,nDESCRI] )
         
         Return .T.
      
      EndIf

   EndIf

   If lOk

      For nX :=1 To Len( oGet01:aCols )
         
         If !aTail( oGet01:aCols[nX] )
          
            If Empty( oGet01:aCols[nX,nTAREFA] ) .Or.;
               Empty( oGet01:aCols[nX,nDESCRI] )

               HELP( '', 1, 'OBRIGAT' )
               
               lRet := .F.

            EndIf
        
         EndIf
   
      Next nX

   EndIf

   /*-----------------------------------------------------------------+
   | Valid. preenchimento de campos obrigatórios conforme TPF_PERIOD. |
   +-----------------------------------------------------------------*/
   If lRet .And. nControGD == 1 .And.;
      !aTail( oGet01:aCols[oGet01:nAt] )

      If M->TPF_PERIOD == 'M'

         /*-------------------------------------+
         | Valid. preenchimento dos campos TP5. |
         +-------------------------------------*/
         lRet := fVldPeriod( oGet01:aCols[oGet01:nAt,nTeenMan],;
            oGet01:aCols[oGet01:nAt,nUnenMan], oGet01:aCols[oGet01:nAt,nInenMan] )

      EndIf

   EndIf
   
   If lRet

      If !lOK

         oGet01:oBrowse:Refresh()

      EndIf
      
      If lREFRE
         aCOLS   := aCLONE(aSVCOLS[nCONTROGD])
         aHEADER := aCLONE(aSVHEADER[nCONTROGD])
         oFOLDER:REFRESH()
      EndIf

      If nCONTROGD == 3 .And. ExistBlock( 'MNTA180K' )

         /*-----------------------------------------------------------------+
         | Ponto de entrada para incluir validações no processo de insumos. |
         +-----------------------------------------------------------------*/
         lRet := ExecBlock( 'MNTA180K', .F., .F., { aCols, nLine, aHeader } )

      EndIf

   EndIf

Return lRET
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180LINO2
Critica se a linha digitada esta' Ok
@author eduardo.izola
@since 06/08/01
@version undefined
@param _ng2
@type function
/*/
//---------------------------------------------------------------------
Function NG180LINO2( _ng2 )

   Local lRet := .T.
   Local nX   := 0

   If Len( oGet02:aCols ) == 1 .And. !aTail( oGet02:aCols[1] )

      If Empty( oGet02:aCols[1,nTARM]) .And. Empty( oGet02:aCols[1,nDEPEND] )
         
         Return .T.
      
      EndIf

   EndIf

   For nX := 1 To Len( oGet02:aCols )

      If !aTail( oGet02:aCols[nX] )

         If Empty( oGet02:aCols[nX,nTARM] ) .Or.;
            Empty( oGet02:aCols[nX,nDEPEND] )

            Help( '', 1, 'OBRIGAT' )
            
            lRet := .F.

            Exit

         EndIf
        
      EndIf

   Next nX

   If !lOK

      oGet02:oBrowse:REFRESH()

   EndIf
   
   If _ng2 == Nil

      NGSAIGET( 2, oGet02 )

   EndIf

Return lRET
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180LINO3
Critica se a linha digitada esta' Ok
@author Deivys Joenck
@since 26/07/01
@version undefined
@param _ng3
@type function
/*/
//---------------------------------------------------------------------
Function NG180LINO3()

   Local lRet  := .T. 

   If Len( oGet03:aCols ) == 1 .And. !aTail( oGet03:aCols[1] )

      If Empty( oGet03:aCols[oGet03:nAt,nTARG] )   .And. Empty( oGet03:aCols[oGet03:nAt,nTIPORE] ) .And.;
         Empty( oGet03:aCols[oGet03:nAt,nCODIGO] ) .And. Empty( oGet03:aCols[oGet03:nAt,nQUANTI] ) .And.;
         Empty( oGet03:aCols[oGet03:nAt,nUNIDAD] )
         
         Return .T.

      EndIf

   EndIf

   If !aTail( oGet03:aCols[oGet03:nAt] )
      
      If Empty( oGet03:aCols[oGet03:nAt,nTARG] )   .Or. Empty( oGet03:aCols[oGet03:nAt,nTIPORE] ) .Or.;
         Empty( oGet03:aCols[oGet03:nAt,nCODIGO] ) .Or. Empty( oGet03:aCols[oGet03:nAt,nQUANTI])  .Or.;
         Empty( oGet03:aCols[oGet03:nAt,nUNIDAD] )

         Help( '', 1, 'OBRIGAT' )

         lRet := .F.
      
      EndIf

      If lRet .And. !Empty( oGet03:aCols[oGet03:nAt,nTARG] )

         // Valida se a tarefa relacionada ao insumo existe no folder de tarefas (oGet01)
         If aScan( oGet01:aCols, { |x| x[nTAREFA] == oGet03:aCols[oGet03:nAt,nTARG] } ) == 0 .And.;
					( M->TPF_PERIOD == 'M' .Or. !( Trim( oGet03:aCols[oGet03:nAt,nTARG] ) == '0' ) )

            // Atenção ## Existem tarefas relacionadas a insumos que não constam no folder destinado as tarefas da manutenção!
            Help( Nil, Nil, STR0029, Nil, STR0069, 1, 0 )
            lRet := .F.

         EndIf

      EndIf

      If lRet .And. oGet03:aCols[oGet03:nAt,nTIPORE] $ 'F/E' .And.;
         Empty( oGet03:aCols[oGet03:nAt,nQUANRE] )

         Help( '', 1, 'QUANTRECUR' )

         lRet := .F.

      EndIf

      If lRet .And. oGet03:aCols[oGet03:nAt,nTIPORE] == 'P' .And.;
         Empty( oGet03:aCols[oGet03:nAt,nDESTIN] )

         Help( '', 1, 'DESTINO' )

         lRet := .F.

      EndIf

      If lRet .And. ( !Empty( oGet03:aCols[oGet03:nAt,nQTDGAR] ) .And. Empty( oGet03:aCols[oGet03:nAt,nUNIGAR] ) ) .Or.;
         ( Empty( oGet03:aCols[oGet03:nAt,nQTDGAR] )  .And. !Empty(oGet03:aCols[oGet03:nAt,nUNIGAR] ) )

         Help( '', 1, 'OBRIGAT' ) 

         lRet := .F.

      EndIf

   EndIf

   If !lOK

      oGet03:oBrowse:Refresh()

   EndIf

   If lRet

      NGSaiGet( 3, oGet03 )

   EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180LINO4
Critica se a linha digitada esta' Ok
@author Deivys Joenck
@since 01/08/01
@version undefined
@param _ng4
@type function
/*/
//---------------------------------------------------------------------
Function NG180LINO4( _ng4 )

   Local lRet := .T.

   If Len( oGet04:aCols ) == 1 .And. !aTail( oGet04:aCols[1] )

      If Empty( oGet04:aCols[1,nTARH] ) .And. Empty( oGet04:aCols[1,nETAPA] )
         
         Return .T.
      
      EndIf

   EndIf

   If !oGet04:aCols[oGet04:nAt,Len( oGet04:aCols[oGet04:nAt] )] .And.;
      !aTail( oGet04:aCols[oGet04:nAt] )

      If Empty( oGet04:aCols[oGet04:nAt,nTARH] ) .Or. Empty( oGet04:aCols[oGet04:nAt,nETAPA] ) .Or.;
         Empty( oGet04:aCols[oGet04:nAt,nOPCOES] )

         Help( '', 1, 'OBRIGAT' )
         
         lRet := .F.
      
      EndIf
   
   EndIf

   If !lRet
      
      oGet04:oBrowse:Refresh()

   EndIf

   If lRet

      If Empty( _ng4 ) .And. ( lRet := VldAllGets( 4 ) )
      	
         NGSaiGet( 4, oGet04 )

		EndIf

   EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} NG180EXIST
Critica se a nota toda esta' Ok
@author Deivys Joenck
@since 27/07/01
@version undefined
@param cALIAS, characters
@type function
/*/
//---------------------------------------------------------------------
Function NG180EXIST(cALIAS)
   
   Local lRET := .T. ,xy := 0, nPos

   If cALIAS == "TP5"
      cTAREFA := M->TP5_TAREFA
      For xy := 1 To Len(aCOLS)
         If xy != n .And. !aCOLS[xy][Len(aCOLS[xy])] .And. aCOLS[xy][nTAREFA] = cTAREFA
            lREFRESH := .T.
            HELP(" ",1,"JAGRAVADO")
            lRET := .F.
            Exit
         EndIf
      Next xy

      If lRET .And. NGUSATARPAD() .And. !NGIFDBSEEK("TT9",cTAREFA,1) .And. !Empty(cTAREFA)
         If MsgYesNo("Desejas utilizar a tarefa "+AllTrim(cTAREFA) + " como Tarefa Genêrica?","Atenção")
   
            bCondic := {|| If(Alias() == "TP5",TP5->TP5_FILIAL+TP5->TP5_CODFAM+TP5->TP5_TIPMOD+TP5->TP5_SERVIC+TP5->TP5_SEQREL != TPF->TPF_FILIAL+TPF->TPF_CODFAM+TPF->TPF_TIPMOD+TPF->TPF_SERVIC+TPF->TPF_SEQREL,.T.)}
         
            If !NGVTART5(cTAREFA,.T.,bCondic)
               aAdd(aAddTT9,cTAREFA)
            Else
               lRET := .F.
            EndIf
         Else
            nPos := aScan(aAddTT9,{|x| x == cTAREFA})
            If nPos > 0
               aDel( aAddTT9, nPos )
               aSize( aAddTT9, Len( aAddTT9 ) - 1 )
            EndIf
         EndIf
      EndIf
   EndIf

Return lRET

//---------------------------------------------------------------------
/*/{Protheus.doc} A180NUMERO
Critica o numero da solicitacao de compra
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function A180NUMERO()

    Local lRETORNA := .T. ,nSAVREC

    If Empty(cA180NUM)
       HELP(" ",1,"VAZIO")
       lRETORNA := .F.
    EndIf

    dbSelectArea("TPF")
    nSAVREC := RECNO()
    dbSeek(xFILIAL('TPF')+cA180NUM)
    If FOUND()
       HELP(" ",1,"A11001")
       lRETORNA := .F.
    EndIf
    Dbgoto(nSAVREC)

Return lRETORNA
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180TIPO
Mostra a descricao de um array pre-definido
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@param cTIPO, characters
@type function
/*/
//---------------------------------------------------------------------
Function NG180TIPO(cTIPO)

    Local aALIAS:= {"ST1","SB1","SA2","SH4","ST0"}

    If cTIPO != aCOLS[n][nTIPORE]
       aCOLS[n][nCODIGO] := Space(Len(aCOLS[n][nCODIGO]))
       aCOLS[n][nNOMECO] := Space(Len(aCOLS[n][nNOMECO]))
       aCOLS[n][nQUANRE] := 0
       aCOLS[n][nQUANTI] := 0.00
       aCOLS[n][nUNIDAD] := Space(Len(aCOLS[n][nUNIDAD]))
       aCOLS[n][nRESERV] := "S"
       aCOLS[n][nDESTIN] := Space(Len(aCOLS[n][nDESTIN]))
    EndIf

    aCOLS[n][nRESERV] := If(cTIPO == "T","N","S")
    KEY := AT(UPPER(cTIPO),"MPTFE")

    If cTipo <> "P"
       aCOLS[n][nUNIDAD] := "H"
    EndIf

    c180KEY := aALIAS[KEY]
    n180KEY := KEY
    cOLDALI := Alias()
    dbSelectArea(cOLDALI)

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180SERV
Verifica se o tipo de servico e valido.
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@param cCOD, characters, descricao
@type function
/*/
//---------------------------------------------------------------------
Function NG180SERV(cCOD)

    Local OLDALI := Alias()

    If NGIFDBSEEK("ST4",cCOD,1)
       If NGFUNCRPO("NGSERVBLOQ",.F.)  .And.  !NGSERVBLOQ(M->TPF_SERVIC)
          Return .f.
       EndIf
       NGIFDBSEEK("STE",ST4->T4_TIPOMAN,1)
       If STE->TE_CARACTE = "C" .Or. !FOUND()
          HELP(" ",1,"TIPSERVINV")
          dbSelectArea(OLDALI)
          Return .F.
       EndIf
       M->TPF_CODARE := ST4->T4_CODAREA
       M->TPF_TIPO   := ST4->T4_TIPOMAN
       lREFRESH := .T.
    Else
       Return .F.
    EndIf

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180CHECK
Valida o Campo codigo da Informacao
@author Inacio Luiz Kolling
@since XX/XX/XXXX.
@version undefined

@type function
/*/
//---------------------------------------------------------------------
Function NG180CHECK()

   Local _RET := .T.,_COD,cTAR,cTIP, cCOD := M->TPG_CODIGO ,QTD := 0
   Local cLoja := ''

   M->TPG_TIPORE := oGet03:aCols[oGet03:nAt,nTIPORE]

   nDel := Len( oGet03:aCols[oGet03:nAt] )

   _COD := oGet03:aCols[oGet03:nAt,nCODIGO]
   cTAR := oGet03:aCols[oGet03:nAt,nTARG]
   cTIP := oGet03:aCols[oGet03:nAt,nTIPORE]

   ST1->(dbSetOrder(1))
   SB1->(dbSetOrder(1))
   SA2->(dbSetOrder(1))
   SH4->(dbSetOrder(1))
   ST0->(dbSetOrder(1))

   If Empty( oGet03:aCols[oGet03:nAt,nTARG] ) .And. !Empty(M->TPG_CODIGO) .And.;
      M->TPF_PERIOD != 'M'

      oGet03:aCols[oGet03:nAt,nTARG] := '0' + REPLICATE(" ",Len(TP5->TP5_TAREFA)-1)
      oGet03:oBROWSE:REFRESH()

      cTAR := oGet03:aCols[oGet03:nAt,nTARG]

      If !NGIFDBSEEK("TP5", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+cTAR, 3 )
         
         RecLock( 'TP5', .T. )
            TP5->TP5_FILIAL := IIF(Empty(cAliQrySTF), xFilial("TP5"), (cAliQrySTF)->TF_FILIAL)
            TP5->TP5_CODFAM := M->TPF_CODFAM
            TP5->TP5_TIPMOD := M->TPF_TIPMOD
            TP5->TP5_SERVIC := M->TPF_SERVIC
            TP5->TP5_SEQREL := M->TPF_SEQREL
            TP5->TP5_TAREFA := "0"
            TP5->TP5_DESCRI := STR0011 //"SEM ESPECIFICAO DE TAREFA"
         MsUnLock()

         lUpsertTP5 := .T.

      EndIf

   EndIf

   If !Empty( cTAR )

      aEVAL(aCOLS,{|x| If((x[nTARG] == cTAR .And. x[nTIPORE] == cTIP .And. cCOD == x[nCODIGO] .And. !x[nDel]),QTD++,NIL)})

      If QTD > 0
         HELP(" ",1,"TARJAEXIST")
         Return .F.
      EndIf

   EndIf

   If cTIP == "M"

      //Testa o tamanho do campo para nao permitir informar codigo invalido
      _RET := If(Len(Alltrim(cCOD)) > Len(ST1->T1_CODFUNC),.F.,.T.)

      If _RET
         cCOD := Left(cCOD, Len(ST1->T1_CODFUNC))
         _RET := ST1->(Dbseek(xFILIAL("ST1")+cCOD))
      EndIf

      If !_RET
         Help(" ",1,"FUNCNEXIST")
         Return .F.
      EndIf

      aCOLS[n][nNOMECO] := Left(ST1->T1_NOME+SPACE(40),40)

   Elseif cTIP == "P"

      //Testa o tamanho do campo para nao permitir informar codigo invalido
      _RET := If(Len(Alltrim(cCOD)) > Len(SB1->B1_COD),.F.,.T.)

      If _RET
         cCOD := Left(cCOD, Len(SB1->B1_COD))
         _RET := SB1->(Dbseek(xFILIAL("SB1")+cCOD))
      EndIf

      If !_RET
         Help(" ",1,"PRODNEXIST")
         Return .F.
      EndIf

      If !NGPRODESP(M->TPG_CODIGO,.T.)
         _RET := .F.
      EndIf

      If nNOMECO > 0
         aCOLS[n][nNOMECO] := Left(SB1->B1_DESC+SPACE(40),40)
      EndIf

      If nUNIDAD > 0
         aCOLS[n][nUNIDAD] := SB1->B1_UM
      EndIf

      If nALMOX > 0
         aCOLS[n][nALMOX]  := SB1->B1_LOCPAD
      EndIf

   Elseif cTIP == "T"
      
      If nFornec > 0

         If cCOD != SA2->A2_COD
            SA2->(DbSetOrder(1))
            SA2->(DbSeek(xFilial("SA2")+Alltrim(cCOD)))
         EndIf

         cLoja := SA2->A2_LOJA

         If !ExistCpo("SA2",SubStr(cCOD,1,Len(SA2->A2_COD))+cLoja)
            Return .F.
         EndIf
         
         //Verica se existe o campo Fornecedor
         If nFornec > 0
            aCols[n][nFornec]  := SA2->A2_COD
            aCols[n][nLoja] := SA2->A2_LOJA
         EndIf

      Else
         
         _RET := If(Len(Alltrim(cCOD)) > Len(SA2->A2_COD),.F.,.T.)

         If _RET
            cCOD := Left(cCOD, Len(SA2->A2_COD))
            _RET := SA2->(Dbseek(xFILIAL("SA2")+cCOD))
         EndIf

         If !_RET
            Help(" ",1,"TERCNEXIST")
            Return .F.
         EndIf
      
      EndIf

      aCOLS[n][nNOMECO] := Left(SA2->A2_NOME+SPACE(40),40)

   Elseif cTIP == "F"

      _RET := If(Len(Alltrim(cCOD)) > Len(SH4->H4_CODIGO),.F.,.T.)

      If _RET
         cCOD := Left(cCOD, Len(SH4->H4_CODIGO))
         _RET := SH4->(Dbseek(xFILIAL("SH4")+cCOD))
      EndIf

      If !_RET
         Help(" ",1,"FERRNEXIS")
         Return .F.
      EndIf

      aCOLS[n][nNOMECO] := Left(SH4->H4_DESCRI+SPACE(40),40)

   Else

      //Testa o tamanho do campo para nao permitir informar codigo invalido
      _RET := If(Len(Alltrim(cCOD)) > Len(ST0->T0_ESPECIA),.F.,.T.)

      If _RET
         cCOD := Left(cCOD,Len(ST0->T0_ESPECIA) )
         _RET := ST0->(Dbseek(xFILIAL("ST0")+cCOD))
      EndIf

      If !_RET
         Help(" ",1,"ESPENEXIST")
         Return .F.
      EndIf

      If _RET
         ST2->(Dbsetorder(2))
         If !ST2->(Dbseek(xFILIAL("ST2")+cCOD))
            HELP("",1,"NAOHAESP")
            Return .F.
         EndIf
         ST2->(Dbsetorder(1))
      EndIf

      aCOLS[n][nNOMECO] := Left(ST0->T0_NOME+SPACE(40),40)

   EndIf

   If cTIP == "M"
      If !NGFUNCRH(cCOD,.T.)
         Return .F.
      EndIf
   EndIf

   If cTIP <> "T" .And. nFornec > 0
      If !Empty(aCols[n][nFornec])
         aCols[n][nFornec]  := Space(Len(SA2->A2_COD))
         aCols[n][nLoja] := Space(Len(SA2->A2_LOJA))
      EndIf
   EndIf

Return _RET
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180CHKCTD
Valida os Campos correspondes a informacoes o tipo contador
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function NG180CHKCTD()

   If M->TPF_TIPACO != TPF->TPF_TIPACO

      M->TPF_INENMA := 0
      M->TPF_TEENMA := 0
      M->TPF_UNENMA := ''

   EndIf

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} a180CODF3
Valida o Campo codigo da Informacao
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@param X
@param Y
@type function
/*/
//---------------------------------------------------------------------
Function a180CODF3(X,Y)

    Local aCOD,aDES,_RET, aALIAS := {"ST1","SB1","SA2","SH4","ST0"}
    aCOD := {"T1_CODFUNC","B1_COD","A2_COD","H4_CODIGO","T0_ESPECIA"}
    aDES := {"T1_NOME","B1_DESC","A2_NOME","H4_DESCRI","T0_NOME"}

    n180KEY := AT(aCOLS[n][nTIPORE],"MPTFE")
    c180KEY := aAlias[n180KEY]
    If ALias() != c180KEY
       dbSelectArea(c180KEY)
       dbSeek(xFILIAL(c180KEY))
       OLDALIAS := c180KEY
       OLDORDER := 1
    EndIf
    If OLDORDER != NORDSXB
       If n180KEY == 2
          dbSetOrder(3)
          aARRAY[3][2] := 3
       Else
          dbSetOrder(NORDSXB)
          aARRAY[3][2] := 2
       EndIf
       dbSeek(xFILIAL(c180KEY))
       OLDORDER := NORDSXB
    EndIf
    _RET := If(x == 2,aDES[n180KEY],aCOD[n180KEY])

Return &_RET.
//---------------------------------------------------------------------
/*/{Protheus.doc} A180VIEW
visualizacao do cadastro de Bens de Manutencao Padrao
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@param cCOD, characters
@param nTIP, numeric
@type function
/*/
//---------------------------------------------------------------------
Function A180VIEW(cCOD,nTIP)
Return If(nTIP == 1,NGSEEK("ST9",cCOD,1,"T9_NOME"),NGSEEK("ST4",cCOD,1,"T4_NOME"))

//---------------------------------------------------------------------
/*/{Protheus.doc} NG180TAREFA
visualizacao do cadastro de Bens de Manutencao Padrao
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function NG180TAREFA()
Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180CHKPAR
Valida os Campos correspondes a PARADA DO Fam
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function NG180CHKPAR()

   Local cOLDALI

   If M->TPF_PARADA == "T"
      cOLDALI := Alias()
      If NGIFDBSEEK("STC", M->TPF_CODFAM+M->TPF_TIPMOD, 5 )
         Return .T.
      Else
         If NGIFDBSEEK("STC",M->TPF_CODFAM,3)
            Return .T.
         EndIf
      EndIf
      HELP(" ",1,"NEXITESTRU")
      NGDBAREAORDE(cOLDALI,1)
      Return .F.
   EndIf

   If M->TPF_PARADA == "N"
      M->TPF_TEPAAN := 0
      M->TPF_UNPAAN := " "
      M->TPF_TEPADE := 0
      M->TPF_UNPADE := " "
   EndIf

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180CHKTAR
Faz a integridade referencial entre os folders.
@author Deivys Joenck
@since 18/12/01
@version undefined
@param nVX, numeric
@type function
/*/
//---------------------------------------------------------------------
Function NG180CHKTAR(nVX)

    Local cTAREFA,nQTD := 0,cDEPEND,lRet := .t.
    n:= nVX

   cTAREFA := aCOLS[N][nTAREFA]
   cDEPEND := aCOLS[N][nDEPEND]
   
   NGSAIGET( 1, oGet01 )
   
   aCOLS   := aCLONE(aSVCOLS[2])

    If Len(aCOLS) > 0
       aEVAL(aCOLS,{|x| If(x[1] == cTAREFA,nQTD++,NIL)})
       If nQTD = 0
          aEVAL(aCOLS,{|x| If(x[2] == cTAREFA,nQTD++,NIL)})
       EndIf
    EndIf

    If nQTD = 0
       aCOLS := aCLONE(aSVCOLS[3])
       If Len(aCOLS) > 0
          aEVAL(aCOLS,{|x| If(x[1] == cTAREFA,nQTD++,NIL)})
       EndIf
    EndIf

    If nQTD = 0
       aCOLS := aCLONE(aSVCOLS[4])
       If Len(aCOLS) > 0
          aEVAL(aCOLS,{|x| If(x[1] == cTAREFA,nQTD++,NIL)})
       EndIf
    EndIf

    lRET    := If(nQTD > 0,.F.,.T.)
    aHEADER := aCLONE(aSVHEADER[1])
    aCOLS   := aCLONE(aSVCOLS[1])

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} CHK180
Consiste os campos digitados no enchoice
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Static Function CHK180()

   Local lRET := .T.

	Local cAliasQry := ''
	Local cTMCondic := '%%'

   If nOPCAO = 5

		cAliasQry := GetNextAlias()
         
      cTMCondic := "%"

      If Trim( M->TPF_TIPMOD ) != '*'

         cTMCondic += " AND T9_TIPMOD = " + ValToSql( M->TPF_TIPMOD )

      Else

         cTMCondic += " AND NOT EXISTS ( SELECT 1"
         cTMCondic +=   " FROM " + RetSqlName('TPF') + " TPFESP"
         cTMCondic +=   " WHERE TPFESP.TPF_CODFAM = " + ValToSql( M->TPF_CODFAM )
         cTMCondic +=     " AND TPFESP.TPF_TIPMOD = T9_TIPMOD"
         cTMCondic +=     " AND TPFESP.TPF_SERVIC = " + ValToSql( M->TPF_SERVIC )
         cTMCondic +=     " AND TPFESP.TPF_SEQREL = " + ValToSql( M->TPF_SEQREL )
         cTMCondic +=     " AND TPFESP.TPF_FILIAL = " + ValToSql( xFilial('TPF') )
         cTMCondic +=     " AND TPFESP.D_E_L_E_T_ = ' ' ) "

      EndIf

      cTMCondic += "%"

		BeginSQL Alias cAliasQry

            SELECT COUNT( TF_CODBEM ) TOTALMANUT
            FROM %table:STF% STF

            JOIN %table:ST9% ST9
                ON  T9_FILIAL  = %xFilial:ST9%
                AND ST9.T9_CODBEM  = STF.TF_CODBEM
                AND ST9.%NotDel%

            WHERE   STF.TF_FILIAL  = %xFilial:STF%
                AND ST9.T9_CODFAMI = %Exp:M->TPF_CODFAM%
                AND STF.TF_SERVICO = %Exp:M->TPF_SERVIC%
                AND STF.TF_SEQREPA = %Exp:M->TPF_SEQREL%
                AND STF.TF_PADRAO  = 'S'
                AND STF.%NotDel%
                %exp:cTMCondic%

		EndSQL

		// Se encontrou manutenções (STF) relacionadas ao padrão
		lRet := (cAliasQry)->TOTALMANUT == 0

		(cAliasQry)->( dbCloseArea() )

		If !lRET
			Help(" ",1,"NGINTMOD",,NGSX2NOME("TPF")+" x "+NGSX2NOME("STF"),5,1)
			Return .F.
		EndIf
   EndIf
  
   If !OBRIGATORIO( aGets, aTela )
      
      Return .F.
  
   EndIf

   NGENTRAENC("TPF")
   NGDBAREAORDE("SX3",2)
   If If(dbSeek("TPF_TEPAAN"),X3USO(Posicione("SX3",2,"TPF_TEPAAN","X3_USADO")),.F.) .And.;
      If(dbSeek("TPF_UNPAAN"),X3USO(Posicione("SX3",2,"TPF_UNPAAN","X3_USADO")),.F.)
      If !Empty(M->TPF_TEPAAN) .And. Empty(M->TPF_UNPAAN)
         HELP(" ",1,"UNPAANT")
         lRET := .F.
      EndIf
      If Empty(M->TPF_TEPAAN) .And. !Empty(M->TPF_UNPAAN)
         HELP(" ",1,"TEPAANT")
         lRET := .F.
      EndIf
   EndIf

   If If(dbSeek("TPF_TEPADE"),X3USO(Posicione("SX3",2,"TPF_TEPADE","X3_USADO")),.F.) .And.;
      If(dbSeek("TPF_UNPADE"),X3USO(Posicione("SX3",2,"TPF_UNPADE","X3_USADO")),.F.)
      If !Empty(M->TPF_TEPADE) .And. Empty(M->TPF_UNPADE)
         HELP(" ",1,"UNPADEP")
         lRET := .F.
      EndIf
      If Empty(M->TPF_TEPADE) .And. !Empty(M->TPF_UNPADE)
         HELP(" ",1,"TEPADEP")
         lRET :=.F.
      EndIf
   EndIf

   /*------------------------------------------------------+
   | Valid. preenchimento dos campos de periodicidade TPF. |
   +------------------------------------------------------*/
   If M->TPF_PERIOD == 'E'

      lRet := .T.

   ElseIf M->TPF_PERIOD != 'M'

      lRet := fVldPeriod( M->TPF_TEENMA, M->TPF_UNENMA,;
         M->TPF_INENMA )

   EndIf

   NGSAIENC("TPF")
   nControl := 1
   
   If oFolder:nOption > 1
      nControl := ((oFolder:nOption) - 1)
      NGSAIGET( nControl, &( 'oGet0' + cValToChar( nControl ) ) )
	EndIf

   If lRet

      /*-----------------------------------+
      | Valid. final de todos os GetDados. |
      +-----------------------------------*/
      lRet := fTudoOk( nControl )

   EndIf

   If lRet .And. ExistBlock( 'MNTA1803' )

		lRet := ExecBlock( 'MNTA1803', .F., .F. )
	
   EndIf
   
Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180CHKDT
Consiste a Data digitada
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@param dDATA, date
@type function
/*/
//---------------------------------------------------------------------
Function NG180CHKDT(dDATA)
    If dDATA > dDATABASE
       HELP(" ",1,"NG080DTINV")
       Return .F.
    EndIf
Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} BBSEEK
Preenche o Browse conforme o Parametro 6 da mBrowse
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@param cBUSCA, characters
@param cRET, characters
@type function
@return Tipo 1 -> Retorna CODIGO E NOME DA FAMILIA
@return Tipo 2 -> Retorna CODIGO E NOME DO SERVICO
/*/
//---------------------------------------------------------------------
Function BBSEEK(cBUSCA,cRET)
    dbSeek(xFILIAL()+cBUSCA)
Return &cRET.
//---------------------------------------------------------------------
/*/{Protheus.doc} ATUALISTF
Atualiza o STF,STG,ST5
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined

@type function
/*/
//---------------------------------------------------------------------
Function ATUALISTF()

    ALPADRAO := .F.
    EXPADRAO := .F.
    xALIAS   := "STF"

    NGDBAREAORDE("STF",3)
    Processa({|| MNTA180SEQ() })
Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} ALTPADSTF
Atualiza o STF com os campos modificados do TPF
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function ALTPADSTF()

   Local x := 0,y

   dbSelectArea(cTRB)
   For x := 1 To FCOUNT()
      xNOME := AllTrim(FIELDNAME(x))
      lAlFor := .F.
 
      If xNOME != "TPF_FILIAL" .And. xNOME != "TPF_CODFAM" .And. xNOME != "TPF_TIPMOD" .And. xNOME != "TPF_SERVIC" .And.;
         xNOME != "TPF_SEQREL"
         lAlFor := .t.
      EndIf
    
      If lAlFor
         For y := 1 To Len(arraySTF)
            If AllTrim(SUBSTR(arraySTF[y],3,7)) == AllTrim(SUBSTR(xNOME,4,7))
               xx := "STF->"+ arraySTF[Y]
               yy := "(cTRB)->"+ xNOME
               zz := "M->"  + xNOME
               dbSelectArea(xALIAS)
               RecLock(xALIAS,.F.)
               If &xx == &yy .And. &yy <> &zz
                  &xx.:= &zz.
               Elseif MV_PAR02 == 2 .And. &yy <> &zz
                  &xx.:= &zz.
               EndIf
               MsUnLock()
               Exit
            EndIf
         Next y
      EndIf
      dbSelectArea(cTRB)
   Next x

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} ATUTARST5
Atualiza as tarefas ST5
@author Deivys Joenck
@since 07/08/01
@version undefined
@param cFilOri, Filial origem da manutenção STF->TF_FILIAL
@type function
/*/
//---------------------------------------------------------------------
Function ATUTARST5( cFilOri )

	Local x := 0,i,nx
	Local nY := 0

	aCOLS  := aCLONE(aSVCOLS[1])
	For nx := 1 To Len(aCOLS)
		If aCOLS[nx][Len(aCOLS[nx])]
			If NGIFDBSEEK("ST5",STF->TF_CODBEM + STF->TF_SERVICO + STF->TF_SEQRELA+aCols[nx,nTAREFA],1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
				NGDELETAREG("ST5")
			EndIf
		Else
			If NGIFDBSEEK("TP5", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[nx][1],3,,IIf(Empty(cAliQrySTF), , (cAliQrySTF)->TF_FILIAL))
				If NGIFDBSEEK("ST5",STF->TF_CODBEM+STF->TF_SERVICO+STF->TF_SEQRELA+aCOLS[nx][1],1,,IIf(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
				   RecLock("ST5",.F.)
                  
                  For i := 1 To FCOUNT()
                     If FIELDNAME(i) <> "T5_FILIAL"  .And. FIELDNAME(i) <> "T5_CODBEM"  .And.;
                        FIELDNAME(i) <> "T5_SERVICO" .And. FIELDNAME(i) <> "T5_SEQRELA"
                        For x := 1 To Len(arrayTP5)
                           If AllTrim(SUBSTR(arrayTP5[x],4,7)) == AllTrim(SUBSTR(FIELDNAME(i),3,7))
                           v := "ST5->" + FIELDNAME(i)
                           y := "TP5->" + arrayTP5[x]
                           If MV_PAR02 == 2 .And. &v <> &y
                              &v. := &y.
                           EndIf
                           Exit
                           EndIf
                        Next x
                     EndIf
                  Next i
				   
               MsUnLock()
				
            Else
				   dbSelectArea("ST5")
				   
               RecLock("ST5",.T.)
                  
                  ST5->T5_FILIAL  := IIF(Empty(cAliQrySTF), xFILIAL("ST5", cFilOri), (cAliQrySTF)->TF_FILIAL)
                  ST5->T5_CODBEM  := STF->TF_CODBEM
                  ST5->T5_SERVICO := STF->TF_SERVICO
                  ST5->T5_SEQRELA := STF->TF_SEQRELA
                  ST5->T5_ATIVA   := '1'

                  For i := 1 To FCOUNT()
                     lAlforF := .f.
               
                     If FIELDNAME(i) <> "T5_FILIAL"  .And. FIELDNAME(i) <> "T5_CODBEM"  .And. FIELDNAME(I) <> "T5_TIPMOD" .AND.;
                        FIELDNAME(i) <> "T5_SERVICO" .And. FIELDNAME(i) <> "T5_SEQRELA"
                        lAlforF := .t.
                     EndIf

                     If lAlforF
                        For x := 1 To Len(arrayTP5)
                           If AllTrim(SUBSTR(arrayTP5[x],4,7)) == AllTrim(SUBSTR(FIELDNAME(i),3,7))
                           v := "ST5->" + FIELDNAME(i)
                           y := "TP5->" + arrayTP5[x]
                           &v. := &y.
                           Exit
                           EndIf
                        Next x
                     EndIf
                  Next i
				   
               MsUnLock()

               If ExistBlock( 'MNTA1800' )

                  ExecBlock( 'MNTA1800', .F., .F., { STF->TF_CODBEM, STF->TF_SERVICO, ST5->( RecNo() ) } )

               EndIf
				
            EndIf
			
         EndIf
		
      EndIf
	
   Next nx

	//Deleta os registros da tabela ST5 que foram retirados da manuntenção padrao
	For ny := 1 To Len(aTP5ACOL)
		If aSCAN(aCols,{|x| x[nTAREFA] == aTP5ACOL[ny,nTAREFA]}) == 0
			If NGIFDBSEEK("ST5",STF->TF_CODBEM + STF->TF_SERVICO + STF->TF_SEQRELA + aTP5ACOL[ny,nTAREFA],1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
				NGDELETAREG("ST5")
			EndIf
		EndIf
	Next ny

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} ATUDEPSTM
Altera as dependencias das manutencoes
@author Deivys Joenck
@since 08/08/01
@version undefined
@param cFilOri, Filial origem da manutenção STF->TF_FILIAL
@type function
/*/
//---------------------------------------------------------------------
Function ATUDEPSTM( cFilOri )

	Local i := 0,x,nx
	Local nY := 0

	aCOLS  := aCLONE(aSVCOLS[2])
	For nx := 1 To Len(aCOLS)
		If aCOLS[nx][Len(aCOLS[nx])]
			If NGIFDBSEEK("STM",STF->TF_CODBEM + STF->TF_SERVICO + STF->TF_SEQRELA + aCOLS[nx,nTARM] + aCOLS[nx,nDEPEND];
				,1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
				NGDELETAREG("STM")
			EndIf
		Else
			If NGIFDBSEEK("STM",STF->TF_CODBEM+STF->TF_SERVICO+STF->TF_SEQRELA+aCOLS[nx][1]+aCOLS[nx][nDEPEND],1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
				If NGIFDBSEEK("TPM", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[nx][1]+aCOLS[nx][nDEPEND],2,,IIF(Empty(cAliQrySTF), , (cAliQrySTF)->TF_FILIAL))
				Dbselectarea("STM")
				RecLock("STM",.F.)
				For i := 1 To FCOUNT()
					If FIELDNAME(i) <> "TM_FILIAL"  .And. FIELDNAME(i) <> "TM_CODBEM"  .And.;
						FIELDNAME(i) <> "TM_SERVICO" .And. FIELDNAME(i) <> "TM_SEQRELA"
						For x := 1 To Len(arrayTPM)
							If AllTrim(SUBSTR(arrayTPM[x],4,7)) == AllTrim(SUBSTR(FIELDNAME(i),3,7))
							v := "STM->" + FIELDNAME(i)
							y := "TPM->" + arrayTPM[x]
							If MV_PAR02 == 2 .And. &v <> &y
								&v. := &y.
							EndIf
							Exit
							EndIf
						Next x
					EndIf
				Next i
				MsUnLock()
				EndIf
			Else
				If NGIFDBSEEK("TPM", M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[nx][1]+aCOLS[nx][nDEPEND],2,,IIf(Empty(cAliQrySTF), , (cAliQrySTF)->TF_FILIAL))
				Dbselectarea("STM")
				RecLock("STM",.T.)
				STM->TM_FILIAL  := IIF(Empty(cAliQrySTF), xFilial("STM",cFilOri), (cAliQrySTF)->TF_FILIAL)
				STM->TM_CODBEM  := STF->TF_CODBEM
				STM->TM_SERVICO := STF->TF_SERVICO
				STM->TM_SEQRELA := STF->TF_SEQRELA

				For i:=1 To FCOUNT()
					If FIELDNAME(i) <> "TM_FILIAL"  .And. FIELDNAME(i) <> "TM_CODBEM"  .And.;
							FIELDNAME(i) <> "TM_SERVICO" .And. FIELDNAME(i) <> "TM_SEQRELA"
						For x:= 1 To Len(arrayTPM)
							If AllTrim(SUBSTR(arrayTPM[x],4,7)) == AllTrim(SUBSTR(FIELDNAME(i),3,7))
							v := "STM->" + FIELDNAME(i)
							y := "TPM->" + arrayTPM[x]
							&v. := &y.
							Exit
							EndIf
						Next x
					EndIf
				Next i
				MsUnLock()
				EndIf
			EndIf
		EndIf
		MsUnLock()
	Next nx

	//Deleta os registros da tabela TPM que foram retirados da manuntenção padrao
	For ny := 1 To Len(aTPMACOL)
		If aSCAN(aCols,{| x |x[nTARM] + x[nDEPEND] == aTPMACOL[ny,nTARM] + aTPMACOL[ny,nDEPEND]}) == 0
			If NGIFDBSEEK("STM",STF->TF_CODBEM + STF->TF_SERVICO + STF->TF_SEQRELA + aTPMACOL[ny,nTARM] + aTPMACOL[ny,nDEPEND];
				,1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
				NGDELETAREG("STM")
			EndIf
		EndIf
	Next ny

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} ATUINSSTG
Atualiza as tarefas STG
@author Deivys Joenck
@since 07/08/01
@version undefined
@param cFilOri, Filial origem da manutenção STF->TF_FILIAL
@type function
/*/
//---------------------------------------------------------------------
Function ATUINSSTG( cFilOri )

   Local x := 0,i,nx
   Local nY := 0

   aCOLS  := aCLONE(aSVCOLS[3])
   For nx := 1 To Len(aCOLS)
	   If aCOLS[nx][Len(aCOLS[nx])]
		   If NGIFDBSEEK("STG",STF->TF_CODBEM + STF->TF_SERVICO + STF->TF_SEQRELA + aCOLS[nx,nTAREFA] + aCOLS[nx,nTIPORE] + aCOLS[nx,nCODIGO];
			      ,1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
               NGDELETAREG("STG")
         EndIf
      Else
         dbSelectArea("STG")
			dbSetOrder(1)
         If dbSeek( xFilial("STG", cFilOri) + STF->TF_CODBEM+STF->TF_SERVICO+STF->TF_SEQRELA+aCOLS[nx][1]+aCOLS[nx][nTIPORE]+aCOLS[nx][nCODIGO] )
            dbSelectArea("TPG")
            dbSetOrder(3)
            If dbSeek( xFilial("TPG") + M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[nx][1]+aCOLS[nx][nTIPORE]+aCOLS[nx][nCODIGO] )
               Dbselectarea("STG")
               RecLock("STG",.F.)
               For i := 1 To FCOUNT()
                  If FIELDNAME(i) <> "TG_FILIAL"  .And. FIELDNAME(i) <> "TG_CODBEM"  .And.;
                     FIELDNAME(i) <> "TG_SERVICO" .And. FIELDNAME(i) <> "TG_SEQRELA"

                     For x := 1 To Len(arrayTPG)
                        If AllTrim(SUBSTR(arrayTPG[x],4,7)) == AllTrim(SUBSTR(FIELDNAME(i),3,7))
                           v := "STG->" + FIELDNAME(i)
                           y := "TPG->" + arrayTPG[x]
                           If MV_PAR02 == 2 .And. &v <> &y
                              &v. := &y.
                           EndIf
                           Exit
                        EndIf
                     Next x
                  EndIf
               Next i
               MsUnLock()
            EndIf
         Else
            dbSelectArea("TPG")
            dbSetOrder(3)
            If dbSeek( xFilial("TPG") + M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+aCOLS[nx][1]+aCOLS[nx][nTIPORE]+aCOLS[nx][nCODIGO] )

               Dbselectarea("STG")
               RecLock("STG",.T.)
               STG->TG_FILIAL  := IIF(Empty(cAliQrySTF), xFILIAL("STG", cFilOri), (cAliQrySTF)->TF_FILIAL)
               STG->TG_CODBEM  := STF->TF_CODBEM
               STG->TG_SERVICO := STF->TF_SERVICO
               STG->TG_SEQRELA := STF->TF_SEQRELA

               For i := 1 To FCOUNT()
                  If FIELDNAME(i) <> "TG_FILIAL"  .And. FIELDNAME(i) <> "TG_CODBEM"  .And.;
                     FIELDNAME(i) <> "TG_SERVICO" .And. FIELDNAME(i) <> "TG_SEQRELA"
                     For x := 1 To Len(arrayTPG)
                        If AllTrim(SUBSTR(arrayTPG[x],4,7)) == AllTrim(SUBSTR(FIELDNAME(i),3,7))
                           v := "STG->" + FIELDNAME(i)
                           y := "TPG->" + arrayTPG[x]
                           &v. := &y.
                           Exit
                        EndIf
                     Next x
                  EndIf
               Next i
               MsUnLock()
            EndIf
         EndIf
      EndIf
   Next nx

	//Deleta os registros da tabela TPG que foram retirados da manuntenção padrao
	For ny := 1 To Len(aTPGACOL)
		If aSCAN(aCols,{|x| x[nTARG] + x[nTIPORE] + x[nCODIGO] == aTPGACOL[ny,nTAREFA] + aTPGACOL[ny,nTIPORE] + aTPGACOL[ny,nCODIGO] }) == 0
			If NGIFDBSEEK("STG",STF->TF_CODBEM + STF->TF_SERVICO + STF->TF_SEQRELA + aTPGACOL[ny,nTAREFA] + aTPGACOL[ny,nTIPORE] + aTPGACOL[ny,nCODIGO];
					,1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
				NGDELETAREG("STG")
			EndIf
		EndIf
	Next ny

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} ATUETASTH
Altera as etapas das manutencoes

@author Deivys Joenck
@since 09/08/01
@version undefined
@param cFilOri, Filial origem da manutenção STF->TF_FILIAL
@type function
/*/
//---------------------------------------------------------------------
Static Function ATUETASTH( cFilOri )

   Local cKeyManut  := ""
   Local cKeyPadrao := ""
	Local cFilTp1    := xFilial("TP1", cFilOri )
   Local x          := 0
   Local i		     := 0
   Local nx         := 0

   Local nY := 0

   aCOLS := aCLONE(aSVCOLS[4])
   For nx := 1 To Len(aCOLS)

      cKeyManut := STF->TF_CODBEM + STF->TF_SERVICO + STF->TF_SEQRELA + aCOLS[nx][1] + aCOLS[nx][nETAPA]

      cKeyPadrao := M->TPF_CODFAM + M->TPF_TIPMOD + M->TPF_SERVIC + M->TPF_SEQREL +aCOLS[nx][1] + aCOLS[nx][nETAPA]

      If aCOLS[nx][Len(aCOLS[nx])] //Registro deletado
         If NGIFDBSEEK( "STH", cKeyManut, 1,, cFilOri )
               If NGIFDBSEEK( "TP1", cKeyManut, 1,, cFilOri )
                  While !Eof() .And. cFilTp1 == TP1->TP1_FILIAL .And.;
                           TP1->TP1_CODBEM == STH->TH_CODBEM  .And.;
                           TP1->TP1_SERVIC == STH->TH_SERVICO .And.;
                           TP1->TP1_SEQREL == STH->TH_SEQRELA .And.;
                           TP1->TP1_TAREFA == STH->TH_TAREFA  .And.;
                           TP1->TP1_ETAPA  == STH->TH_ETAPA
                     NGDELETAREG("TP1") //Deleta as opções da etapa
                     dbSkip()
                  End
               EndIf
               NGDELETAREG("STH") // Deleta a Etapa da manutenção
         EndIf
      ElseIf NGIFDBSEEK( "TPH", cKeyPadrao, 6 ) // só tem ação se tiver etapa padrão
         If NGIFDBSEEK( "STH", cKeyManut, 1,, cFilOri )
               dbSelectArea("STH")
               RecLock("STH",.F.)
               For i := 1 To FCOUNT()
                  If FIELDNAME(i) <> "TH_FILIAL"  .And. FIELDNAME(i) <> "TH_CODBEM"  .And.;
                     FIELDNAME(i) <> "TH_SERVICO" .And. FIELDNAME(i) <> "TH_SEQRELA"
                     For x := 1 To Len(arrayTPH)
                           If AllTrim(SUBSTR(arrayTPH[x],4,7)) == AllTrim(SUBSTR(FIELDNAME(i),3,7))
                              v := "STH->" + FIELDNAME(i)
                              y := "TPH->" + arrayTPH[x]
                              If MV_PAR02 == 2 .And. &v <> &y
                                 &v. := &y.
                              EndIf
                              Exit
                           EndIf
                     Next x
                  EndIf
               Next i
               MsUnLock()

               //-----------------------------------------------------
               // Inclui ou altera as opções da etapa conforme padrão
               //-----------------------------------------------------
               fGravaTp1( cKeyManut, cKeyPadrao, cFilOri )

         Else
               dbSelectArea("STH")
               RecLock("STH",.T.)
               STH->TH_FILIAL  := xFilial( "STH", cFilOri )
               STH->TH_CODBEM  := STF->TF_CODBEM
               STH->TH_SERVICO := STF->TF_SERVICO
               STH->TH_SEQRELA := STF->TF_SEQRELA

               For i := 1 To FCOUNT()
                  If FIELDNAME(i) <> "TH_FILIAL"  .And. FIELDNAME(i) <> "TH_CODBEM"  .And.;
                     FIELDNAME(i) <> "TH_SERVICO" .And. FIELDNAME(i) <> "TH_SEQRELA"
                     For x := 1 To Len(arrayTPH)
                           If AllTrim(SUBSTR(arrayTPH[x],4,7)) == AllTrim(SUBSTR(FIELDNAME(i),3,7))
                           v := "STH->" + FIELDNAME(i)
                           y := "TPH->" + arrayTPH[x]
                           &v. := &y.
                           Exit
                           EndIf
                     Next x
                  EndIf
               Next i
               MsUnLock()

               //-----------------------------------------------------
               // Inclui ou altera as opções da etapa conforme padrão
               //-----------------------------------------------------
               fGravaTp1( cKeyManut, cKeyPadrao, cFilOri )

         EndIf
      EndIf
   Next nx

    //Deleta os registros da tabela TP1 que foram retirados da manuntenção padrao
	For ny := 1 To Len(aTPHACOL)
		If aSCAN(aCols,{|x| x[nTARH] + x[nETAPA] == aTPHACOL[ny,nTARH] + aTPHACOL[ny,nETAPA] }) == 0
			If NGIFDBSEEK("STH",STF->TF_CODBEM + STF->TF_SERVICO + STF->TF_SEQRELA + aTPHACOL[ny,nTAREFA] + aTPHACOL[ny,nETAPA];
					,1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
				NGDELETAREG("STH")
			EndIf
		EndIf
	Next ny

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} ULTSEQTPF
Retorna a ultima sequencia digitada
@author Inacio Luiz Kolling
@since 01/08/97
@version undefined
@param nRECNO, numeric
@type function
/*/
//---------------------------------------------------------------------
Function ULTSEQTPF()

   Local aAreaTPF := TPF->( FWGetArea() )
   Local lRet     := .T.
   Local cFACA    := xFILIAL("TPF")+M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC
   Local cSEQ     := Space(3), lPrimRe := .T.

   If INCLUI
      
      NGIFDBSEEK( 'TPF', M->TPF_CODFAM + M->TPF_TIPMOD + M->TPF_SERVIC, 4 )
      
      cSEQ := TPF->TPF_SEQREL

      While !EoF() .And. ( cFACA == TPF->TPF_FILIAL + TPF->TPF_CODFAM + TPF->TPF_TIPMOD + TPF->TPF_SERVIC )

         If Val(TPF->TPF_SEQREL) > 0
            If Val(TPF->TPF_SEQREL) > Val(cSEQ)
               cSEQ := TPF->TPF_SEQREL
            EndIf
         Else
            If isDigit(Substr(TPF->TPF_SEQREL,1,1))
            Else
               cSEQ    := If(lPrimRe,TPF->TPF_SEQREL,If(TPF->TPF_SEQREL > cSEQ,TPF->TPF_SEQREL,cSEQ))
               lPrimRe := .F.
            EndIf
         EndIf

         Dbskip()

      End

      If Empty( cSeq )

			M->TPF_SEQREL := '001'

		Else

			M->TPF_SEQREL := PadL( Soma1Old( cSeq ), 3 )

		EndIf

      If ( lRet := M->TPF_PERIOD != 'M' .Or.;
         MNTA120Mul( M->TPF_SEQREL, .T. ) )

         //Ao preencher campos Familia, Tipo Modelo e Servico
         //Sera copiado TP2 da manutencao em copia
         COPY180TP2()

      EndIf
      
   EndIf

   FWRestArea( aAreaTPF )

   FWFreeArray( aAreaTPF )

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} COPY180TP2
Faz copia da tabela TP2 na copia da manutencao
@author Vitor Emanuel Batista
@since 29/06/2009
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Static Function COPY180TP2()

   Local nX, nY
   Local nP2SEQ, nP2SER, nP2MOD, nP2FAM, nP2OPC, nP2TAR, nP2ETA

   lCopia := If(Type("lCopia") = "L",lCopia,.f.)

   If lCopia
      aCopyTP2 := {}
      If !Empty(M->TPF_CODFAM) .And. !Empty(M->TPF_SERVIC) .And. !Empty( M->TPF_TIPMOD )
         RestArea(aTPFArea)

         dbSelectArea("TP2")
    		dbSetOrder( 3 )
         nP2FAM := FieldPos('TP2_CODFAM')
         nP2MOD := FieldPos('TP2_TIPMOD')
         nP2SER := FieldPos('TP2_SERVIC')
         nP2SEQ := FieldPos('TP2_SEQREL')
         nP2TAR := FieldPos('TP2_TAREFA')
         nP2ETA := FieldPos('TP2_ETAPA')
         nP2OPC := FieldPos('TP2_OPCAO')

         cSeek := TPF->TPF_CODFAM+TPF->TPF_TIPMOD+TPF->TPF_SERVIC+TPF->TPF_SEQREL

         dbSeek(xFilial("TP2")+cSeek)
         While !Eof() .And. cSeek == TP2->TP2_CODFAM+TP2->TP2_TIPMOD+TP2->TP2_SERVIC+TP2->TP2_SEQREL
            aAdd(aCopyTP2,{})
            For nX := 1 to FCOUNT()
               aAdd(aCopyTP2[Len(aCopyTP2)],&("TP2->"+FieldName(nX)))
            Next nX
            dbSkip()
         End

         cSeek := M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL
         dbSeek(xFilial("TP2")+cSeek)
         While !Eof() .And. xFilial("TP2") == TP2->TP2_FILIAL .And. ;
            cSeek == TP2->TP2_CODFAM+TP2->TP2_TIPMOD+TP2->TP2_SERVIC+TP2->TP2_SEQREL
            NGDELETAREG("TP2")
            dbSkip()
         End
         For nX := 1 to Len(aCopyTP2)
            If !dbSeek(xFilial("TP2")+cSeek+aCopyTP2[nX][nP2TAR]+aCopyTP2[nX][nP2ETA]+aCopyTP2[nX][nP2OPC])
               RecLock("TP2",.t.)
               For nY := 1 to Len(aCopyTP2[nX])
                  FieldPut(nY,aCopyTP2[nX][nY])
               Next nY
               TP2->TP2_CODFAM := M->TPF_CODFAM
               TP2->TP2_SERVIC := M->TPF_SERVIC
               TP2->TP2_SEQREL := M->TPF_SEQREL
               TP2->TP2_TIPMOD := M->TPF_TIPMOD
               aCopyTP2[nX][nP2MOD] := M->TPF_TIPMOD
               aCopyTP2[nX][nP2FAM] := M->TPF_CODFAM
               aCopyTP2[nX][nP2SER] := M->TPF_SERVIC
               aCopyTP2[nX][nP2SEQ] := M->TPF_SEQREL
               MsUnLock()
            EndIf
         Next nX
      EndIf
   EndIf

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180_F3
Altera a Consulta conforme o tipo de insumo
@author Paulo Pego
@since XX/XX/XXXX
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function NG180_F3()

    Local cAliF3 := "ST1"
    M->TPG_TIPORE := aCOLS[n][nTIPORE]
    aTROCAF3      := {}
    If M->TPG_TIPORE == "E"
       cAliF3 := "ST0"
    Elseif M->TPG_TIPORE == "P"
       cAliF3 := "SB1"
    Elseif M->TPG_TIPORE == "T"
       cAliF3 := "SA2"
    Elseif M->TPG_TIPORE == "F"
       cAliF3 := "SH4"
    EndIf
    aAdd(aTROCAF3,{"TPG_CODIGO",cAliF3})

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} NG190CHECK
Critica se o detalhe digitado esta OK
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@param cCOD, characters
@param lVerTar, logical
@type function
/*/
//---------------------------------------------------------------------
Function NG190CHECK(cCOD,lVerTar)

   Local RET   := .T.,QTD := 0, QTD2 := 0, nTARM := GDFIELDPOS("TPM_TAREFA")
   Local nDEPE := GDFIELDPOS("TPM_DEPEND"),cTAR := aCOLS[n][nTARM],cSEQX := M->TPF_SEQREL

   Default lVerTar := .F.

   If !NGSEEKCPO("TP5",cFAM180+cTIP180+cSER180+cSEQX+cCOD,3)
      RET := .F.
   EndIf

   If Empty(cTAR) .And. lVerTar //Verificar apenas ao validar a Tarefa
      If cCOD == aCols[n][nDEPE]
         MsgInfo(STR0040+" "+Alltrim(cTAR)+" "+STR0041 + ", " +STR0039+".",STR0029) //"A tarefa"#informe outra dependência"#"NÃO CONFORMIDADE"
         RET := .F.
      EndIf
   EndIf

   If RET
      aEVAL(aCOLS,{|x| If((x[nTARM] == cTAR .And. cCOD == x[nDEPE]) .And. !aTail(x),QTD++,NIL)})
      aEVAL(aCOLS,{|x| If((x[nTARM] == cCOD .And. cTAR == x[nDEPE]) .And. !aTail(x),QTD2++,NIL)})
      If QTD > 0
         HELP(" ",1,"JAGRAVADO",,STR0042+" "+cCOD+" "+STR0043+" "+cTAR+" "+STR0044,5,1)
         RET := .F.
      EndIf
   EndIf

   If RET .And. QTD2 > 0
      MsgInfo(STR0037+" "+Alltrim(cCOD)+" "+ STR0038+" "+ Alltrim(cTAR)+","+Chr(13); //"A dependência informada" #"já possui dependência com a tarefa"
            +STR0039+".",STR0029) //"informe outra dependência." # "NÃO CONFORMIDADE"
      RET := .F.
   EndIf

   If RET .And. cTar == cCOD
      MsgInfo(STR0040+" "+Alltrim(cTAR)+" "+STR0041 + ", " +STR0039+".",STR0029) //"A tarefa"#informe outra dependência"#"NÃO CONFORMIDADE"
      RET := .F.
   EndIf

   If RET
      aCOLS[n][nDEPE+1] := SubStr(NGSEEK("TP5",cFAM180+cTIP180+cSER180+cSEQX+cCod,3,"TP5_DESCRI"),1,20)
   EndIf
  

Return RET

//---------------------------------------------------------------------
/*/{Protheus.doc} DELTP2OP
Deleta as opcoes da etapa
@author Inacio Luiz Kolling
@since XX/XX/XXXX
@version undefined
@param vTAREFA
@param vETAPA
@type function
/*/
//---------------------------------------------------------------------
Function DELTP2OP(vTAREFA,vETAPA)
   
   Local lWhTP2 := .t.

   NGIFDBSEEK("TP2",M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL+vTAREFA+vETAPA,3)
   lWhTP2 := &("TP2->TP2_TIPMOD == M->TPF_TIPMOD")

   While !Eof() .And. TP2->TP2_FILIAL == xFILIAL("TP2") .And.;
      TP2->TP2_CODFAM == M->TPF_CODFAM .AND. TP2->TP2_SERVIC == M->TPF_SERVIC .And.;
      TP2->TP2_SEQREL == M->TPF_SEQREL .And. TP2->TP2_TAREFA == vTAREFA .And.;
      TP2->TP2_ETAPA  == vETAPA .And. lWhTP2
      NGDELETAREG("TP2")
      dbSkip()
   End

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} NG200CHECK
Critica se o detalhe digitado esta OK
@author Deivys Joenck
@since 30/07/01
@version undefined
@param cCOD, characters
@type function
/*/
//---------------------------------------------------------------------
Function NG200CHECK(cCOD)

   Local RET     := .T.
   Local QTD     := 0
   Local cTAREFA := oGet04:aCols[oGet04:nAt,nTARH]
   Local cETAPA  := M->TPH_ETAPA

   If Empty( oGet04:aCols[oGet04:nAt,nTARH]) .And. !Empty( M->TPH_ETAPA ) .And.;
      M->TPF_PERIOD != 'M'

      oGet04:aCols[oGet04:nAt,nTARH] := '0' + REPLICATE( ' ', Len( TP5->TP5_TAREFA ) - 1 )
      oGet04:oBrowse:Refresh()

      cTAREFA := oGet04:aCols[oGet04:nAt,nTARH]

      If !NGIFDBSEEK( 'TP5', M->TPF_CODFAM + M->TPF_TIPMOD + M->TPF_SERVIC + M->TPF_SEQREL + cTAREFA, 3 )
         
         RecLock( 'TP5', .T. )

            TP5->TP5_FILIAL := IIF(Empty(cAliQrySTF), xFilial("TP5"), (cAliQrySTF)->TF_FILIAL)
            TP5->TP5_CODFAM := M->TPF_CODFAM
            TP5->TP5_TIPMOD := M->TPF_TIPMOD
            TP5->TP5_SERVIC := M->TPF_SERVIC
            TP5->TP5_SEQREL := M->TPF_SEQREL
            TP5->TP5_TAREFA := "0"
            TP5->TP5_DESCRI := STR0011 //"SEM ESPECIFICAO DE TAREFA"

         MsUnLock()

         lUpsertTP5 := .T.

      EndIf

   EndIf

   If !ExistCPO( 'TPA', cCOD, 1 )
      
      RET := .F.
      Return .F.
   
   EndIf
   
   If !Empty( cTAREFA )

      aEval( oGet04:aCols, { |x| IIf( !LinDelet(x) .And. x[nTARH] == cTAREFA .And. x[nETAPA] == cETAPA, QTD++, NIL ) } )
      
      If QTD > 0 .And. !Empty( oGet04:aCols[oGet04:nAt,nTARH] )
         
         HELP(" ",1,"JAGRAVADO",,STR0045+" "+cETAPA+" "+STR0043+" "+cTAREFA+" "+STR0044,5,1)
         Return .f.
      
      EndIf

   EndIf
   
   If NGIFDBSEEK( 'TPA', cCOD, 1 )

      If nNOMETA > 0

        oGet04:aCols[oGet04:nAt,nNOMETA] := TPA->TPA_DESCRI
         
      EndIf

      oGet04:aCols[oGet04:nAt,nOPCOES] := TPA->TPA_OPCOES

      lREFRESH := .T.
      
   EndIf

Return RET

//----------------------------------------------------------------
/*/{Protheus.doc} fTudoOk
Consistência final
@type function

@author Deivys Joenck
@since 30/07/2001

@param nControl, integer, Indica qual folder será carregado.
@return boolean, Indica se o cadastros foi consistido com êxito.
/*/
//----------------------------------------------------------------
Static Function fTudoOk( nControl )

	Local _lEmpty,ng2,ng3,ng4
   Local lRet     := .T.
   Local nInd1    := 0
   Local nTareMan := GDFieldPos( 'TP5_TAREFA', oGet01:aHeader )
   Local nDescTar := GDFieldPos( 'TP5_DESCRI', oGet01:aHeader )
   Local nTeenMan := GDFieldPos( 'TP5_TEENMA', oGet01:aHeader )
   Local nUnenMan := GDFieldPos( 'TP5_UNENMA', oGet01:aHeader )
   Local nInenMan := GDFieldPos( 'TP5_INENMA', oGet01:aHeader )

	If M->TPF_TIPACO == 'T' .And.;
      M->TPF_UNENMA == 'H' .And. M->TPF_TEENMA > 23 
			
         ShowHelpDlg( STR0030,;
            { STR0059 }, 1,; // //Se o tipo de acompanhamento for igual à 'Tempo' e Unidade for controlada por 'Hora'.
            { STR0060 }, 1 ) // Se o tempo da manutenção for maior que 23 horas.
			
         lRet := .F.
		
	EndIf

   If !MNT120CAL( M->TPF_CALENDA )
		Return .F.
	EndIf

	/*-------------------------+
   | Valid. Tarefas da Manut. |
   +-------------------------*/
   If lRet
	
      ENTRAGET( 1 )

      _lEmpty := .F.

      If Len( oGet01:aCols ) == 1 .And. !aTail( oGet01:aCols[1] )

         If Empty( oGet01:aCols[1,nTAREFA] ) .And.;
            Empty( oGet01:aCols[1,nDESCRI] )

            _lEmpty := .T.

         EndIf

      EndIf

      /*------------------------------------------------------+
      | Valid. preenchimento dos campos de periodicidade TP5. |
      +------------------------------------------------------*/
      If M->TPF_PERIOD == 'M'

         If !_lEmpty

            For nInd1 := 1 To Len( oGet01:aCols )

               If !aTail( oGet01:aCols[nInd1] )

                  If nDescTar > 0
					
                     If Empty( oGet01:aCols[nInd1,nTareMan] ) .Or.;
                        Empty( oGet01:aCols[nInd1,nDescTar] )
                        
                        Help( '', 1, 'OBRIGAT' )
                        
                        lRet := .F.

                        NGSAIGET( 1, oGet01 )

                        ENTRAGET( nControl )

                        Exit

                     EndIf

				      EndIf

                  If lRet

                     If !( lRet := fVldPeriod( oGet01:aCols[nInd1,nTeenMan],;
                        oGet01:aCols[nInd1,nUnenMan], oGet01:aCols[nInd1,nInenMan] ) )

                        NGSAIGET( 1, oGet01 )

                        ENTRAGET( nControl )

                        Exit

                     EndIf

                  EndIf

               EndIf

            Next nInd1

         Else

            Help( '', 1, 'MANUTMULT' )

            NGSAIGET( 1, oGet01 )

            ENTRAGET( nControl )
                     
            lRet := .F.

         EndIf

      Else

         If !_lEmpty
            
            For nInd1 := 1 To Len( oGet01:aCols )
              
               If !aTail( oGet01:aCols[nInd1] )

                  If Empty( oGet01:aCols[nInd1,nTAREFA] ) .Or.;
                     Empty( oGet01:aCols[nInd1,nDESCRI] )

                     HELP( '', 1, 'OBRIGAT', , FWX3Titulo( 'TP5_DESCRI' ) + ' ' +;
                        FWX3Titulo( 'TP5_TAREFA' ), 5, 1 )

                     NGSAIGET( 1, oGet01 )

                     ENTRAGET( nControl )
                     
                     lRet := .F.

                  EndIf

               EndIf

            Next nInd1

         EndIf
      
      EndIf

      If lRet .And.;
         !VldALLGet3( .T. )
		   
         lRet := .F.
	   
      EndIf

      If lRet .And.;
         !VldALLGet4()

		   lRet := .F.

	   EndIf
	
      NGSAIGET( 1, oGet01 )

   EndIf

   /*-------------------+
   | Valid. Dependência |
   +-------------------*/
   If lRet

      //VALIDACAO DA DEPENDENCIA
      ENTRAGET(2)

      _lEmpty := .f.
      If Len(aCols) == 1 .And. !aTail(aCOLS[1])
         If Empty(aCols[1][nTAREFA]) .And. Empty(aCols[1][nDEPEND])
            _lEmpty := .t.
         EndIf
      EndIf

      nSobrep := GDFIELDPOS("TPM_SOBREP")
      nTarm   := GDFIELDPOS("TPM_TAREFA")
      If nTarm > 0 .And. nDepend > 0 .And. nSobrep >0
         If !_lEmpty
            For ng2:=1 To Len(aCols)
               If !aTail(aCOLS[ng2])
               If !aCols[ng2][Len(aCols[ng2])]
                  If Empty(aCOLS[ng2][nTarm]) .Or. Empty(aCols[ng2][nDEPEND]) // .Or. Empty(aCols[ng2][nSobrep])
                     HELP(" ",1,"OBRIGAT")
                     NGSAIGET( 2, oGet02 )
                     ENTRAGET(nControl)
                     Return .f.
                  EndIf
               EndIf
            EndIf
            Next
         EndIf
      EndIf
      
      NGSAIGET( 2, oGet02 )

   EndIf

   /*-------------------------+
   | Valid. Insumos da Manut. |
   +-------------------------*/
   If lRet

      ENTRAGET(3)

      _lEmpty := .f.
      If Len(aCols) == 1 .And. !aTail(aCOLS[1])
         If Empty(aCols[1][nTAREFA]) .And. Empty(aCols[1][nDESCRI]) .And.;
            Empty(aCOLS[1][nCODIGO]) .And. Empty(aCOLS[1][nQUANTI]) .And. lOK
            _lEmpty := .t.
         EndIf
      EndIf
      If !_lEmpty
         cHELPT := Space(10)
         For ng3:=1 To Len(aCols)

            If !aTail(aCols[ng3])

               If !aCOLS[ng3][Len(aCOLS[ng3])]

                  If Empty(aCOLS[ng3][nTARG])   .Or. Empty(aCOLS[ng3][nTIPORE]) .Or.;
                  Empty(aCOLS[ng3][nCODIGO]) .Or. Empty(aCOLS[ng3][nQUANTI])
                  cHELPT := "OBRIGAT"
                  EndIf

                  If Empty(cHELPT)
                     If aCOLS[ng3][nTIPORE] $ "F/E" .And. Empty(aCOLS[ng3][nQUANRE])
                        cHELPT := "QUANTRECUR"
                     EndIf
                  EndIf

                  If Empty(cHELPT)
                     If aCOLS[ng3][nTIPORE] == "P" .And. Empty(aCOLS[ng3][nDESTIN])
                        cHELPT := "DESTINO"
                     EndIf
                  EndIf

                  If Empty(cHELPT)
                     If aCOLS[ng3][nTIPORE] != "P" .And. !Empty(aCOLS[ng3][nDESTIN])
                        cHELPT := "NAODESTINO"
                     EndIf
                  EndIf

                  If Empty(cHELPT)
                     If !Empty(aCOLS[ng3][nQTDGAR]) .And. Empty(aCOLS[ng3][nUNIGAR])
                        cHELPT := "OBRIGAT"
                     EndIf
                  EndIf

                  If Empty(cHELPT)
                     If Empty(aCOLS[ng3][nQTDGAR]) .And. !Empty(aCOLS[ng3][nUNIGAR])
                        cHELPT := "OBRIGAT"
                     EndIf
                  EndIf

                  If !Empty(cHELPT)
                     HELP(" ",1,cHELPT)
                     NGSAIGET( 3, oGet03 )
                     ENTRAGET(nControl)
                     Return .F.
                  EndIf

                  If ExistBlock( 'MNTA180K' )

                     lRet := ExecBlock( 'MNTA180K', .F., .F., { aCols, ng3, aHeader } )

                     If !lRet

                        Return lRet

                     EndIf

                  EndIf

               EndIf

            EndIf

         Next

      EndIf
      
      NGSAIGET( 3, oGet03 )

   EndIf

	/*------------------------+
   | Valid. Etapas da Manut. |
   +------------------------*/
   If lRet

      _lEmpty := .f.

      ENTRAGET(4)
      If Empty(aCOLS[1][1]) .And. lOK
         _lEmpty := .t.
      EndIf

      If !_lEmpty
         For ng4:=1 To Len(aCols)
            If !aCOLS[ng4][Len(aCOLS[ng4])]
               If Empty(aCOLS[ng4][nTARH]) .Or. Empty(aCOLS[ng4][nETAPA]) .Or.;
                  Empty(aCOLS[ng4][nOPCOES])
                  HELP(" ",1,"OBRIGAT")
                  NGSAIGET( 4, oGet04 )
                  ENTRAGET(nControl)
                  Return .F.
               EndIf
            EndIf
         Next
      EndIf

      NGSAIGET( 4, oGet04 )
   
   EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} NG180ENCOK
Consistência da enchoice
@author Deivys Joenck
@since 30/07/01
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function NG180ENCOK()

   Local lRet := .T.
   
   NGENTRAENC("TPF")
   NGDBAREAORDE("SX3",2)
   If If(dbSeek("TPF_TEPAAN"),X3USO(Posicione("SX3",2,"TPF_TEPAAN","X3_USADO")),.F.) .And.;
      If(dbSeek("TPF_UNPAAN"),X3USO(Posicione("SX3",2,"TPF_UNPAAN","X3_USADO")),.F.)
      If !Empty(M->TPF_TEPAAN) .And. Empty(M->TPF_UNPAAN)
         HELP(" ",1,"UNPAANT")
         Return .F.
      EndIf
      If Empty(M->TPF_TEPAAN) .And. !Empty(M->TPF_UNPAAN)
         HELP(" ",1,"TEPAANT")
         Return .F.
      EndIf
   EndIf

   If If(dbSeek("TPF_TEPADE"),X3USO(Posicione("SX3",2,"TPF_TEPADE","X3_USADO")),.F.) .And.;
      If(dbSeek("TPF_UNPADE"),X3USO(Posicione("SX3",2,"TPF_UNPADE","X3_USADO")),.F.)
      If !Empty(M->TPF_TEPADE) .And. Empty(M->TPF_UNPADE)
         HELP(" ",1,"UNPADEP")
         Return .F.
      EndIf
      If Empty(M->TPF_TEPADE) .And. !Empty(M->TPF_UNPADE)
         HELP(" ",1,"TEPADEP")
         Return .F.
      EndIf
   EndIf
   
   /*-----------------------------------------------------------------+
   | Valid. preenchimento de campos obrigatórios conforme TPF_PERIOD. |
   +-----------------------------------------------------------------*/
   If M->TPF_PERIOD == "E"

   	lRet := .T.
      
   Else

      If M->TPF_PERIOD != 'M'

         /*-------------------------------------+
         | Valid. preenchimento dos campos TPF. |
         +-------------------------------------*/
         lRet := fVldPeriod( M->TPF_TEENMA, M->TPF_UNENMA,;
            M->TPF_INENMA )

      EndIf

   EndIf

   If lRet

      NGSAIENC( 'TPF' )

   EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} ATUTAR2ST5
Atualiza as tarefas ST5
@author Inacio Luiz Kolling
@since 13/05/2004
@version undefined
@param cFilOri, Filial origem da manutenção STF->TF_FILIAL
@type function
/*/
//---------------------------------------------------------------------
Function ATUTAR2ST5( cFilOri )

	local nx := 0

    aCOLS  := aCLONE(aSVCOLS[1])
    For nx := 1 To Len(aCOLS)
       If aCOLS[nx][Len(aCOLS[nx])]
			If NGIFDBSEEK("ST5",STF->TF_CODBEM+STF->TF_SERVICO+STF->TF_SEQRELA+aCOLS[nx][1],1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
             NGDELETAREG("ST5")
          EndIf
       EndIf
    Next nx

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} ATUDEP2STM
Altera as dependencias das manutencoes
@author Inacio Luiz Kolling
@since 13/05/2004
@version undefined
@param cFilOri, Filial origem da manutenção STF->TF_FILIAL
@type function
/*/
//---------------------------------------------------------------------
Function ATUDEP2STM( cFilOri )

    Local nx := 0

    aCOLS  := aCLONE(aSVCOLS[2])
    For nx := 1 To Len(aCOLS)
       If aCOLS[nx][Len(aCOLS[nx])]
			If NGIFDBSEEK("STM",STF->TF_CODBEM+STF->TF_SERVICO+STF->TF_SEQRELA+aCOLS[nx][1]+aCOLS[nx][nDEPEND],1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
             NGDELETAREG("STM")
          EndIf
       EndIf
    Next nx

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} ATUINS2STG
Atualiza as tarefas STG
@author Inacio Luiz Kolling
@since 13/05/2004
@version undefined
@param cFilOri, Filial origem da manutenção STF->TF_FILIAL
@type function
/*/
//---------------------------------------------------------------------
Function ATUINS2STG( cFilOri )

    Local nx := 0

    aCOLS  := aCLONE(aSVCOLS[3])
    For nx := 1 To Len(aCOLS)
       If aCOLS[nx][Len(aCOLS[nx])]
			If NGIFDBSEEK("STG",STF->TF_CODBEM+STF->TF_SERVICO+STF->TF_SEQRELA+aCOLS[nx][1]+aCOLS[nx][nTIPORE]+aCOLS[nx][nCODIGO],1,,IIF(Empty(cAliQrySTF), cFilOri , (cAliQrySTF)->TF_FILIAL))
             NGDELETAREG("STG")
          EndIf
       EndIf
    Next nx

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT180QDO
Monta a tela de visualizacao ou relacionamento do documento
@author Elisangela Costa
@since 14/10/04
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNT180QDO()

    Local oDlgQdo,oRadio, nRadio := 1,lRet := .T.,lGrava

    If oFolder:nOption <> 1 .And. oFolder:nOption <> 2 .And. oFolder:nOption <> 5
       MsgInfo(STR0028,STR0029) //"Relaciona apenas documentos da manutencao,tarefa e etapa."#"NAO CONFORMIDADE"
       Return .T.
    EndIf

    Define MsDialog oDlgQdo From 03.5,6 To 150,320 Title STR0030 Pixel //"Atencao"
    Define FONT oBold NAME "Courier New" SIZE 0, -13 BOLD
    @ 0, 0 BITMAP oBmp RESNAME "PROJETOAP" oF oDlgQdo SIZE 35,250 NOBORDER WHEN .F. PIXEL

    @ 05,040 Say OemToAnsi(STR0031) Size 117,7 Of oDlgQdo Pixel Font oBold  //"O que deseja fazer ?"

    @ 20,048 Radio oRadio Var nRadio Items STR0032,STR0033,STR0034 3d Size 105,10 Of oDlgQdo Pixel  //"Relacionar um documento"#"Visualizar documento relacionado"#"Apagar documento relacionado"

    Define sButton From 055,090 Type 1 Enable Of oDlgQdo Action (lGrava := .T.,oDlgQdo:End())
    Define sButton From 055,120 Type 2 Enable Of oDlgQdo Action (lGrava := .F.,oDlgQdo:End())

    Activate MsDialog oDlgQdo Centered

    If !lGrava
       lRet := .F.
    Else
       If nRadio == 1
          If !MNT180RQDO()
     	  	 lRet := .F.
          EndIf
       ElseIf nRadio == 2
          If !MNT180VQDO()
       	     lRet := .F.
          EndIf
       Else
          If oFolder:nOption = 1
             M->TPF_DOCTO  := "  "
             M->TPF_DOCFIL := "  "
          ElseIf oFolder:nOption = 2
             aCOLS[n][nDOCTOTP5]  := "  "
             aCOLS[n][nDOCFILTP5] := "  "
          ElseIf oFolder:nOption = 5
        	 aCOLS[n][nDOCTOTPH]  := "  "
             aCOLS[n][nDOCFILTPH] := "  "
          EndIf
       EndIf
    EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT180RQDO
Relaciona um procedimento a um documento QDO
@author Elisangela Costa
@since 14/10/04
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNT180RQDO()

    Local lRet := .F.
    lRet := ConPad1( , , , "QDH",,,.f.)
    If lRet
       If oFolder:nOption = 1
      	  M->TPF_DOCTO  := QDH->QDH_DOCTO
    	  M->TPF_DOCFIL := QDH->QDH_FILIAL
       ElseIf oFolder:nOption = 2
          aCOLS[n][nDOCTOTP5]  := QDH->QDH_DOCTO
          aCOLS[n][nDOCFILTP5] := QDH->QDH_FILIAL
       ElseIf oFolder:nOption = 5
      	  aCOLS[n][nDOCTOTPH]  := QDH->QDH_DOCTO
          aCOLS[n][nDOCFILTPH] := QDH->QDH_FILIAL
       EndIf
    EndIf

Return .F.
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT180VQDO
Visualiza um documento QDO
@author Elisangela Costa
@since 14/10/04
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNT180VQDO()

    Local _lRet := .F.

    If oFolder:nOption = 1
       If !Empty(M->TPF_DOCTO)
          If QDOVIEW( , M->TPF_DOCTO) //Visualiza documento Word...
    	     _lRet := .T.
          EndIf
       Else
          MsgInfo(STR0035,STR0029) //"Nao existe documento associado a esta demanda."#"NAO CONFORMIDADE"
       EndIf
    ElseIf  oFolder:nOption = 2
       If !Empty(aCOLS[n][nDOCTOTP5])
          If QDOVIEW( , aCOLS[n][nDOCTOTP5]) //Visualiza documento Word...
    	     _lRet := .T.
          EndIf
       Else
          MsgInfo(STR0035,STR0029) //"Nao existe documento associado a esta demanda."#"NAO CONFORMIDADE"
       EndIf
    ElseIf oFolder:nOption = 5
       If !Empty(aCOLS[n][nDOCTOTPH])
          If QDOVIEW( , aCOLS[n][nDOCTOTPH]) //Visualiza documento Word...
    	     _lRet := .T.
          EndIf
       Else
          MsgInfo(STR0035,STR0029) //"Nao existe documento associado a esta demanda."#"NAO CONFORMIDADE"
       EndIf
    EndIf

Return _lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA180SEQ
Atualiza dos campos da manutencao e detalhes...
@author Inacio Luiz Kolling
@since 18/07/2006
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Static Function MNTA180SEQ()

   Local kx := 0
   Local cAliasQry := GetNextAlias()
   Local cExpFrt   := "% " + NGMODCOMP("ST9","STF")
   Local cFilComp  := ""
	Local cTMCondic := "%%"
      
   cTMCondic := "%"
   
   If Trim( M->TPF_TIPMOD ) != '*'

      cTMCondic += " AND T9_TIPMOD = " + ValToSql( M->TPF_TIPMOD )

   Else

      cTMCondic += " AND NOT EXISTS ( SELECT 1"
      cTMCondic +=   " FROM " + RetSqlName('TPF') + " TPFESP"
      cTMCondic +=   " WHERE TPFESP.TPF_CODFAM = " + ValToSql( M->TPF_CODFAM )
      cTMCondic +=     " AND TPFESP.TPF_TIPMOD = T9_TIPMOD"
      cTMCondic +=     " AND TPFESP.TPF_SERVIC = " + ValToSql( M->TPF_SERVIC )
      cTMCondic +=     " AND TPFESP.TPF_SEQREL = " + ValToSql( M->TPF_SEQREL )
      cTMCondic +=     " AND TPFESP.TPF_FILIAL = " + ValToSql( xFilial('TPF') )
      cTMCondic +=     " AND TPFESP.D_E_L_E_T_ = ' ' ) "

   EndIf

   cTMCondic += "%"

	BeginSQL Alias cAliasQry

		SELECT COUNT( TF_CODBEM ) TOTALMANUT
        FROM %table:STF% STF

        JOIN %table:ST9% ST9
            ON  T9_FILIAL  = %xFilial:ST9%
            AND ST9.T9_CODBEM  = STF.TF_CODBEM
            AND ST9.%NotDel%

        WHERE   STF.TF_FILIAL  = %xFilial:STF%
            AND ST9.T9_CODFAMI = %Exp:M->TPF_CODFAM%
            AND STF.TF_SERVICO = %Exp:M->TPF_SERVIC%
            AND STF.TF_SEQREPA = %Exp:M->TPF_SEQREL%
            AND STF.TF_PADRAO  = 'S'
            AND STF.%NotDel%
            %exp:cTMCondic%

	EndSQL

	EXPADRAO := (cAliasQry)->TOTALMANUT > 0

	(cAliasQry)->( dbCloseArea() )

   // SE TEM MANUTENCAO PADRAO VERIFICA SE HOUVE MUDANCAS NOS CAMPOS
   If EXPADRAO
      dbSelectArea(cTRB)
      For kx := 1 To FCOUNT()
         xNOME := AllTrim(FIELDNAME(kx))
         lExFor := .f.
         
         If xNOME != "TPF_FILIAL" .And. xNOME != "TPF_CODFAM" .AND. xNOME != "TPF_TIPMOD" .And. xNOME != "TPF_SERVIC" .And.;
            xNOME != "TPF_SEQREL"
            lExFor := .t.
         EndIf
         
         If lExFor
               xx  := &("M->"  +xNOME)
               yy  := &("(cTRB)->"+xNOME)
               If !(xx == yy)
                  ALPADRAO := .T.
                  Exit
               EndIf
         EndIf
      Next kx
   EndIf

   If EXPADRAO
      
      If ALPADRAO .Or. lUpsertTP5 .Or. lUpsertTPM .Or. lUpsertTPG .Or. lUpsertTPH
            
         If PERGUNTE("MNT170",.T.)
            
            If MV_PAR01 == 2
               
               cFilComp := "% " + NGMODCOMP("TPF","STF")
                  
               cFilComp += " AND TPF_TIPMOD = '" + M->TPF_TIPMOD + " '"

               If Trim( M->TPF_TIPMOD ) != '*'
                  
                  cExpFrt += " AND T9_TIPMOD = TPF_TIPMOD "
               
               Else
                     cFilComp += " AND NOT EXISTS ( SELECT 1"
                     cFilComp +=     " FROM " + RetSqlName('TPF') + " TPFESP"
                     cFilComp +=     " WHERE TPFESP.TPF_CODFAM = " + ValToSql( M->TPF_CODFAM )
                     cFilComp +=       " AND TPFESP.TPF_TIPMOD = T9_TIPMOD"
                     cFilComp +=       " AND TPFESP.TPF_SERVIC = " + ValToSql( M->TPF_SERVIC )
                     cFilComp +=       " AND TPFESP.TPF_SEQREL = " + ValToSql( M->TPF_SEQREL )
                     cFilComp +=       " AND TPFESP.TPF_FILIAL = " + ValToSql( xFilial('TPF') )
                     cFilComp +=       " AND TPFESP.D_E_L_E_T_ = ' ' ) "
               EndIf

               cFilComp += " %"
               cExpFrt  += " %"

               cAliasQry := GetNextAlias()

               BeginSQL Alias cAliasQry

                  SELECT TF_FILIAL, TF_CODBEM, TF_SERVICO, TF_SEQRELA
                  FROM %table:STF% STF
                  JOIN %table:TPF% TPF
                        ON TF_SERVICO = TPF_SERVIC AND TPF_FILIAL = %xFilial:TPF% AND TF_SEQREPA = TPF_SEQREL
                           AND TPF.%NotDel%
                  JOIN %table:ST9% ST9
                        ON T9_CODBEM = TF_CODBEM AND T9_CODFAMI = TPF_CODFAM AND ST9.%NotDel% AND
                        %exp:cExpFrt%

                        WHERE TF_PADRAO = 'S' AND TF_SERVICO = %Exp:M->TPF_SERVIC%  AND TF_SEQREPA = %Exp:M->TPF_SEQREL%
                        AND TF_ATIVO = 'S' AND STF.%NotDel% AND TPF_CODFAM = %Exp:M->TPF_CODFAM%
                        AND %exp:cFilComp%
               EndSQL

               While (cAliasQry)->( !EoF() )

                  dbSelectArea('STF')
                  dbSetOrder(1) //TF_FILIAL+TF_CODBEM+TF_SERVICO+TF_SEQRELA
                  If dbSeek( (cAliasQry)->TF_FILIAL + (cAliasQry)->TF_CODBEM + (cAliasQry)->TF_SERVICO + (cAliasQry)->TF_SEQRELA )

                        If ALPADRAO
                           ALTPADSTF()
                        EndIf

                        If lUpsertTP5
                           ATUTARST5( (cAliasQry)->TF_FILIAL )
                        EndIf

                        If lUpsertTPM
                           ATUDEPSTM( (cAliasQry)->TF_FILIAL )
                        EndIf

                        If lUpsertTPG
                           ATUINSSTG( (cAliasQry)->TF_FILIAL )
                        EndIf

                        If lUpsertTPH
                          
                           ATUETASTH( (cAliasQry)->TF_FILIAL )
                          
                        EndIf

                        // NOVO PROCESSO
                        If lUpsertTPM
                           ATUDEP2STM( (cAliasQry)->TF_FILIAL )
                        EndIf

                        If lUpsertTPG
                           ATUINS2STG( (cAliasQry)->TF_FILIAL )
                        EndIf

                        If lUpsertTP5
                           ATUTAR2ST5( (cAliasQry)->TF_FILIAL )
                        EndIf

                  EndIf
                  NGDBSELSKIP(cAliasQry)
               
               End

               (cAliasQry)->( dbCloseArea() )
         
            EndIf

         EndIf

      EndIf

   EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT180EXIS
Verifica se existe na tabela TP5 o codigo de tarefa digitado
@author Evaldo Cevisncki Jr.
@since 09/11/2006
@version undefined
@param cTarefa, characters, descricao
@type function
/*/
//---------------------------------------------------------------------
Function MNT180EXIS(cTarefa)

   Local lRet := .T.
   
   If !( Trim( cTarefa ) == '0' ) .And. !ExistCPO( 'TP5', M->TPF_CODFAM +;
      M->TPF_TIPMOD + M->TPF_SERVIC + M->TPF_SEQREL + cTarefa, 3 )

      lRet := .F.

   EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.
@author Rafael Diogo Richter
@since 16/12/2016
@version undefined
@return Array com opcoes da rotina.
@type function
/*/
//---------------------------------------------------------------------
Static Function MenuDef()

    Local lPyme   := Iif(Type("__lPyme") <> "U",__lPyme,.F.)
    Local aRotUsu := {}
    Local nRot

	//------------------------------------------------------------
	//|	Parametros do array a Rotina:                 	     	 |
	//| 1. Nome a aparecer no cabecalho                          |
	//| 2. Nome da Rotina associada                              |
	//| 3. Reservado                                             |
	//| 4. Tipo de Transação a ser efetuada:                     |
	//|    1 - Pesquisa e Posiciona em um Banco de Dados         |
	//|    2 - Simplesmente Mostra os Campos                     |
	//|    3 - Inclui registros no Bancos de Dados               |
	//|    4 - Altera o registro corrente                        |
	//|    5 - Remove o registro corrente do Banco de Dados      |
	//| 5. Nivel de acesso                                       |
	//| 6. Habilita Menu Funcional                 		     	 |
	//------------------------------------------------------------

    Local aRotina := {{STR0004,"AxPesqui" , 0, 1},;    //"Pesquisar"
                      {STR0005,"NG180FOLD", 0, 2},;    //"Visualizar"
                      {STR0006,"NG180FOLD", 0, 3},;    //"Incluir"
                      {STR0007,"NG180FOLD", 0, 4, 0},; //"Alterar"
                      {STR0008,"NG180FOLD", 0, 5, 3},; //"Excluir"
                      {STR0051,"NG180COPY", 0, 6, 3}}  //"Copia"

    If ExistBlock("MNTA1802")
    	aRotUsu := ExecBlock( "MNTA1802", .F., .F. )
    	If ValType(aRotUsu) == "A"
    		For nRot := 1 To Len(aRotUsu)
    			If ValType(aRotUsu[nRot]) == "A"
    				aAdd( aRotina, aClone(aRotUsu[nRot]) )
    			EndIf
    		Next
    	EndIf
    EndIf

    If !lPyme
       aAdd( aRotina, {STR0026,"MNTA180CON", 0, 4 } )  //"Conhecimento"
    EndIf

Return(aRotina)
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180TIR
Mostra a unidade
@author Inacio Luiz Kolling
@since 10/01/2008
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function NG180TIR()

    If M->TPG_TIPORE != aCOLS[n][nTIPORE]
       If M->TPG_TIPORE <> "P"
          aCOLS[n][nUNIDAD] := "H"
       EndIf
    EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA180FR
 Verifica se usa frota
@author Inacio Luiz Kolling
@since 12/02/2008
@version undefined
@type function
@return Lógico, para releases abaixo de 12.1.33 verifica se está integrado a frotas
                para releases >= 12.1.33 será sermpre .T.
/*/
//---------------------------------------------------------------------
Function MNTA180FR()

    Local lFrotas := IIf(FindFunction('MNTFrotas'), MNTFrotas(), SuperGetMv("MV_NGMNTFR",.F.," ") == 'S')

    If lFrotas

		If Posicione("SX2",1,"TPF","X2_UNICO") <> "TPF_FILIAL+TPF_CODFAM+TPF_TIPMOD+TPF_SERVIC+TPF_SEQREL"
			lFrotas := .F.
		EndIf

		If Posicione("SX2",1,"TP5","X2_UNICO") <> "TP5_FILIAL+TP5_CODFAM+TP5_TIPMOD+TP5_SERVIC+TP5_SEQREL+TP5_TAREFA"
			lFrotas := .F.
		EndIf

		If Posicione("SX2",1,"TPG","X2_UNICO") <> "TPG_FILIAL+TPG_CODFAM+TPG_TIPMOD+TPG_SERVIC+TPG_SEQREL+TPG_TAREFA+TPG_TIPORE+TPG_CODIGO"
			lFrotas := .F.
		EndIf

		If Posicione("SX2",1,"TPM","X2_UNICO") <> "TPM_FILIAL+TPM_CODFAM+TPM_TIPMOD+TPM_SERVIC+TPM_SEQREL+TPM_TAREFA+TPM_DEPEND"
			lFrotas := .F.
		EndIf

		If Posicione("SX2",1,"TPH","X2_UNICO") <> "TPH_FILIAL+TPH_CODFAM+TPH_TIPMOD+TPH_SERVIC+TPH_SEQREL+TPH_TAREFA+TPH_ETAPA"
			lFrotas := .F.
		EndIf

		If Posicione("SX2",1,"STC","X2_UNICO") <> "TC_FILIAL+TC_CODBEM+TC_TIPMOD+TC_COMPONE+TC_TIPOEST+TC_LOCALIZ+TC_SEQRELA"
			lFrotas := .F.
		EndIf

		If Posicione("SX2",1,"TP2","X2_UNICO") <> "TP2_FILIAL+TP2_CODFAM+TP2_TIPMOD+TP2_SERVIC+TP2_SEQREL+TP2_TAREFA+TP2_ETAPA+TP2_OPCAO"
			lFrotas := .F.
		EndIf

		If !lFrotas
			MsgInfo(STR0062 + Chr(13) + Chr(10) +; //"Foi identificado um problema no índice único das Tabela TPF, TP5, TPG, TPM, TPH, STC ou TP2."
			        STR0063 + Chr(13) + Chr(10) +; //"Dessa forma o parâmetro MV_NGMNTFR (Utiliza frota) será considerado como N-Não utiliza."
					STR0064,;                      //"Favor entrar em contato com o administrador do sistema."
					STR0030)                       //"ATENÇÃO"
		Else
			If !X3Obrigat( 'TPF_TIPMOD' )
				MsgInfo(STR0066 + Chr(13) + Chr(10) +; //"O campo TPF_TIPMOD está como não obrigatório."
						STR0063 + Chr(13) + Chr(10) +; //"Dessa forma o parâmetro MV_NGMNTFR (Utiliza frota) será considerado como N-Não utiliza."
						STR0067,;                      //"Favor entrar em contato com o administrador do sistema ou alterar o mesmo via configurador."
						STR0030)                       //"ATENÇÃO"
				lFrotas := .F.
			EndIf
		EndIf

    EndIf

Return lFrotas

//---------------------------------------------------------------------
/*/{Protheus.doc} NGCHKTARET
Valida o codigo da tarefa (cadastro etapas via dicionario)
@author Elisangela Costa
@since 02/05/2008
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function NGCHKTARET()

	Local lRet		:= .T.

	/*----------------------------------------------------------+
   | Cadastra tarefa 0 no folder destinado a tarefas da manut. |
   +----------------------------------------------------------*/
	If Trim( M->TPH_TAREFA ) == '0' .And.;
      M->TPF_PERIOD != 'M'

		oGet04:oBrowse:Refresh()

		If !NGIFDBSEEK( 'TP5', M->TPF_CODFAM + M->TPF_TIPMOD + M->TPF_SERVIC +;
         M->TPF_SEQREL + M->TPH_TAREFA, 3 )
			
         RecLock( 'TP5', .T. )
            TP5->TP5_FILIAL := FWxFilial( 'TP5' )
            TP5->TP5_CODFAM := M->TPF_CODFAM
            TP5->TP5_TIPMOD := M->TPF_TIPMOD
            TP5->TP5_SERVIC := M->TPF_SERVIC
            TP5->TP5_SEQREL := M->TPF_SEQREL
            TP5->TP5_TAREFA := M->TPH_TAREFA
            TP5->TP5_DESCRI := STR0011 // SEM ESPECIFICAO DE TAREFA
			MsUnLock()

			lUpsertTP5 := .T.

		EndIf

	Else
		
      If !( Trim( M->TPH_TAREFA ) == '0' ) .And. !ExistCPO( 'TP5', M->TPF_CODFAM +;
         M->TPF_TIPMOD + M->TPF_SERVIC + M->TPF_SEQREL + M->TPH_TAREFA, 3 )
			
         lRet := .F.

		EndIf

	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA180CHA
Consistencia da chave quando tem integracao com frotas
@author Inacio Luiz Kolling
@since 23/07/2008
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNTA180CHA()

	Local lRetChv := .T.

	If Trim( M->TPF_TIPMOD ) != '*'

		If !EXISTCPO("TQR",M->TPF_TIPMOD)
			lRetChv := .F.
		EndIf

	EndIf

	If lRetChv
		If !NGEXISTCHAV("TPF",M->TPF_CODFAM+M->TPF_TIPMOD+M->TPF_SERVIC+M->TPF_SEQREL,4)
			lRetChv := .F.
		EndIf
	EndIf

Return lRetChv

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT180AMOD
Atualiza os arquivos relacionados com o tipo modelo

@author Inacio Luiz Kolling
@since 18/09/2008
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNT180AMOD()

    Local aAreaAntS := GetArea()

    dbSelectArea("TPF")
    If Empty(TPF->TPF_TIPMOD)
		dbSelectArea("TPF")
		dbSetOrder(1) //TPF_FILIAL+TPF_CODFAM+TPF_SERVIC+TPF_SEQREL
		If dbSeek(xFilial("TPF") + M->TPF_CODFAM + M->TPF_SERVIC + M->TPF_SEQREL)
			RecLock("TPF",.F.)
			TPF->TPF_TIPMOD := M->TPF_TIPMOD
			MsUnLock()
		EndIf
    EndIf

	dbSelectArea("TP5")
	dbSetOrder(1) //TP5_FILIAL+TP5_CODFAM+TP5_SERVIC+TP5_SEQREL
	If dbSeek(xFilial("TP5") + M->TPF_CODFAM + M->TPF_SERVIC + M->TPF_SEQREL)
		While !Eof() .And. TP5->TP5_FILIAL == xFilial("TP5") .And. TP5->TP5_CODFAM == M->TPF_CODFAM .And.;
	                       TP5->TP5_SERVIC == M->TPF_SERVIC  .And. TP5->TP5_SEQREL == M->TPF_SEQREL

			If Empty(TP5->TP5_TIPMOD)
				RecLock("TP5",.F.)
				TP5->TP5_TIPMOD := M->TPF_TIPMOD
				MsUnLock()
			EndIf
			dbSkip()

		End
	EndIf

	dbSelectArea("TPG")
	dbSetOrder(1) //TPG_FILIAL+TPG_CODFAM+TPG_SERVIC+TPG_SEQREL
	If dbSeek(xFilial("TPG") + M->TPF_CODFAM + M->TPF_SERVIC + M->TPF_SEQREL)
		While !Eof() .And. TPG->TPG_FILIAL == xFilial("TPG") .And. TPG->TPG_CODFAM == M->TPF_CODFAM .And.;
	                       TPG->TPG_SERVIC == M->TPF_SERVIC  .And. TPG->TPG_SEQREL == M->TPF_SEQREL

			If Empty(TPG->TPG_TIPMOD)
				RecLock("TPG",.F.)
				TPG->TPG_TIPMOD := M->TPF_TIPMOD
				MsUnLock()
			EndIf
			dbSkip()

		End
	EndIf

	dbSelectArea("TPM")
	dbSetOrder(1) //TPM_FILIAL+TPM_CODFAM+TPM_SERVIC+TPM_SEQREL
	If dbSeek(xFilial("TPM") + M->TPF_CODFAM+M->TPF_SERVIC+M->TPF_SEQREL)
		While !Eof() .And. TPM->TPM_FILIAL == xFilial("TPM") .And. TPM->TPM_CODFAM == M->TPF_CODFAM .And.;
	                       TPM->TPM_SERVIC == M->TPF_SERVIC  .And. TPM->TPM_SEQREL == M->TPF_SEQREL

			If Empty(TPM->TPM_TIPMOD)
				RecLock("TPM",.F.)
				TPM->TPM_TIPMOD := M->TPF_TIPMOD
				MsUnLock()
			EndIf
			dbSkip()

		End
	EndIf

	dbSelectArea("TPH")
	dbSetOrder(1) //TPM_FILIAL+TPM_CODFAM+TPM_SERVIC+TPM_SEQREL
	If dbSeek(xFilial("TPH") + M->TPF_CODFAM+M->TPF_SERVIC+M->TPF_SEQREL)
		While !Eof() .And. TPH->TPH_FILIAL == xFilial("TPH") .And. TPH->TPH_CODFAM == M->TPF_CODFAM .And.;
	                       TPH->TPH_SERVIC == M->TPF_SERVIC  .And. TPH->TPH_SEQREL == M->TPF_SEQREL

			If Empty(TPH->TPH_TIPMOD)
				RecLock("TPH",.F.)
				TPH->TPH_TIPMOD := M->TPF_TIPMOD
				MsUnLock()
			EndIf
			dbSkip()

		End
	EndIf

	dbSelectArea("TP2")
	dbSetOrder(1) //TPM_FILIAL+TPM_CODFAM+TPM_SERVIC+TPM_SEQREL
	If dbSeek(xFilial("TP2") + M->TPF_CODFAM+M->TPF_SERVIC+M->TPF_SEQREL)
		While !Eof() .And. TP2->TP2_FILIAL == xFilial("TP2") .And. TP2->TP2_CODFAM == M->TPF_CODFAM .And.;
	                       TP2->TP2_SERVIC == M->TPF_SERVIC  .And. TP2->TP2_SEQREL == M->TPF_SEQREL

			If Empty(TP2->TP2_TIPMOD)
				RecLock("TP2",.F.)
				TP2->TP2_TIPMOD := M->TPF_TIPMOD
				MsUnLock()
			EndIf
			dbSkip()

		End
	EndIf

    RestArea(aAreaAntS)

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180QUANT
Consistencia da quantidade / unidade
@author Inacio Luiz Kolling
@since 31/10/2008
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function NG180QUANT()

    Local lRet := .T.

    If ReadVar() = "M->TPG_QUANTI"
       If !NaoVazio(M->TPG_QUANTI) .Or. !Positivo(M->TPG_QUANTI)
          lRet := .F.
       EndIf
    EndIf
    If lRet
       If M->TPG_TIPORE <> "P"
          If ReadVar() = "M->TPG_UNIDAD"
             M->TPG_QUANTI := aCols[n,nQUANTI]
          Else
             M->TPG_UNIDAD := aCols[n,nUNIDAD]
          EndIf
          lRet := NGVALQUANT(M->TPG_TIPORE,M->TPG_UNIDAD,M->TPG_QUANTI)
       EndIf
    EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA180WUNID
Consistencia do When do campo TPG_UNIDAD
@author Inacio Luiz Kolling
@since 03/03/2009
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNTA180WUNID()
Return If(aCols[n,nTIPORE] = "P",.T.,.F.)
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT180TOLE
Validacao When do campo TF_TOLERA
@author Vitor Emanuel Batista
@since 14/04/2009
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNT180TOLE()

    Local lRet := .T.

    If !(M->TPF_TIPACO $ 'T/A') .Or. (M->TPF_PERIOD $ "E")
       M->TPF_TOLERA := 0
       lRet := .F.
    EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT180TOCO
Validacao When do campo TF_TOLECON
@author Vitor Emanuel Batista
@since 14/04/2009
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNT180TOCO()

	Local lRet := .T.

	If !(M->TPF_TIPACO $ 'C/A/P/F/S') .Or. (M->TPF_PERIOD $ "E")
		M->TF_TOLECON := 0
		lRet := .F.
	EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} NG180COPY
Copia Manutencao Padrao que esta setado
@author Vitor Emanuel Batista
@since 23/06/2009
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function NG180COPY()

   Local nRecno := TPF->(Recno()),lOk := .T.
   Private lCopia := .F.

   If xFilial("TPF") != TPF->TPF_FILIAL .Or. (TPF->(Eof()) .And. TPF->(Bof()))
      HELP(" ",1,"ARQVAZIO")
      lOk := .F.
   EndIf

   If lOk
      lCopia := .T.
      NG180FOLD("TPF",nRecno,4)
      lCopia := .F.
   EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT180TP5W
Validacao do When do campo TP5_DESCRI

@author Vitor Emanuel Batista
@since 19/10/2009

@sample MNT180TP5W()

@param
@return lRet, Lógico, Verifica se o campo será ou não fechado
/*/
//---------------------------------------------------------------------
Function MNT180TP5W()

	Local lRet := .T.

	If NGUSATARPAD()

		If NGIFDBSEEK("TT9", GdFieldGet("TP5_TAREFA", n), 1)
			lRet := .F.
		EndIf

	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT180T5F3
Altera a consulta generica do campo T5_TAREFA pelo WHEN
@type function

@author Vitor Emanuel Batista
@since 19/10/2009

@param
@return .T.
@todo Remover na versão 12.1.29
/*/
//---------------------------------------------------------------------
Function MNT180T5F3()
Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA180CON
Funcionalidade do botao do conhecimento
@author Marcos Wagner Junior
@since 17/08/10
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNTA180CON()

    Local aOldArea := GetArea()

    If ExistBlock("MNTA1801")
       ExecBlock("MNTA1801",.F.,.F.)
    Else
       MsDocument("TPF",Recno(),4)
    EndIf

    RestArea(aOldArea)

Return .T.

//----------------------------------------------------------------
/*/{Protheus.doc} ChangeGet()
Realiza backup do aCols modificado e carrega novo aCols de acordo
com mudança de Aba.

@author Pedro Henrique Soares de Souza
@since	05/01/2015
@return Nil Nulo
/*/
//----------------------------------------------------------------
Static Function ChangeGet()

	Do Case
		Case oFolder:nOption == 2
			EntraGet(1)

		Case oFolder:nOption == 3
			EntraGet(2)

		Case oFolder:nOption == 4
			EntraGet(3)

		Case oFolder:nOption == 5
			EntraGet(4)
	EndCase

Return

//----------------------------------------------------------------
/*/{Protheus.doc} CheckCols()
Verifica se o aCols atual está de acordo com o que será validado
no linOk.

@author Pedro Henrique Soares de Souza
@since	05/01/2015
@return Nil Nulo
/*/
//----------------------------------------------------------------
Static Function CheckCols()

	Local lRet := .T.

	If ( lRet := NG180ENCOK() )
		
      Do Case

			Case oFolder:nOption == 2 // Tarefas
				
            If ( lRet := NG180LINOK() )

					GRAVATAR( 2 )

				EndIf

			Case oFolder:nOption == 3 // Dependências

				lRet := NG180LINO2()
			
         Case oFolder:nOption == 4 // Insumos
				
            aSVCOLS[3] := aClone( oGet03:aCols )
				If !( lRet := NG180LINO3() )
					oGet03:Refresh()
				Else
					SETKEY( VK_F4, Nil )
				EndIf

			Case oFolder:nOption == 5 // Etapas
				
            aSVCOLS[4] := aClone( oGet04:aCols )
				
            If !( lRet := NG180LINO4() )
					
               oGet04:Refresh()

				EndIf

		EndCase

	EndIf

Return lRet

//--------------------------------------------------------------------------------------------------
/*/{Proteus.doc} VldAllGets
Realiza a chamada da consistência dos folders.
@type static

@author Alexandre Santos
@since  19/06/2019

@sample VldAllGets( 4 )

@param  nGet   , Númerico, Define qual folder está em validação.
@return Lógico , Define se o processo foi realizado com êxito.
/*/
//------------------------------------------------------------------------------------------------
Static Function VldAllGets( nGet )

	Local lRet    := .T.

	If nGet == 4
		
      lRet := VldALLGet4()
	
	EndIf

Return lRet


//----------------------------------------------------
/*/{Proteus.doc} fGravaTp1
Gravação das opções da etapa TP1 conforme padrão TP2

@author Maria Elisandra de Paula
@since 24/10/2019

@param cKeyManut, string, chave da STF - manutenção do bem
@param cKeyPadrao, string, chave da TPF - manut. padrão
@param cFilOri, string, filial origem da STF
@return nil
/*/
//----------------------------------------------------
Static Function fGravaTp1( cKeyManut, cKeyPadrao, cFilOri )

    Local i := 0
    Local x := 0
    Local v

    If NGIFDBSEEK( "TP2", cKeyPadrao, 3 )

        While !Eof() .And. xFilial("TP2") == TPH->TPH_FILIAL .And.;
            TP2->TP2_CODFAM == TPH->TPH_CODFAM .And.;
            TP2->TP2_SERVIC == TPH->TPH_SERVIC .And.;
            TP2->TP2_SEQREL == TPH->TPH_SEQREL .And.;
            TP2->TP2_TAREFA == TPH->TPH_TAREFA .And.;
            TP2->TP2_ETAPA  == TPH->TPH_ETAPA .And. ;
			   TP2->TP2_TIPMOD == TPH->TPH_TIPMOD

            //Inclui ou altera a opção da etapa conforme padrão

            If !NGIFDBSEEK( "TP1", cKeyManut + TP2->TP2_OPCAO, 1,, cFilOri )
                dbSelectArea("TP1")
                RecLock("TP1",.T.)
                TP1->TP1_FILIAL := xFilial( "TP1", cFilOri )
                TP1->TP1_CODBEM := STF->TF_CODBEM
                TP1->TP1_SERVIC := STF->TF_SERVICO
                TP1->TP1_SEQREL := STF->TF_SEQRELA

                For i := 1 To FCOUNT()
                    If FIELDNAME(i) <> "TP1_FILIAL" .And. FIELDNAME(i) <> "TP1_CODBEM" .And.;
                        FIELDNAME(i) <> "TP1_SERVIC" .And. FIELDNAME(i) <> "TP1_SEQREL"
                        For x := 1 To Len(arrayTP2)
                            If AllTrim(SUBSTR(arrayTP2[x],4,7)) == AllTrim(SUBSTR(FIELDNAME(i),4,7))
                                v := "TP1->" + FIELDNAME(i)
                                y := "TP2->" + arrayTP2[x]
                                &v. := &y.
                                Exit
                            EndIf
                        Next x
                    EndIf
                Next i
                MsUnLock()
            Else

                RecLock("TP1",.F.)
                For i := 1 To FCOUNT()
                    If FIELDNAME(i) <> "TP1_FILIAL" .And. FIELDNAME(i) <> "TP1_CODBEM"  .And.;
                        FIELDNAME(i) <> "TP1_SERVIC" .And. FIELDNAME(i) <> "TP1_SEQREL"  .And.;
                        FIELDNAME(i) <> "TP1_TAREFA" .And. FIELDNAME(i) <> "TP1_ETAPA"
                        For x := 1 To Len(arrayTP2)
                            If AllTrim(SUBSTR(arrayTP2[x],4,7)) == AllTrim(SUBSTR(FIELDNAME(i),4,7))
                                v := "TP1->" + FIELDNAME(i)
                                y := "TP2->" + arrayTP2[x]
                                If MV_PAR02 == 2 .And. &v <> &y
                                    &v. := &y.
                                EndIf
                            EndIf
                        Next x
                    EndIf
                Next i
                MsUnLock()

            EndIf

            NGDBSELSKIP("TP2")
        End
    EndIf

Return

//----------------------------------------------------------------
/*/{Protheus.doc} MNTA180GAT()
Executa gatilhos específicos.

@param cCampo, Caractere, Nome do campo

@author Wexlei Silveira
@since	06/04/2020
@return cDesc, Caractere, Descrição do campo
/*/
//----------------------------------------------------------------
Function MNTA180GAT(cCampo)

	Local cDesc := ''

	If cCampo == 'TPF_TIPMOD'

		// A partir do release 12.1.33, o valor '*' torna-se válido e indica que a regra aplica-se à todos os tipos modelos existentes
		If Trim(M->TPF_TIPMOD) == '*'
			cDesc := STR0070 // TODOS
		Else
			cDesc := Posicione('TQR', 1, xFilial('TQR') + M->TPF_TIPMOD, 'TQR_DESMOD')
		EndIf

	EndIf

Return cDesc

//----------------------------------------------------------------
/*/{Protheus.doc} MNTA180INI()
Inicializador padrão para a descrição de campos.

@author Wexlei Silveira
@since	09/04/2020
@return cDesc, Caractere, Descrição do campo
/*/
//----------------------------------------------------------------
Function MNTA180INI(cCampo)

	Local cDesc := ''

	If cCampo == 'TPF_DESMOD'

		// A partir do release 12.1.33, o valor '*' torna-se válido e indica que a regra aplica-se à todos os tipos modelos existentes
		If Trim(M->TPF_TIPMOD) == '*'
			cDesc := STR0070 // TODOS
		Else
			cDesc := TQR->(VDISP(TPF->TPF_TIPMOD, 'TQR->TQR_DESMOD'))
		EndIf

	EndIf

Return cDesc

//----------------------------------------------------------------
/*/{Protheus.doc} fVldPeriod
Valid. preenchimento dos campos obrigatórios para periodicidade.
@type function

@author Alexandre Santos
@since 02/08/2023

@param  nTempMan, integer, Conteúdo do campo Tempo Manut.
@param  cUnidMan, string , Conteúdo do campo Uni. Tempo.
@param  nIncrMan, integer, Conteúdo do campo Incr. Manut.

@return boolean, Indica se os campos estão preenchidos.
/*/
//----------------------------------------------------------------
Static Function fVldPeriod( nTempMan, cUnidMan, nIncrMan )
   
   Local lRet  := .T.
   
   Do Case
   
      Case M->TPF_TIPACO == 'T'
         
         If Empty( nTempMan )
            
            Help( '', 1, 'TEENMAN' )
            
            lRet := .F.

         EndIf
         
         If Empty( cUnidMan ) .And. lRet
            
            Help( '', 1, 'UNENMAN' )

            lRet := .F.

         EndIf

      Case M->TPF_TIPACO == 'A'
         
         If Empty( nTempMan )
            
            Help( '', 1, 'TEENMAN' )

            lRet := .F.

         EndIf
         
         If Empty( cUnidMan ) .And. lRet
            
            Help( '', 1, 'UNENMAN' )

            lRet := .F.

         EndIf

         If Empty( nIncrMan ) .And. lRet
            
            Help( '', 1, 'INENMAN' )

            lRet := .F.

         EndIf

      Case M->TPF_TIPACO $ 'C/P/F'
         
         If Empty( nIncrMan )

            Help( '', 1, 'INENMAN' )
            
            lRet := .F.
         
         EndIf

   End Case
   
Return lRet

//----------------------------------------------------------------
/*/{Protheus.doc} Mnta180Vld
Validação de campos.
@type function

@author Alexandre Santos
@since 19/07/2023

@param  cField , string, Campo que será validado.
@return boolean, Indica se o conteúdo do campo foi validado.
/*/
//----------------------------------------------------------------
Function Mnta180Vld( cField )

   Local nInd1    := 0
   Local nTeenMan := 0
   Local nUnenMan := 0
   Local nInenMan := 0
   Local lRet     := .T.

   Do Case

      Case cField == 'TPF_TIPACO'

         If ( lRet := Pertence( 'TCAPFS' ) )

				lRet := NG180CHKCTD()

				If lRet

					/*---------------------------------------------------+
					| Limpa os campos de acordo com o tipo da manutenção |
					+---------------------------------------------------*/
					If ( M->TPF_TIPACO != 'T' .And. M->TPF_TIPACO != 'A' )

						If M->TPF_PERIOD == 'M'

							nUnenMan := GDFieldPos( 'TP5_UNENMA' , oGet01:aHeader )
							nTeenMan := GDFieldPos( 'TP5_TEENMA' , oGet01:aHeader )
					
							For nInd1 := 1 To Len( oGet01:aCols )

								oGet01:aCols[nInd1,nUnenMan] := ''
								oGet01:aCols[nInd1,nTeenMan] := 0

							Next nInd1

						Else

							M->TPF_TEENMA := 0
							M->TPF_UNENMA := ''
						
						EndIf

					ElseIf M->TPF_TIPACO == 'T'

						If M->TPF_PERIOD == 'M'

							nInenMan := GDFieldPos( 'TP5_INENMA' , oGet01:aHeader )

							For nInd1 := 1 To Len( oGet01:aCols )

								oGet01:aCols[nInd1,nInenMan] := 0

							Next nInd1

						Else

							M->TPF_INENMA := 0

						EndIf

					EndIf

				EndIf

			EndIf

      Case cField == 'TPF_PERIOD'

         If ( lRet := Pertence( 'RUEM' ) )

            nTeenMan := GDFieldPos( 'TP5_TEENMA', oGet01:aHeader )
            nInenMan := GDFieldPos( 'TP5_INENMA', oGet01:aHeader )
            nUnenMan := GDFieldPos( 'TP5_UNENMA', oGet01:aHeader )

            If M->TPF_PERIOD == 'M'

               If nUnenMan == 0 .Or. nTeenMan == 0 .Or.;
                  nInenMan == 0

                  Help( '', 1, 'PERIODMULT' )

                  lRet := .F.

               Else

                  If ( lRet := ULTSEQTPF() )

                     M->TPF_UNENMA := ''
                     M->TPF_TEENMA := 0
                     M->TPF_INENMA := 0

                  EndIf

               EndIf

            Else

               If nUnenMan > 0 .And. nTeenMan > 0 .And.;
                  nInenMan > 0
               
                  For nInd1 := 1 To Len( oGet01:aCols )

                     oGet01:aCols[nInd1,nUnenMan] := ''
                     oGet01:aCols[nInd1,nTeenMan] := 0
                     oGet01:aCols[nInd1,nInenMan] := 0

                  Next nInd1

               EndIf

            EndIf

         EndIf
      
      Case cField == 'TPF_TEENMA'

         If !Empty( M->TPF_TEENMA )

            lRet := Positivo()

         EndIf
      
      Case cField == 'TPF_UNENMA'

         If !Empty( M->TPF_UNENMA ) .And.;
            M->TPF_TIPACO $ 'T/A'

            lRet := Pertence( 'DSMH' )
           
         EndIf

      Case cField == 'TPF_INENMA'

         If !Empty( M->TPF_INENMA ) .And. Positivo() .And.;
            M->TPF_TIPACO $ 'C/A/P/F/S'

            lRet := NaoVazio( M->TPF_INENMA )

         EndIf

      Case cField == 'TP5_TAREFA'

         If !Empty( M->TP5_TAREFA )

            lRet := MNTA120Tar( M->TP5_TAREFA, 'TP5' )                                                                                              

         EndIf

      Case cField == 'TP5_TEENMA'

         If !Empty( M->TP5_TEENMA )

            lRet := Positivo()

         EndIf

      Case cField == 'TP5_UNENMA'
 
         If !Empty( M->TP5_UNENMA ) .And.;
            M->TPF_TIPACO $ 'T/A'

            lRet := Pertence( 'DSMH' )
           
         EndIf
      
      Case cField == 'TP5_INENMA'

         If !Empty( M->TP5_INENMA ) .And. Positivo() .And.;
            M->TPF_TIPACO $ 'C/A/P/F/S'

            lRet := NaoVazio( M->TP5_INENMA )

         EndIf
      
      Case cField == 'TPH_TIPOPE'

         If !Empty( M->TPH_TIPOPE )

            lRet := ExistCPO( 'SX5', 'KU' + M->TPH_TIPOPE )

         EndIf

   End Case
   
Return lRet

//----------------------------------------------------------------
/*/{Protheus.doc} Mnta180Whe
When de campos.
@type function

@author Alexandre Santos
@since 19/07/2023

@param  cField , string, Campo que será validado.
@return boolean, Indica se o campo deve se manter fechado.
/*/
//----------------------------------------------------------------
Function Mnta180Whe( cField )

   Local cAlsSTF  := ''
   Local cJoin    := "%"
   Local nTeenMan := 0
   Local lRet     := .T.

   Do Case
      
      Case cField == 'TPF_PERIOD'

         If Trim( M->TPF_TIPMOD ) != '*'

            cJoin += "AND ST9.T9_TIPMOD = " + ValToSql( M->TPF_TIPMOD )

         EndIf

         cJoin   += "%"
         cAlsSTF := GetNextAlias()

         BeginSQL Alias cAlsSTF

            SELECT 
               1
            FROM 
               %table:STF% STF
            INNER JOIN 
               %table:ST9% ST9 ON  
                  ST9.T9_FILIAL  = %xFilial:ST9%       AND
                  ST9.T9_CODBEM  = STF.TF_CODBEM       AND
                  ST9.T9_CODFAMI = %exp:M->TPF_CODFAM% AND
                  ST9.%NotDel%
                  %exp:cJoin%
            WHERE   
               STF.TF_FILIAL  = %xFilial:STF%       AND
               STF.TF_SERVICO = %exp:M->TPF_SERVIC% AND
               STF.TF_SEQREPA = %exp:M->TPF_SEQREL% AND
               STF.TF_PADRAO  = 'S'                 AND
               STF.%NotDel%

         EndSQL

         If (cAlsSTF)->( !EoF() )

            /*-------------------------------------------------------+
            | Fecha o campo caso haja vinculo com alguma manutenção. |
            +-------------------------------------------------------*/
            lRet := .F.

         EndIf

         (cAlsSTF)->( dbCloseArea() )
      Case cField == 'TPF_TEENMA'

         lRet := ( M->TPF_PERIOD != 'M' .And. M->TPF_TIPACO $ 'T/A' )

      Case cField == 'TPF_UNENMA'

         lRet := ( M->TPF_PERIOD != 'M' .And. M->TPF_TEENMA > 0 )
      
      Case cField == 'TPF_INENMA'

         lRet := ( M->TPF_PERIOD != 'M' .And. M->TPF_TIPACO != 'T' )

      Case cField == 'TP5_TEENMA'

         lRet := ( M->TPF_PERIOD == 'M' .And. M->TPF_TIPACO $ 'T/A' )

      Case cField == 'TP5_UNENMA'

         If ( nTeenMan := GDFieldPos( 'TP5_TEENMA' , oGet01:aHeader ) ) > 0
 
            lRet := ( M->TPF_PERIOD == 'M' .And.;
               oGet01:aCols[oGet01:nAt,nTeenMan] > 0 )
         
         EndIf
      
      Case cField == 'TP5_INENMA'

         lRet := ( M->TPF_PERIOD == 'M' .And. M->TPF_TIPACO != 'T' )

      Case cField == 'TP5_DESCRI'

         lRet := MNT180TP5W()

   End Case
   
Return lRet

//----------------------------------------------------------------
/*/{Protheus.doc} Mnta180Rel
Inicializador padrão de campos.
@type function

@author Alexandre Santos
@since 09/08/2023

@param  cField, string, Campo que será validado.
@return string, Conteúdo dos campos inicializado.
/*/
//----------------------------------------------------------------
Function Mnta180Rel( cField )

   Local cRet := ''

   Do Case
      
      Case cField == 'TPH_DSCOPE'

         If ALTERA .And. !Empty( TPH->TPH_TIPOPE )

            cRet := Posicione( 'SX5', 1, FWxFilial( 'SX5' ) + 'KU' +;
               TPH->TPH_TIPOPE, 'X5DESCRI()' )                                            
               
			EndIf

   End Case
   
Return cRet

//----------------------------------------------------------------
/*/{Protheus.doc} Mnta180Rel
Consiste se ouve alteração nas entidades da manutenção padrão.
@type function

@author Alexandre Santos
@since 27/02/2024

@param 
@return
/*/
//----------------------------------------------------------------
Static Function fVldUpdate()

   Local nInd1 := 0
   Local nInd2 := 0

   If !lUpsertTP5

      If Len( oGet01:aCols ) != Len( aCopyTP5 )

         lUpsertTP5 := .T.

      Else

         For nInd1 := 1 To Len( aCopyTP5 )

            If aTail( oGet01:aCols[nInd1] )

               lUpsertTP5 := .T.

               Exit

            EndIf
            
            For nInd2 := 1 To Len( oGet01:aHeader )

               If aCopyTP5[nInd1,nInd2] != oGet01:aCols[nInd1,nInd2]
               
                  lUpsertTP5 := .T.

                  Exit

               EndIf
               
            Next nInd2

            If lUpsertTP5

               Exit

            EndIf

         Next nInd1

      EndIf

   EndIf

   If Len( oGet02:aCols ) != Len( aOldTPM )

      lUpsertTPM := .T.

   Else

      For nInd1 := 1 To Len( aOldTPM )

         If aTail( oGet02:aCols[nInd1] )

            lUpsertTPM := .T.

            Exit

         EndIf
         
         For nInd2 := 1 To Len( oGet02:aHeader )

            If aOldTPM[nInd1,nInd2] != oGet02:aCols[nInd1,nInd2]
            
               lUpsertTPM := .T.

               Exit

            EndIf
            
         Next nInd2

         If lUpsertTPM

            Exit

         EndIf

      Next nInd1

   EndIf

   If Len( oGet03:aCols ) != Len( aOldTPG )

      lUpsertTPG := .T.

   Else

      For nInd1 := 1 To Len( aOldTPG )

         If aTail( oGet03:aCols[nInd1] )

            lUpsertTPG := .T.

            Exit

         EndIf
         
         For nInd2 := 1 To Len( oGet03:aHeader )

            If aOldTPG[nInd1,nInd2] != oGet03:aCols[nInd1,nInd2]
            
               lUpsertTPG := .T.

               Exit

            EndIf
            
         Next nInd2

         If lUpsertTPG

            Exit

         EndIf

      Next nInd1

   EndIf

   If Len( oGet04:aCols ) != Len( aOldTPH )

      lUpsertTPH := .T.

   Else

      For nInd1 := 1 To Len( aOldTPH )

         If aTail( oGet04:aCols[nInd1] )

            lUpsertTPH := .T.

            Exit

         EndIf
         
         For nInd2 := 1 To Len( oGet04:aHeader )

            If aOldTPH[nInd1,nInd2] != oGet04:aCols[nInd1,nInd2]
            
               lUpsertTPH := .T.

               Exit

            EndIf
            
         Next nInd2

         If lUpsertTPH

            Exit

         EndIf

      Next nInd1

   EndIf
   
Return
