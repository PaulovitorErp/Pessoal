#include "msobject.ch"
#include "protheus.ch"
#include "totvs.framework.treports.integratedprovider.th"

//Cria um novo namespace para a classe    
namespace custom.purchaseorder


//Caso queira desativar a utilizacao da classe  active=.F.
@totvsFrameworkTReportsIntegratedProvider(active=.T., team="Compel", tables="SD3,SB1", name="Combustivel", country="BRA", initialRelease="12.1.2310")

class PSSmartViewBusinessObject from totvs.framework.treports.integratedprovider.IntegratedProvider
	public method new()            as object
	public method getDisplayName() as character
	public method getDescription() as character
	public method getData()        as object
	public method getSchema()      as object

	protected data aFields         as array
	protected data lExistPergunte  as logical
endclass

method new() class PSSmartViewBusinessObject
	_Super:new()

//Nome que aparecera no objeto de dados
	self:appendArea("Dados Compel")

	self:aFields := {"D3_FILIAL","D3_EMISSAO","D3_COD","B1_DESC","D3_QUANT","D3_CUSTO1","D3_XCODVEI","D3_XMODVEI","D3_XKMVEIC","D3_XMOTORI","D3_XNOMEMO","D3_OBSERVA"}

	self:lExistPergunte := self:setPergunte("RELCOMBU")

	if !self:lExistPergunte
		self:setErrorStatus(400, "Sem Pergunte", "Verifique se o grupo de perguntas RELCOMBU existe na sua base!")
	endif
return self


method getDisplayName() as character class PSSmartViewBusinessObject
return "Consumo Diesel"


method getDescription() as character class PSSmartViewBusinessObject
return "Objeto de Negócio Operação"

//Retorna os dados do objeto de negocios  
method getData(nPage as numeric, oFilter as object) as object class PSSmartViewBusinessObject
	local cQuery     as character
	local cAlias     as character
	local nSkip      as numeric
	local nCount     as numeric
	local nX         as numeric
	local jItems     as json
	local aPDFields  as array
	local oExec      as object
	local aAllFields as array
	local cId        as character
	local cRealName  as character
	local jParams    as json
	local lHasParam  as logical

	if !self:lExistPergunte
		return self:oData
	else
		nCount := 0

		//Query do objeto de negocios
		cQuery := "SELECT " + self:getSQLFields(,,,.T.) + CRLF
		cQuery += "FROM SD3010 SD3 " + CRLF
		cQuery += "INNER JOIN SB1010 SB1 ON SB1.B1_COD = SD3.D3_COD " + CRLF
		cQuery += "AND SB1.D_E_L_E_T_ = ' ' AND SD3.D_E_L_E_T_ = ' '"

		//Os filtros serão setados na interface do novo TReports
		if oFilter:hasFilter()
			cQuery += " AND " + oFilter:getSQLExpression()
		endif

		jParams := oFilter:getParameters() //método para retorno do json dos parâmetros

		lHasParam := !empty(jParams["MV_PAR01"][1]) .and. !empty(jParams["MV_PAR02"][1]) .and. !empty(jParams["MV_PAR03"][1])




		if lHasParam

			cQuery += " AND  D3_EMISSAO BETWEEN ? AND ?"
			cQuery += " AND D3_COD = ?"

		endif


		oExec  := FwExecStatement():New(ChangeQuery(cQuery))

		if lHasParam

			oExec:setString(1, jParams["MV_PAR01"][1])
            oExec:setString(2, jParams["MV_PAR02"][1])
			oExec:setString(3, jParams["MV_PAR03"][1])

		endif

		cAlias := oExec:OpenAlias()

		if nPage > 1
			//Encontra a quantidade de itens que irá pular de acordo com a página atual
			nSkip := ((nPage - 1) * self:getPageSize())

			(cAlias)->(dbSkip(nSkip))
		endif

		//Verifica se precisa fazer o tratamento para LGPD
		aPDFields := FwProtectedDataUtil():UsrAccessPDField(__cUserID, self:aFields)
		lObfuscated := len( aPDFields ) != Len(self:aFields)
		aAllFields := self:getStructFields()

		while !(cAlias)->(Eof())
			jItems := JsonObject():new()

			for nX := 1 To Len(aAllFields)
				cId := aAllFields[nX]:getName()
				cRealName := aAllFields[nX]:getRealName()
				if lObfuscated .and. aScan(aPDFields, cRealName) == 0
					if aAllFields[nX]:getType() == "date"
						jItems[cId] := nil
					elseif  aAllFields[nX]:getType() == "number"
						jItems[cId] := Val( Replicate( "9", Len((cAlias)->&(cRealName)) ) )
					else
						jItems[cId] := FwProtectedDataUtil():ValueAsteriskToAnonymize((cAlias)->&(cRealName))
					endif
				else
					if aAllFields[nX]:getType() == "date"
						jItems[cId] := totvs.framework.treports.date.stringToTimeStamp((cAlias)->&(cRealName))


					else
						jItems[cId] := (cAlias)->&(cRealName)
					endif
				endif
			next nX



			self:appendData(jItems)

			(cAlias)->(DBSkip())
			nCount++

			//Sai do loop quando chegar no tamanho de itens da página
			if nCount == self:getPageSize()
				exit
			endif
		enddo

		//Se não for o último registro indica que terá próxima página
		self:setHasNext(!(cAlias)->(Eof()))

		(cAlias)->(DBCloseArea())
	endif

return self:oData

//Retorna a estrutura dos campos  
method getSchema() as object class PSSmartViewBusinessObject
	// Inclui os campos da tabela SD3 e SB1 na sequência desejada
	self:aliasToSchema("SD3", {"D3_FILIAL", "D3_EMISSAO", "D3_COD"})
	self:aliasToSchema("SB1", {"B1_DESC"}) // Adiciona B1_DESC logo após D3_COD
	self:aliasToSchema("SD3", {"D3_QUANT", "D3_CUSTO1", "D3_XCODVEI", "D3_XMODVEI", "D3_XKMVEIC", "D3_XMOTORI", "D3_XNOMEMO", "D3_OBSERVA"})

return self:oSchema



